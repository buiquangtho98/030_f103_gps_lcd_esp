
030_f103_gps_lcd_esp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  080081f8  080081f8  000181f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008630  08008630  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08008630  08008630  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008630  08008630  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008638  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  200001f0  08008828  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000df4  08008828  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9db  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f95  00000000  00000000  0002bc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085f  00000000  00000000  0002e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b36  00000000  00000000  0002eed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1f1  00000000  00000000  00031a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086e39  00000000  00000000  0003fbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fe0  00000000  00000000  000c6a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000caa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080081dc 	.word	0x080081dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	080081dc 	.word	0x080081dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <decodeGGA>:
 @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 @Returns 0 on success
 @ returns 1, 2 depending on where the return statement is excuted, check function for more details
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8000d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d94:	b08c      	sub	sp, #48	; 0x30
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000d9c:	4b5b      	ldr	r3, [pc, #364]	; (8000f0c <decodeGGA+0x17c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8000da6:	e004      	b.n	8000db2 <decodeGGA+0x22>
		inx++;  // 1st ','
 8000da8:	4b58      	ldr	r3, [pc, #352]	; (8000f0c <decodeGGA+0x17c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a57      	ldr	r2, [pc, #348]	; (8000f0c <decodeGGA+0x17c>)
 8000db0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000db2:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <decodeGGA+0x17c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b2c      	cmp	r3, #44	; 0x2c
 8000dc0:	d1f2      	bne.n	8000da8 <decodeGGA+0x18>
	inx++;
 8000dc2:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <decodeGGA+0x17c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a50      	ldr	r2, [pc, #320]	; (8000f0c <decodeGGA+0x17c>)
 8000dca:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000dcc:	e004      	b.n	8000dd8 <decodeGGA+0x48>
		inx++;  // After time ','
 8000dce:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <decodeGGA+0x17c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a4d      	ldr	r2, [pc, #308]	; (8000f0c <decodeGGA+0x17c>)
 8000dd6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000dd8:	4b4c      	ldr	r3, [pc, #304]	; (8000f0c <decodeGGA+0x17c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b2c      	cmp	r3, #44	; 0x2c
 8000de6:	d1f2      	bne.n	8000dce <decodeGGA+0x3e>
	inx++;
 8000de8:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <decodeGGA+0x17c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a47      	ldr	r2, [pc, #284]	; (8000f0c <decodeGGA+0x17c>)
 8000df0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000df2:	e004      	b.n	8000dfe <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8000df4:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <decodeGGA+0x17c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a44      	ldr	r2, [pc, #272]	; (8000f0c <decodeGGA+0x17c>)
 8000dfc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000dfe:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <decodeGGA+0x17c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b2c      	cmp	r3, #44	; 0x2c
 8000e0c:	d1f2      	bne.n	8000df4 <decodeGGA+0x64>
	inx++;
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <decodeGGA+0x17c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a3d      	ldr	r2, [pc, #244]	; (8000f0c <decodeGGA+0x17c>)
 8000e16:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000e18:	e004      	b.n	8000e24 <decodeGGA+0x94>
		inx++;  // after NS ','
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <decodeGGA+0x17c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a3a      	ldr	r2, [pc, #232]	; (8000f0c <decodeGGA+0x17c>)
 8000e22:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <decodeGGA+0x17c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b2c      	cmp	r3, #44	; 0x2c
 8000e32:	d1f2      	bne.n	8000e1a <decodeGGA+0x8a>
	inx++;
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <decodeGGA+0x17c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a34      	ldr	r2, [pc, #208]	; (8000f0c <decodeGGA+0x17c>)
 8000e3c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000e3e:	e004      	b.n	8000e4a <decodeGGA+0xba>
		inx++;  // after longitude ','
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <decodeGGA+0x17c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <decodeGGA+0x17c>)
 8000e48:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <decodeGGA+0x17c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b2c      	cmp	r3, #44	; 0x2c
 8000e58:	d1f2      	bne.n	8000e40 <decodeGGA+0xb0>
	inx++;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <decodeGGA+0x17c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a2a      	ldr	r2, [pc, #168]	; (8000f0c <decodeGGA+0x17c>)
 8000e62:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000e64:	e004      	b.n	8000e70 <decodeGGA+0xe0>
		inx++;  // after EW ','
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <decodeGGA+0x17c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <decodeGGA+0x17c>)
 8000e6e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <decodeGGA+0x17c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b2c      	cmp	r3, #44	; 0x2c
 8000e7e:	d1f2      	bne.n	8000e66 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <decodeGGA+0x17c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <decodeGGA+0x17c>)
 8000e88:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <decodeGGA+0x17c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b31      	cmp	r3, #49	; 0x31
 8000e98:	d00f      	beq.n	8000eba <decodeGGA+0x12a>
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <decodeGGA+0x17c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b32      	cmp	r3, #50	; 0x32
 8000ea8:	d007      	beq.n	8000eba <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <decodeGGA+0x17c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b36      	cmp	r3, #54	; 0x36
 8000eb8:	d106      	bne.n	8000ec8 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <decodeGGA+0x17c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8000ec6:	e009      	b.n	8000edc <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
		return 1;  // return error
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e368      	b.n	80015a4 <decodeGGA+0x814>
		inx++;  // 1st ','
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <decodeGGA+0x17c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <decodeGGA+0x17c>)
 8000eda:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <decodeGGA+0x17c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b2c      	cmp	r3, #44	; 0x2c
 8000eea:	d1f2      	bne.n	8000ed2 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <decodeGGA+0x17c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <decodeGGA+0x17c>)
 8000ef4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	220c      	movs	r2, #12
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f004 f979 	bl	80051f6 <memset>
	i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000f08:	e016      	b.n	8000f38 <decodeGGA+0x1a8>
 8000f0a:	bf00      	nop
 8000f0c:	2000020c 	.word	0x2000020c
	{
		buffer[i] = GGAbuffer[inx];
 8000f10:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <decodeGGA+0x338>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	7819      	ldrb	r1, [r3, #0]
 8000f1c:	f107 020c 	add.w	r2, r7, #12
 8000f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f22:	4413      	add	r3, r2
 8000f24:	460a      	mov	r2, r1
 8000f26:	701a      	strb	r2, [r3, #0]
		i++;
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000f2e:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <decodeGGA+0x338>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a64      	ldr	r2, [pc, #400]	; (80010c8 <decodeGGA+0x338>)
 8000f36:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000f38:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <decodeGGA+0x338>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b2c      	cmp	r3, #44	; 0x2c
 8000f46:	d1e3      	bne.n	8000f10 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fb55 	bl	80045fc <atoi>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a5d      	ldr	r2, [pc, #372]	; (80010cc <decodeGGA+0x33c>)
 8000f56:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5a:	1312      	asrs	r2, r2, #12
 8000f5c:	17db      	asrs	r3, r3, #31
 8000f5e:	1ad2      	subs	r2, r2, r3
 8000f60:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <decodeGGA+0x340>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	495b      	ldr	r1, [pc, #364]	; (80010d4 <decodeGGA+0x344>)
 8000f66:	fb81 0103 	smull	r0, r1, r1, r3
 8000f6a:	1149      	asrs	r1, r1, #5
 8000f6c:	17db      	asrs	r3, r3, #31
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	4a59      	ldr	r2, [pc, #356]	; (80010d8 <decodeGGA+0x348>)
 8000f74:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fb3e 	bl	80045fc <atoi>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a54      	ldr	r2, [pc, #336]	; (80010d4 <decodeGGA+0x344>)
 8000f84:	fb82 1203 	smull	r1, r2, r2, r3
 8000f88:	1152      	asrs	r2, r2, #5
 8000f8a:	17db      	asrs	r3, r3, #31
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	4a51      	ldr	r2, [pc, #324]	; (80010d4 <decodeGGA+0x344>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1151      	asrs	r1, r2, #5
 8000f96:	17da      	asrs	r2, r3, #31
 8000f98:	1a8a      	subs	r2, r1, r2
 8000f9a:	2164      	movs	r1, #100	; 0x64
 8000f9c:	fb01 f202 	mul.w	r2, r1, r2
 8000fa0:	1a9a      	subs	r2, r3, r2
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <decodeGGA+0x340>)
 8000fa4:	6819      	ldr	r1, [r3, #0]
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <decodeGGA+0x344>)
 8000fa8:	fb83 0301 	smull	r0, r3, r3, r1
 8000fac:	1158      	asrs	r0, r3, #5
 8000fae:	17cb      	asrs	r3, r1, #31
 8000fb0:	1ac3      	subs	r3, r0, r3
 8000fb2:	2064      	movs	r0, #100	; 0x64
 8000fb4:	fb00 f303 	mul.w	r3, r0, r3
 8000fb8:	1acb      	subs	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a47      	ldr	r2, [pc, #284]	; (80010dc <decodeGGA+0x34c>)
 8000fbe:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8000fc0:	4b46      	ldr	r3, [pc, #280]	; (80010dc <decodeGGA+0x34c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b3b      	cmp	r3, #59	; 0x3b
 8000fc6:	dd09      	ble.n	8000fdc <decodeGGA+0x24c>
		min = min - 60;
 8000fc8:	4b44      	ldr	r3, [pc, #272]	; (80010dc <decodeGGA+0x34c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b3c      	subs	r3, #60	; 0x3c
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <decodeGGA+0x34c>)
 8000fd0:	6013      	str	r3, [r2, #0]
		hr++;
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <decodeGGA+0x348>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a3f      	ldr	r2, [pc, #252]	; (80010d8 <decodeGGA+0x348>)
 8000fda:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 8000fdc:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <decodeGGA+0x348>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da09      	bge.n	8000ff8 <decodeGGA+0x268>
		hr = 24 + hr;
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <decodeGGA+0x348>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3318      	adds	r3, #24
 8000fea:	4a3b      	ldr	r2, [pc, #236]	; (80010d8 <decodeGGA+0x348>)
 8000fec:	6013      	str	r3, [r2, #0]
		daychange--;
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <decodeGGA+0x350>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <decodeGGA+0x350>)
 8000ff6:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <decodeGGA+0x348>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b17      	cmp	r3, #23
 8000ffe:	dd09      	ble.n	8001014 <decodeGGA+0x284>
		hr = hr - 24;
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <decodeGGA+0x348>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3b18      	subs	r3, #24
 8001006:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <decodeGGA+0x348>)
 8001008:	6013      	str	r3, [r2, #0]
		daychange++;
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <decodeGGA+0x350>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a33      	ldr	r2, [pc, #204]	; (80010e0 <decodeGGA+0x350>)
 8001012:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <decodeGGA+0x348>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	619a      	str	r2, [r3, #24]
	gga->tim.min = min;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <decodeGGA+0x34c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	61da      	str	r2, [r3, #28]
	gga->tim.sec = atoi(buffer) % 100;
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fae7 	bl	80045fc <atoi>
 800102e:	4602      	mov	r2, r0
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <decodeGGA+0x344>)
 8001032:	fb83 1302 	smull	r1, r3, r3, r2
 8001036:	1159      	asrs	r1, r3, #5
 8001038:	17d3      	asrs	r3, r2, #31
 800103a:	1acb      	subs	r3, r1, r3
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	fb01 f303 	mul.w	r3, r1, r3
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	6213      	str	r3, [r2, #32]

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <decodeGGA+0x338>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <decodeGGA+0x338>)
 8001050:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	220c      	movs	r2, #12
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f8cb 	bl	80051f6 <memset>
	i = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001064:	e013      	b.n	800108e <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <decodeGGA+0x338>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
		i++;
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	3301      	adds	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <decodeGGA+0x338>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <decodeGGA+0x338>)
 800108c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <decodeGGA+0x338>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b2c      	cmp	r3, #44	; 0x2c
 800109c:	d1e3      	bne.n	8001066 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f854 	bl	8000150 <strlen>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d801      	bhi.n	80010b2 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 80010ae:	2302      	movs	r3, #2
 80010b0:	e278      	b.n	80015a4 <decodeGGA+0x814>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 faa0 	bl	80045fc <atoi>
 80010bc:	4603      	mov	r3, r0
 80010be:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.')
 80010c4:	e011      	b.n	80010ea <decodeGGA+0x35a>
 80010c6:	bf00      	nop
 80010c8:	2000020c 	.word	0x2000020c
 80010cc:	68db8bad 	.word	0x68db8bad
 80010d0:	20000000 	.word	0x20000000
 80010d4:	51eb851f 	.word	0x51eb851f
 80010d8:	20000210 	.word	0x20000210
 80010dc:	20000214 	.word	0x20000214
 80010e0:	20000224 	.word	0x20000224
		j++;   // Figure out how many digits before the decimal
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	3301      	adds	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.')
 80010ea:	f107 020c 	add.w	r2, r7, #12
 80010ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b2e      	cmp	r3, #46	; 0x2e
 80010f6:	d1f5      	bne.n	80010e4 <decodeGGA+0x354>
	j++;
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	3301      	adds	r3, #1
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f824 	bl	8000150 <strlen>
 8001108:	4602      	mov	r2, r0
 800110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	623b      	str	r3, [r7, #32]
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	4413      	add	r3, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fa6f 	bl	80045fc <atoi>
 800111e:	61f8      	str	r0, [r7, #28]
	float lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8001120:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f96d 	bl	8000404 <__aeabi_i2d>
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <decodeGGA+0x508>)
 8001130:	f7ff fafc 	bl	800072c <__aeabi_ddiv>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4690      	mov	r8, r2
 800113a:	4699      	mov	r9, r3
 800113c:	69f8      	ldr	r0, [r7, #28]
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	3302      	adds	r3, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f95a 	bl	8000404 <__aeabi_i2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4950      	ldr	r1, [pc, #320]	; (800129c <decodeGGA+0x50c>)
 800115a:	f006 f937 	bl	80073cc <pow>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4620      	mov	r0, r4
 8001164:	4629      	mov	r1, r5
 8001166:	f7ff fae1 	bl	800072c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4640      	mov	r0, r8
 8001170:	4649      	mov	r1, r9
 8001172:	f7fe fffb 	bl	800016c <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]
	// Turn 'lat' dd.mmmm format into 'test1' dd.dddd format
	gga->lcation.test1 = 0; // Reset
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
	gga->lcation.test1 += (int) (lat / 1.0); // Plus the degree
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685c      	ldr	r4, [r3, #4]
 8001192:	69b8      	ldr	r0, [r7, #24]
 8001194:	f7ff fdd6 	bl	8000d44 <__aeabi_f2iz>
 8001198:	4603      	mov	r3, r0
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fd7e 	bl	8000c9c <__aeabi_i2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fcc5 	bl	8000b34 <__addsf3>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	605a      	str	r2, [r3, #4]
	gga->lcation.test1 += (lat - gga->lcation.test1) / 0.6; // Plus the decimal
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f936 	bl	8000428 <__aeabi_f2d>
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4619      	mov	r1, r3
 80011c6:	69b8      	ldr	r0, [r7, #24]
 80011c8:	f7ff fcb2 	bl	8000b30 <__aeabi_fsub>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f92a 	bl	8000428 <__aeabi_f2d>
 80011d4:	a32e      	add	r3, pc, #184	; (adr r3, 8001290 <decodeGGA+0x500>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff faa7 	bl	800072c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7fe ffc1 	bl	800016c <__adddf3>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fc49 	bl	8000a88 <__aeabi_d2f>
 80011f6:	4602      	mov	r2, r0
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	605a      	str	r2, [r3, #4]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	601a      	str	r2, [r3, #0]
	inx++;
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <decodeGGA+0x510>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <decodeGGA+0x510>)
 800120a:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <decodeGGA+0x510>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <decodeGGA+0x510>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <decodeGGA+0x510>)
 8001224:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <decodeGGA+0x510>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <decodeGGA+0x510>)
 800122e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	220c      	movs	r2, #12
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f003 ffdc 	bl	80051f6 <memset>
	i = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8001242:	e013      	b.n	800126c <decodeGGA+0x4dc>
	{
		buffer[i] = GGAbuffer[inx];
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <decodeGGA+0x510>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	7819      	ldrb	r1, [r3, #0]
 8001250:	f107 020c 	add.w	r2, r7, #12
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	4413      	add	r3, r2
 8001258:	460a      	mov	r2, r1
 800125a:	701a      	strb	r2, [r3, #0]
		i++;
 800125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125e:	3301      	adds	r3, #1
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <decodeGGA+0x510>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <decodeGGA+0x510>)
 800126a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <decodeGGA+0x510>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b2c      	cmp	r3, #44	; 0x2c
 800127a:	d1e3      	bne.n	8001244 <decodeGGA+0x4b4>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f9bb 	bl	80045fc <atoi>
 8001286:	4603      	mov	r3, r0
 8001288:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.')
 800128e:	e00c      	b.n	80012aa <decodeGGA+0x51a>
 8001290:	33333333 	.word	0x33333333
 8001294:	3fe33333 	.word	0x3fe33333
 8001298:	40590000 	.word	0x40590000
 800129c:	40240000 	.word	0x40240000
 80012a0:	2000020c 	.word	0x2000020c
		j++;  // Figure out how many digits before the decimal
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	3301      	adds	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.')
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b2e      	cmp	r3, #46	; 0x2e
 80012b6:	d1f5      	bne.n	80012a4 <decodeGGA+0x514>
	j++;
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	3301      	adds	r3, #1
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff44 	bl	8000150 <strlen>
 80012c8:	4602      	mov	r2, r0
 80012ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	623b      	str	r3, [r7, #32]
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	4413      	add	r3, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f98f 	bl	80045fc <atoi>
 80012de:	61f8      	str	r0, [r7, #28]
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80012e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f88d 	bl	8000404 <__aeabi_i2d>
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4bb2      	ldr	r3, [pc, #712]	; (80015b8 <decodeGGA+0x828>)
 80012f0:	f7ff fa1c 	bl	800072c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4690      	mov	r8, r2
 80012fa:	4699      	mov	r9, r3
 80012fc:	69f8      	ldr	r0, [r7, #28]
 80012fe:	f7ff f881 	bl	8000404 <__aeabi_i2d>
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	3302      	adds	r3, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f87a 	bl	8000404 <__aeabi_i2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	49a8      	ldr	r1, [pc, #672]	; (80015bc <decodeGGA+0x82c>)
 800131a:	f006 f857 	bl	80073cc <pow>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff fa01 	bl	800072c <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4640      	mov	r0, r8
 8001330:	4649      	mov	r1, r9
 8001332:	f7fe ff1b 	bl	800016c <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fba3 	bl	8000a88 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	61bb      	str	r3, [r7, #24]
	// Turn 'lat' dd.mmmm format into 'test2' dd.dddd format
	gga->lcation.test2 = 0; // Reset
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
	gga->lcation.test2 += (int) (lat / 1.0); // Plus the degree
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691c      	ldr	r4, [r3, #16]
 8001352:	69b8      	ldr	r0, [r7, #24]
 8001354:	f7ff fcf6 	bl	8000d44 <__aeabi_f2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fc9e 	bl	8000c9c <__aeabi_i2f>
 8001360:	4603      	mov	r3, r0
 8001362:	4619      	mov	r1, r3
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff fbe5 	bl	8000b34 <__addsf3>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	611a      	str	r2, [r3, #16]
	gga->lcation.test2 += (lat - gga->lcation.test2) / 0.6; // Plus the decimal
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f856 	bl	8000428 <__aeabi_f2d>
 800137c:	4604      	mov	r4, r0
 800137e:	460d      	mov	r5, r1
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	4619      	mov	r1, r3
 8001386:	69b8      	ldr	r0, [r7, #24]
 8001388:	f7ff fbd2 	bl	8000b30 <__aeabi_fsub>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f84a 	bl	8000428 <__aeabi_f2d>
 8001394:	a386      	add	r3, pc, #536	; (adr r3, 80015b0 <decodeGGA+0x820>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f9c7 	bl	800072c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4620      	mov	r0, r4
 80013a4:	4629      	mov	r1, r5
 80013a6:	f7fe fee1 	bl	800016c <__adddf3>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fb69 	bl	8000a88 <__aeabi_d2f>
 80013b6:	4602      	mov	r2, r0
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	611a      	str	r2, [r3, #16]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	60da      	str	r2, [r3, #12]
	inx++;
 80013c2:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <decodeGGA+0x830>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a7d      	ldr	r2, [pc, #500]	; (80015c0 <decodeGGA+0x830>)
 80013ca:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80013cc:	4b7c      	ldr	r3, [pc, #496]	; (80015c0 <decodeGGA+0x830>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	751a      	strb	r2, [r3, #20]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80013dc:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <decodeGGA+0x830>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <decodeGGA+0x830>)
 80013e4:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <decodeGGA+0x830>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a74      	ldr	r2, [pc, #464]	; (80015c0 <decodeGGA+0x830>)
 80013ee:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80013f0:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <decodeGGA+0x830>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a72      	ldr	r2, [pc, #456]	; (80015c0 <decodeGGA+0x830>)
 80013f8:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80013fa:	4b71      	ldr	r3, [pc, #452]	; (80015c0 <decodeGGA+0x830>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	4a6f      	ldr	r2, [pc, #444]	; (80015c0 <decodeGGA+0x830>)
 8001402:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	220c      	movs	r2, #12
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fef2 	bl	80051f6 <memset>
	i = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8001416:	e013      	b.n	8001440 <decodeGGA+0x6b0>
	{
		buffer[i] = GGAbuffer[inx];
 8001418:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <decodeGGA+0x830>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	7819      	ldrb	r1, [r3, #0]
 8001424:	f107 020c 	add.w	r2, r7, #12
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	4413      	add	r3, r2
 800142c:	460a      	mov	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
		i++;
 8001430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001432:	3301      	adds	r3, #1
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001436:	4b62      	ldr	r3, [pc, #392]	; (80015c0 <decodeGGA+0x830>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <decodeGGA+0x830>)
 800143e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8001440:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <decodeGGA+0x830>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b2c      	cmp	r3, #44	; 0x2c
 800144e:	d1e3      	bne.n	8001418 <decodeGGA+0x688>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f8d1 	bl	80045fc <atoi>
 800145a:	4602      	mov	r2, r0
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	631a      	str	r2, [r3, #48]	; 0x30

	/***************** skip HDOP  *********************/
	inx++;
 8001460:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <decodeGGA+0x830>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	4a56      	ldr	r2, [pc, #344]	; (80015c0 <decodeGGA+0x830>)
 8001468:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800146a:	e004      	b.n	8001476 <decodeGGA+0x6e6>
		inx++;
 800146c:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <decodeGGA+0x830>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a53      	ldr	r2, [pc, #332]	; (80015c0 <decodeGGA+0x830>)
 8001474:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <decodeGGA+0x830>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b2c      	cmp	r3, #44	; 0x2c
 8001484:	d1f2      	bne.n	800146c <decodeGGA+0x6dc>

	/*************** Altitude calculation ********************/
	inx++;
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <decodeGGA+0x830>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <decodeGGA+0x830>)
 800148e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	220c      	movs	r2, #12
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f003 feac 	bl	80051f6 <memset>
	i = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') {
 80014a2:	e013      	b.n	80014cc <decodeGGA+0x73c>
		buffer[i] = GGAbuffer[inx];
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <decodeGGA+0x830>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	7819      	ldrb	r1, [r3, #0]
 80014b0:	f107 020c 	add.w	r2, r7, #12
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b6:	4413      	add	r3, r2
 80014b8:	460a      	mov	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
		i++;
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	3301      	adds	r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <decodeGGA+0x830>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <decodeGGA+0x830>)
 80014ca:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 80014cc:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <decodeGGA+0x830>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b2c      	cmp	r3, #44	; 0x2c
 80014da:	d1e3      	bne.n	80014a4 <decodeGGA+0x714>
	}
	num = (atoi(buffer));
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f88b 	bl	80045fc <atoi>
 80014e6:	4603      	mov	r3, r0
 80014e8:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.')
 80014ee:	e002      	b.n	80014f6 <decodeGGA+0x766>
		j++;
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	3301      	adds	r3, #1
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.')
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b2e      	cmp	r3, #46	; 0x2e
 8001502:	d1f5      	bne.n	80014f0 <decodeGGA+0x760>
	j++;
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	3301      	adds	r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer)) - j;
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe1e 	bl	8000150 <strlen>
 8001514:	4602      	mov	r2, r0
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	623b      	str	r3, [r7, #32]
	dec = atoi((char*) buffer + j);
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	4413      	add	r3, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f003 f869 	bl	80045fc <atoi>
 800152a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec / pow(10, (declen)));
 800152c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff67 	bl	8000404 <__aeabi_i2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	69f8      	ldr	r0, [r7, #28]
 800153c:	f7fe ff62 	bl	8000404 <__aeabi_i2d>
 8001540:	4680      	mov	r8, r0
 8001542:	4689      	mov	r9, r1
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f7fe ff5d 	bl	8000404 <__aeabi_i2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	491a      	ldr	r1, [pc, #104]	; (80015bc <decodeGGA+0x82c>)
 8001554:	f005 ff3a 	bl	80073cc <pow>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4640      	mov	r0, r8
 800155e:	4649      	mov	r1, r9
 8001560:	f7ff f8e4 	bl	800072c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe fdfe 	bl	800016c <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fa86 	bl	8000a88 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28

	inx++;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <decodeGGA+0x830>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <decodeGGA+0x830>)
 800158e:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <decodeGGA+0x830>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	return 0;
 80015a2:	2300      	movs	r3, #0

}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3730      	adds	r7, #48	; 0x30
 80015a8:	46bd      	mov	sp, r7
 80015aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015ae:	bf00      	nop
 80015b0:	33333333 	.word	0x33333333
 80015b4:	3fe33333 	.word	0x3fe33333
 80015b8:	40590000 	.word	0x40590000
 80015bc:	40240000 	.word	0x40240000
 80015c0:	2000020c 	.word	0x2000020c

080015c4 <decodeRMC>:

int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc) {
 80015c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015c8:	b090      	sub	sp, #64	; 0x40
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	inx = 0;
 80015d0:	4b92      	ldr	r3, [pc, #584]	; (800181c <decodeRMC+0x258>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',')
 80015da:	e004      	b.n	80015e6 <decodeRMC+0x22>
		inx++;  // 1st ,
 80015dc:	4b8f      	ldr	r3, [pc, #572]	; (800181c <decodeRMC+0x258>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a8e      	ldr	r2, [pc, #568]	; (800181c <decodeRMC+0x258>)
 80015e4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80015e6:	4b8d      	ldr	r3, [pc, #564]	; (800181c <decodeRMC+0x258>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b2c      	cmp	r3, #44	; 0x2c
 80015f4:	d1f2      	bne.n	80015dc <decodeRMC+0x18>
	inx++;
 80015f6:	4b89      	ldr	r3, [pc, #548]	; (800181c <decodeRMC+0x258>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a87      	ldr	r2, [pc, #540]	; (800181c <decodeRMC+0x258>)
 80015fe:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001600:	e004      	b.n	800160c <decodeRMC+0x48>
		inx++;  // After time ,
 8001602:	4b86      	ldr	r3, [pc, #536]	; (800181c <decodeRMC+0x258>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a84      	ldr	r2, [pc, #528]	; (800181c <decodeRMC+0x258>)
 800160a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <decodeRMC+0x258>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b2c      	cmp	r3, #44	; 0x2c
 800161a:	d1f2      	bne.n	8001602 <decodeRMC+0x3e>
	inx++;
 800161c:	4b7f      	ldr	r3, [pc, #508]	; (800181c <decodeRMC+0x258>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a7e      	ldr	r2, [pc, #504]	; (800181c <decodeRMC+0x258>)
 8001624:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A') // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001626:	4b7d      	ldr	r3, [pc, #500]	; (800181c <decodeRMC+0x258>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b41      	cmp	r3, #65	; 0x41
 8001634:	d10d      	bne.n	8001652 <decodeRMC+0x8e>
			{
		rmc->isValid = 1;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	615a      	str	r2, [r3, #20]
	} else {
		rmc->isValid = 0;
		return 1;
	}
	inx++;
 800163c:	4b77      	ldr	r3, [pc, #476]	; (800181c <decodeRMC+0x258>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a76      	ldr	r2, [pc, #472]	; (800181c <decodeRMC+0x258>)
 8001644:	6013      	str	r3, [r2, #0]
	inx++;
 8001646:	4b75      	ldr	r3, [pc, #468]	; (800181c <decodeRMC+0x258>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a73      	ldr	r2, [pc, #460]	; (800181c <decodeRMC+0x258>)
 800164e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001650:	e009      	b.n	8001666 <decodeRMC+0xa2>
		rmc->isValid = 0;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
		return 1;
 8001658:	2301      	movs	r3, #1
 800165a:	e1d5      	b.n	8001a08 <decodeRMC+0x444>
		inx++;  // after latitude,
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <decodeRMC+0x258>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	4a6e      	ldr	r2, [pc, #440]	; (800181c <decodeRMC+0x258>)
 8001664:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001666:	4b6d      	ldr	r3, [pc, #436]	; (800181c <decodeRMC+0x258>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b2c      	cmp	r3, #44	; 0x2c
 8001674:	d1f2      	bne.n	800165c <decodeRMC+0x98>
	inx++;
 8001676:	4b69      	ldr	r3, [pc, #420]	; (800181c <decodeRMC+0x258>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a67      	ldr	r2, [pc, #412]	; (800181c <decodeRMC+0x258>)
 800167e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001680:	e004      	b.n	800168c <decodeRMC+0xc8>
		inx++;  // after NS ,
 8001682:	4b66      	ldr	r3, [pc, #408]	; (800181c <decodeRMC+0x258>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a64      	ldr	r2, [pc, #400]	; (800181c <decodeRMC+0x258>)
 800168a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800168c:	4b63      	ldr	r3, [pc, #396]	; (800181c <decodeRMC+0x258>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b2c      	cmp	r3, #44	; 0x2c
 800169a:	d1f2      	bne.n	8001682 <decodeRMC+0xbe>
	inx++;
 800169c:	4b5f      	ldr	r3, [pc, #380]	; (800181c <decodeRMC+0x258>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a5e      	ldr	r2, [pc, #376]	; (800181c <decodeRMC+0x258>)
 80016a4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016a6:	e004      	b.n	80016b2 <decodeRMC+0xee>
		inx++;  // after longitude ,
 80016a8:	4b5c      	ldr	r3, [pc, #368]	; (800181c <decodeRMC+0x258>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a5b      	ldr	r2, [pc, #364]	; (800181c <decodeRMC+0x258>)
 80016b0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <decodeRMC+0x258>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b2c      	cmp	r3, #44	; 0x2c
 80016c0:	d1f2      	bne.n	80016a8 <decodeRMC+0xe4>
	inx++;
 80016c2:	4b56      	ldr	r3, [pc, #344]	; (800181c <decodeRMC+0x258>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4a54      	ldr	r2, [pc, #336]	; (800181c <decodeRMC+0x258>)
 80016ca:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016cc:	e004      	b.n	80016d8 <decodeRMC+0x114>
		inx++;  // after EW ,
 80016ce:	4b53      	ldr	r3, [pc, #332]	; (800181c <decodeRMC+0x258>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a51      	ldr	r2, [pc, #324]	; (800181c <decodeRMC+0x258>)
 80016d6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <decodeRMC+0x258>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b2c      	cmp	r3, #44	; 0x2c
 80016e6:	d1f2      	bne.n	80016ce <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <decodeRMC+0x258>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a4b      	ldr	r2, [pc, #300]	; (800181c <decodeRMC+0x258>)
 80016f0:	6013      	str	r3, [r2, #0]
	i = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	220c      	movs	r2, #12
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fd79 	bl	80051f6 <memset>
	while (RMCbuffer[inx] != ',') {
 8001704:	e013      	b.n	800172e <decodeRMC+0x16a>
		buffer[i] = RMCbuffer[inx];
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <decodeRMC+0x258>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	7819      	ldrb	r1, [r3, #0]
 8001712:	f107 0208 	add.w	r2, r7, #8
 8001716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001718:	4413      	add	r3, r2
 800171a:	460a      	mov	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
		i++;
 800171e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001720:	3301      	adds	r3, #1
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001724:	4b3d      	ldr	r3, [pc, #244]	; (800181c <decodeRMC+0x258>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a3c      	ldr	r2, [pc, #240]	; (800181c <decodeRMC+0x258>)
 800172c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <decodeRMC+0x258>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b2c      	cmp	r3, #44	; 0x2c
 800173c:	d1e3      	bne.n	8001706 <decodeRMC+0x142>
	}

	if (strlen(buffer) > 0) {          // if the speed have some data
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d055      	beq.n	80017f4 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4618      	mov	r0, r3
 800174e:	f002 ff55 	bl	80045fc <atoi>
 8001752:	4603      	mov	r3, r0
 8001754:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.')
 800175a:	e002      	b.n	8001762 <decodeRMC+0x19e>
			j++;   // same as above
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	3301      	adds	r3, #1
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.')
 8001762:	f107 0208 	add.w	r2, r7, #8
 8001766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001768:	4413      	add	r3, r2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b2e      	cmp	r3, #46	; 0x2e
 800176e:	d1f5      	bne.n	800175c <decodeRMC+0x198>
		j++;
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	3301      	adds	r3, #1
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer)) - j;
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fce8 	bl	8000150 <strlen>
 8001780:	4602      	mov	r2, r0
 8001782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi((char*) buffer + j);
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	f107 0208 	add.w	r2, r7, #8
 800178e:	4413      	add	r3, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f002 ff33 	bl	80045fc <atoi>
 8001796:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec / pow(10, (declen)));
 8001798:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe31 	bl	8000404 <__aeabi_i2d>
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
 80017a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017a8:	f7fe fe2c 	bl	8000404 <__aeabi_i2d>
 80017ac:	4680      	mov	r8, r0
 80017ae:	4689      	mov	r9, r1
 80017b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017b2:	f7fe fe27 	bl	8000404 <__aeabi_i2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	4918      	ldr	r1, [pc, #96]	; (8001820 <decodeRMC+0x25c>)
 80017c0:	f005 fe04 	bl	80073cc <pow>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4640      	mov	r0, r8
 80017ca:	4649      	mov	r1, r9
 80017cc:	f7fe ffae 	bl	800072c <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe fcc8 	bl	800016c <__adddf3>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f950 	bl	8000a88 <__aeabi_d2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	e003      	b.n	80017fc <decodeRMC+0x238>
	} else
		rmc->speed = 0;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <decodeRMC+0x258>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	4a06      	ldr	r2, [pc, #24]	; (800181c <decodeRMC+0x258>)
 8001804:	6013      	str	r3, [r2, #0]
	i = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	220c      	movs	r2, #12
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fcef 	bl	80051f6 <memset>
	while (RMCbuffer[inx] != ',') {
 8001818:	e018      	b.n	800184c <decodeRMC+0x288>
 800181a:	bf00      	nop
 800181c:	2000020c 	.word	0x2000020c
 8001820:	40240000 	.word	0x40240000
		buffer[i] = RMCbuffer[inx];
 8001824:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <decodeRMC+0x450>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	7819      	ldrb	r1, [r3, #0]
 8001830:	f107 0208 	add.w	r2, r7, #8
 8001834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001836:	4413      	add	r3, r2
 8001838:	460a      	mov	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
		i++;
 800183c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183e:	3301      	adds	r3, #1
 8001840:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001842:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <decodeRMC+0x450>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a72      	ldr	r2, [pc, #456]	; (8001a14 <decodeRMC+0x450>)
 800184a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 800184c:	4b71      	ldr	r3, [pc, #452]	; (8001a14 <decodeRMC+0x450>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b2c      	cmp	r3, #44	; 0x2c
 800185a:	d1e3      	bne.n	8001824 <decodeRMC+0x260>
	}

	if (strlen(buffer) > 0) {  // if the course have some data
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d055      	beq.n	8001912 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer)); // convert the course data into the number
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fec6 	bl	80045fc <atoi>
 8001870:	4603      	mov	r3, r0
 8001872:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 8001878:	e002      	b.n	8001880 <decodeRMC+0x2bc>
			j++;   // same as above
 800187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187c:	3301      	adds	r3, #1
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.')
 8001880:	f107 0208 	add.w	r2, r7, #8
 8001884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b2e      	cmp	r3, #46	; 0x2e
 800188c:	d1f5      	bne.n	800187a <decodeRMC+0x2b6>
		j++;
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	3301      	adds	r3, #1
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer)) - j;
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fc59 	bl	8000150 <strlen>
 800189e:	4602      	mov	r2, r0
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]
		int dec = atoi((char*) buffer + j);
 80018a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a8:	f107 0208 	add.w	r2, r7, #8
 80018ac:	4413      	add	r3, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fea4 	bl	80045fc <atoi>
 80018b4:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec / pow(10, (declen)));
 80018b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fda2 	bl	8000404 <__aeabi_i2d>
 80018c0:	4604      	mov	r4, r0
 80018c2:	460d      	mov	r5, r1
 80018c4:	69b8      	ldr	r0, [r7, #24]
 80018c6:	f7fe fd9d 	bl	8000404 <__aeabi_i2d>
 80018ca:	4680      	mov	r8, r0
 80018cc:	4689      	mov	r9, r1
 80018ce:	69f8      	ldr	r0, [r7, #28]
 80018d0:	f7fe fd98 	bl	8000404 <__aeabi_i2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	f04f 0000 	mov.w	r0, #0
 80018dc:	494e      	ldr	r1, [pc, #312]	; (8001a18 <decodeRMC+0x454>)
 80018de:	f005 fd75 	bl	80073cc <pow>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4640      	mov	r0, r8
 80018e8:	4649      	mov	r1, r9
 80018ea:	f7fe ff1f 	bl	800072c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f7fe fc39 	bl	800016c <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f8c1 	bl	8000a88 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	e003      	b.n	800191a <decodeRMC+0x356>
	} else {
		rmc->course = 0;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
	}

	// Get Date
	inx++;
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <decodeRMC+0x450>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <decodeRMC+0x450>)
 8001922:	6013      	str	r3, [r2, #0]
	i = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	220c      	movs	r2, #12
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fc60 	bl	80051f6 <memset>
	while (RMCbuffer[inx] != ',') {
 8001936:	e013      	b.n	8001960 <decodeRMC+0x39c>
		buffer[i] = RMCbuffer[inx];
 8001938:	4b36      	ldr	r3, [pc, #216]	; (8001a14 <decodeRMC+0x450>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	7819      	ldrb	r1, [r3, #0]
 8001944:	f107 0208 	add.w	r2, r7, #8
 8001948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194a:	4413      	add	r3, r2
 800194c:	460a      	mov	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
		i++;
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001952:	3301      	adds	r3, #1
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <decodeRMC+0x450>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <decodeRMC+0x450>)
 800195e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <decodeRMC+0x450>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b2c      	cmp	r3, #44	; 0x2c
 800196e:	d1e3      	bne.n	8001938 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer) / 10000;  // extract 28
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fe41 	bl	80045fc <atoi>
 800197a:	4603      	mov	r3, r0
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <decodeRMC+0x458>)
 800197e:	fb82 1203 	smull	r1, r2, r2, r3
 8001982:	1312      	asrs	r2, r2, #12
 8001984:	17db      	asrs	r3, r3, #31
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <decodeRMC+0x45c>)
 800198a:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer) / 100) % 100;  // extract 02
 800198c:	f107 0308 	add.w	r3, r7, #8
 8001990:	4618      	mov	r0, r3
 8001992:	f002 fe33 	bl	80045fc <atoi>
 8001996:	4603      	mov	r3, r0
 8001998:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <decodeRMC+0x460>)
 800199a:	fb82 1203 	smull	r1, r2, r2, r3
 800199e:	1152      	asrs	r2, r2, #5
 80019a0:	17db      	asrs	r3, r3, #31
 80019a2:	1ad2      	subs	r2, r2, r3
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <decodeRMC+0x460>)
 80019a6:	fb83 1302 	smull	r1, r3, r3, r2
 80019aa:	1159      	asrs	r1, r3, #5
 80019ac:	17d3      	asrs	r3, r2, #31
 80019ae:	1acb      	subs	r3, r1, r3
 80019b0:	2164      	movs	r1, #100	; 0x64
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <decodeRMC+0x464>)
 80019ba:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer) % 100;  // extract 22
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fe1b 	bl	80045fc <atoi>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <decodeRMC+0x460>)
 80019ca:	fb83 1302 	smull	r1, r3, r3, r2
 80019ce:	1159      	asrs	r1, r3, #5
 80019d0:	17d3      	asrs	r3, r2, #31
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	2164      	movs	r1, #100	; 0x64
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <decodeRMC+0x468>)
 80019de:	6013      	str	r3, [r2, #0]

	day = day + daychange;   // correction due to GMT shift
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <decodeRMC+0x45c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <decodeRMC+0x46c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <decodeRMC+0x45c>)
 80019ec:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <decodeRMC+0x45c>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <decodeRMC+0x464>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <decodeRMC+0x468>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	609a      	str	r2, [r3, #8]

	return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3740      	adds	r7, #64	; 0x40
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a12:	bf00      	nop
 8001a14:	2000020c 	.word	0x2000020c
 8001a18:	40240000 	.word	0x40240000
 8001a1c:	68db8bad 	.word	0x68db8bad
 8001a20:	20000218 	.word	0x20000218
 8001a24:	51eb851f 	.word	0x51eb851f
 8001a28:	2000021c 	.word	0x2000021c
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	20000224 	.word	0x20000224

08001a34 <Ringbuf_init>:
ring_buffer *_rx_buffer2;
ring_buffer *_tx_buffer2;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void) {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <Ringbuf_init+0x64>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <Ringbuf_init+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <Ringbuf_init+0x6c>)
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <Ringbuf_init+0x70>)
 8001a42:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <Ringbuf_init+0x74>)
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <Ringbuf_init+0x78>)
 8001a48:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <Ringbuf_init+0x7c>)
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <Ringbuf_init+0x80>)
 8001a4e:	601a      	str	r2, [r3, #0]

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(gps_uart, UART_IT_ERR);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <Ringbuf_init+0x84>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <Ringbuf_init+0x84>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	615a      	str	r2, [r3, #20]
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_ERR);
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <Ringbuf_init+0x88>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <Ringbuf_init+0x88>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(gps_uart, UART_IT_RXNE);
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <Ringbuf_init+0x84>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <Ringbuf_init+0x84>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <Ringbuf_init+0x88>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <Ringbuf_init+0x88>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0220 	orr.w	r2, r2, #32
 8001a8e:	60da      	str	r2, [r3, #12]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000a4c 	.word	0x20000a4c
 8001a9c:	2000022c 	.word	0x2000022c
 8001aa0:	20000a50 	.word	0x20000a50
 8001aa4:	20000434 	.word	0x20000434
 8001aa8:	20000a54 	.word	0x20000a54
 8001aac:	2000063c 	.word	0x2000063c
 8001ab0:	20000a58 	.word	0x20000a58
 8001ab4:	20000844 	.word	0x20000844
 8001ab8:	20000ab0 	.word	0x20000ab0
 8001abc:	20000af8 	.word	0x20000af8

08001ac0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int) (buffer->head + 1) % UART_BUFFER_SIZE;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad8:	60fb      	str	r3, [r7, #12]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != buffer->tail) {
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d009      	beq.n	8001afa <store_char+0x3a>
		buffer->buffer[buffer->head] = c;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	79f9      	ldrb	r1, [r7, #7]
 8001af0:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <Uart_peek>:
		_rx_buffer2->head = 0;
		_rx_buffer2->tail = 0;
	}
}

int Uart_peek(UART_HandleTypeDef *uart) {
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	if (uart == gps_uart) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <Uart_peek+0x78>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d114      	bne.n	8001b3e <Uart_peek+0x3a>
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <Uart_peek+0x7c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <Uart_peek+0x7c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d102      	bne.n	8001b2e <Uart_peek+0x2a>
			return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	e020      	b.n	8001b70 <Uart_peek+0x6c>
		} else {
			return _rx_buffer1->buffer[_rx_buffer1->tail];
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <Uart_peek+0x7c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <Uart_peek+0x7c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	e018      	b.n	8001b70 <Uart_peek+0x6c>
		}
	}
	else if (uart == wifi_uart) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <Uart_peek+0x80>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d114      	bne.n	8001b70 <Uart_peek+0x6c>
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <Uart_peek+0x84>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <Uart_peek+0x84>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d102      	bne.n	8001b60 <Uart_peek+0x5c>
			return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e007      	b.n	8001b70 <Uart_peek+0x6c>
		} else {
			return _rx_buffer2->buffer[_rx_buffer2->tail];
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <Uart_peek+0x84>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <Uart_peek+0x84>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	e7ff      	b.n	8001b70 <Uart_peek+0x6c>
		}
	}
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000ab0 	.word	0x20000ab0
 8001b80:	20000a4c 	.word	0x20000a4c
 8001b84:	20000af8 	.word	0x20000af8
 8001b88:	20000a54 	.word	0x20000a54

08001b8c <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart) {
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	if (uart == gps_uart) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <Uart_read+0xac>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d121      	bne.n	8001be0 <Uart_read+0x54>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <Uart_read+0xb0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <Uart_read+0xb0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d102      	bne.n	8001bb6 <Uart_read+0x2a>
			return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	e03a      	b.n	8001c2c <Uart_read+0xa0>
		} else {
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <Uart_read+0xb0>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <Uart_read+0xb0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	73bb      	strb	r3, [r7, #14]
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <Uart_read+0xb0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <Uart_read+0xb0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8001bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			return c;
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
 8001bde:	e025      	b.n	8001c2c <Uart_read+0xa0>
		}
	}

	else if (uart == wifi_uart) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <Uart_read+0xb4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d121      	bne.n	8001c2c <Uart_read+0xa0>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <Uart_read+0xb8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <Uart_read+0xb8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d102      	bne.n	8001c02 <Uart_read+0x76>
			return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	e014      	b.n	8001c2c <Uart_read+0xa0>
		} else {
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <Uart_read+0xb8>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <Uart_read+0xb8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	73fb      	strb	r3, [r7, #15]
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <Uart_read+0xb8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <Uart_read+0xb8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8001c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001c24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			return c;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	e7ff      	b.n	8001c2c <Uart_read+0xa0>
		}
	}
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000ab0 	.word	0x20000ab0
 8001c3c:	20000a4c 	.word	0x20000a4c
 8001c40:	20000af8 	.word	0x20000af8
 8001c44:	20000a54 	.word	0x20000a54

08001c48 <IsDataAvailable>:
			__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_TXE); // Enable UART transmission interrupt
		}
	}
}

int IsDataAvailable(UART_HandleTypeDef *uart) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	if (uart == gps_uart)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <IsDataAvailable+0x6c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d111      	bne.n	8001c7c <IsDataAvailable+0x34>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <IsDataAvailable+0x70>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <IsDataAvailable+0x70>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 8001c70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c74:	b29b      	uxth	r3, r3
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c7a:	e015      	b.n	8001ca8 <IsDataAvailable+0x60>
	else if (uart == wifi_uart)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <IsDataAvailable+0x74>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d111      	bne.n	8001ca8 <IsDataAvailable+0x60>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <IsDataAvailable+0x78>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <IsDataAvailable+0x78>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 8001c9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ca0:	b29b      	uxth	r3, r3
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca6:	e7ff      	b.n	8001ca8 <IsDataAvailable+0x60>
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000ab0 	.word	0x20000ab0
 8001cb8:	20000a4c 	.word	0x20000a4c
 8001cbc:	20000af8 	.word	0x20000af8
 8001cc0:	20000a54 	.word	0x20000a54

08001cc4 <Copy_upto>:

	while (*s)
		Uart_write(*s++, uart);
}

int Copy_upto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	int so_far = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
	int len = strlen(string);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7fe fa3b 	bl	8000150 <strlen>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]

	again: while (Uart_peek(uart) != string[so_far]) {
 8001ce2:	e03d      	b.n	8001d60 <Copy_upto+0x9c>
		if (uart == gps_uart) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <Copy_upto+0x140>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d115      	bne.n	8001d18 <Copy_upto+0x54>
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001cec:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <Copy_upto+0x144>)
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <Copy_upto+0x144>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	68b8      	ldr	r0, [r7, #8]
 8001cfc:	4403      	add	r3, r0
 8001cfe:	5c8a      	ldrb	r2, [r1, r2]
 8001d00:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001d02:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <Copy_upto+0x144>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <Copy_upto+0x144>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8001d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001d14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		if (uart == wifi_uart) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	; (8001e0c <Copy_upto+0x148>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d115      	bne.n	8001d4c <Copy_upto+0x88>
			buffertocopyinto[indx] = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001d20:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <Copy_upto+0x14c>)
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <Copy_upto+0x14c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	68b8      	ldr	r0, [r7, #8]
 8001d30:	4403      	add	r3, r0
 8001d32:	5c8a      	ldrb	r2, [r1, r2]
 8001d34:	701a      	strb	r2, [r3, #0]
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <Copy_upto+0x14c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <Copy_upto+0x14c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8001d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		indx++;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
		while (!IsDataAvailable(uart))
 8001d52:	bf00      	nop
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff77 	bl	8001c48 <IsDataAvailable>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f9      	beq.n	8001d54 <Copy_upto+0x90>
	again: while (Uart_peek(uart) != string[so_far]) {
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fecf 	bl	8001b04 <Uart_peek>
 8001d66:	4601      	mov	r1, r0
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4299      	cmp	r1, r3
 8001d72:	d1b7      	bne.n	8001ce4 <Copy_upto+0x20>
			;
	}
	while (Uart_peek(uart) == string[so_far]) {
 8001d74:	e029      	b.n	8001dca <Copy_upto+0x106>
		so_far++;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff05 	bl	8001b8c <Uart_read>
 8001d82:	4601      	mov	r1, r0
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	61ba      	str	r2, [r7, #24]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b2ca      	uxtb	r2, r1
 8001d92:	701a      	strb	r2, [r3, #0]
		if (so_far == len)
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d101      	bne.n	8001da0 <Copy_upto+0xdc>
			return 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e02c      	b.n	8001dfa <Copy_upto+0x136>
		timeout = TIMEOUT_DEF;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <Copy_upto+0x150>)
 8001da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da6:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable(uart)) && timeout)
 8001da8:	bf00      	nop
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff4c 	bl	8001c48 <IsDataAvailable>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <Copy_upto+0xfa>
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <Copy_upto+0x150>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f5      	bne.n	8001daa <Copy_upto+0xe6>
			;
		if (timeout == 0)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <Copy_upto+0x150>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <Copy_upto+0x106>
			return 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e017      	b.n	8001dfa <Copy_upto+0x136>
	while (Uart_peek(uart) == string[so_far]) {
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fe9a 	bl	8001b04 <Uart_peek>
 8001dd0:	4601      	mov	r1, r0
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4299      	cmp	r1, r3
 8001ddc:	d0cb      	beq.n	8001d76 <Copy_upto+0xb2>
	}

	if (so_far != len) {
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d002      	beq.n	8001dec <Copy_upto+0x128>
		so_far = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
		goto again;
 8001dea:	e77a      	b.n	8001ce2 <Copy_upto+0x1e>
	}

	if (so_far == len)
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d101      	bne.n	8001df8 <Copy_upto+0x134>
		return 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <Copy_upto+0x136>
	else
		return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000ab0 	.word	0x20000ab0
 8001e08:	20000a4c 	.word	0x20000a4c
 8001e0c:	20000af8 	.word	0x20000af8
 8001e10:	20000a54 	.word	0x20000a54
 8001e14:	20000228 	.word	0x20000228

08001e18 <Wait_for>:

int Wait_for(char *string, UART_HandleTypeDef *uart) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	int so_far = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
	int len = strlen(string);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe f992 	bl	8000150 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60bb      	str	r3, [r7, #8]
	again: timeout = TIMEOUT_DEF;
 8001e30:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <Wait_for+0x178>)
 8001e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e36:	801a      	strh	r2, [r3, #0]
	// let's wait for the data to show up
	while ((!IsDataAvailable(uart)) && timeout)
 8001e38:	bf00      	nop
 8001e3a:	6838      	ldr	r0, [r7, #0]
 8001e3c:	f7ff ff04 	bl	8001c48 <IsDataAvailable>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <Wait_for+0x36>
 8001e46:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <Wait_for+0x178>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f5      	bne.n	8001e3a <Wait_for+0x22>
		;
	if (timeout == 0)
 8001e4e:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <Wait_for+0x178>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d139      	bne.n	8001eca <Wait_for+0xb2>
		return 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e096      	b.n	8001f88 <Wait_for+0x170>
	// peek in the rx_buffer to see if we get the string
	while (Uart_peek(uart) != string[so_far]) {
		if (uart == gps_uart) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <Wait_for+0x17c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d117      	bne.n	8001e92 <Wait_for+0x7a>
			if (_rx_buffer1->tail != _rx_buffer1->head) {
 8001e62:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <Wait_for+0x180>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <Wait_for+0x180>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d00b      	beq.n	8001e8e <Wait_for+0x76>
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <Wait_for+0x180>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <Wait_for+0x180>)
 8001e82:	681b      	ldr	r3, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 8001e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001e88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e8c:	e001      	b.n	8001e92 <Wait_for+0x7a>
			} else
				return 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e07a      	b.n	8001f88 <Wait_for+0x170>
		}
		if (uart == wifi_uart) {
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <Wait_for+0x184>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d117      	bne.n	8001eca <Wait_for+0xb2>
			if (_rx_buffer2->tail != _rx_buffer2->head) {
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <Wait_for+0x188>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <Wait_for+0x188>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d00b      	beq.n	8001ec6 <Wait_for+0xae>
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <Wait_for+0x188>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <Wait_for+0x188>)
 8001eba:	681b      	ldr	r3, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 8001ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001ec0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ec4:	e001      	b.n	8001eca <Wait_for+0xb2>
			} else
				return 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e05e      	b.n	8001f88 <Wait_for+0x170>
	while (Uart_peek(uart) != string[so_far]) {
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f7ff fe1a 	bl	8001b04 <Uart_peek>
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4299      	cmp	r1, r3
 8001edc:	d1bd      	bne.n	8001e5a <Wait_for+0x42>
		}
	}
	// if we got the first letter of the string
	while (Uart_peek(uart) == string[so_far]) {
 8001ede:	e03b      	b.n	8001f58 <Wait_for+0x140>
		// now we will peek for the other letters too
		so_far++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
		if (uart == gps_uart) {
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <Wait_for+0x17c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d10a      	bne.n	8001f04 <Wait_for+0xec>
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <Wait_for+0x180>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <Wait_for+0x180>)
 8001efa:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 8001efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001f00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		if (uart == wifi_uart) {
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <Wait_for+0x184>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d10a      	bne.n	8001f22 <Wait_for+0x10a>
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <Wait_for+0x188>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <Wait_for+0x188>)
 8001f18:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 8001f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001f1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		}
		if (so_far == len)
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d101      	bne.n	8001f2e <Wait_for+0x116>
			return 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e02c      	b.n	8001f88 <Wait_for+0x170>
		timeout = TIMEOUT_DEF;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <Wait_for+0x178>)
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable(uart)) && timeout)
 8001f36:	bf00      	nop
 8001f38:	6838      	ldr	r0, [r7, #0]
 8001f3a:	f7ff fe85 	bl	8001c48 <IsDataAvailable>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <Wait_for+0x134>
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <Wait_for+0x178>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f5      	bne.n	8001f38 <Wait_for+0x120>
			;
		if (timeout == 0)
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <Wait_for+0x178>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <Wait_for+0x140>
			return 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e017      	b.n	8001f88 <Wait_for+0x170>
	while (Uart_peek(uart) == string[so_far]) {
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	f7ff fdd3 	bl	8001b04 <Uart_peek>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4299      	cmp	r1, r3
 8001f6a:	d0b9      	beq.n	8001ee0 <Wait_for+0xc8>
	}
	if (so_far != len) {
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d002      	beq.n	8001f7a <Wait_for+0x162>
		so_far = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
		goto again;
 8001f78:	e75a      	b.n	8001e30 <Wait_for+0x18>
	}
	if (so_far == len)
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d101      	bne.n	8001f86 <Wait_for+0x16e>
		return 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <Wait_for+0x170>
	else
		return 0;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000228 	.word	0x20000228
 8001f94:	20000ab0 	.word	0x20000ab0
 8001f98:	20000a4c 	.word	0x20000a4c
 8001f9c:	20000af8 	.word	0x20000af8
 8001fa0:	20000a54 	.word	0x20000a54

08001fa4 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d023      	beq.n	800200e <Uart_isr+0x6a>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01e      	beq.n	800200e <Uart_isr+0x6a>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		huart->Instance->SR; /* Read status register */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	73fb      	strb	r3, [r7, #15]
		if (huart == gps_uart) {
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <Uart_isr+0x13c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d107      	bne.n	8001ff6 <Uart_isr+0x52>
			store_char(c, _rx_buffer1);  // store data in buffer
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <Uart_isr+0x140>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd66 	bl	8001ac0 <store_char>
		} else if (huart == wifi_uart) {
			store_char(c, _rx_buffer2);  // store data in buffer
		}
		return;
 8001ff4:	e06d      	b.n	80020d2 <Uart_isr+0x12e>
		} else if (huart == wifi_uart) {
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a3b      	ldr	r2, [pc, #236]	; (80020e8 <Uart_isr+0x144>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d169      	bne.n	80020d2 <Uart_isr+0x12e>
			store_char(c, _rx_buffer2);  // store data in buffer
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <Uart_isr+0x148>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fd5a 	bl	8001ac0 <store_char>
		return;
 800200c:	e061      	b.n	80020d2 <Uart_isr+0x12e>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_SR_TXE) != RESET)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d05f      	beq.n	80020d8 <Uart_isr+0x134>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d05a      	beq.n	80020d8 <Uart_isr+0x134>
		if (huart == gps_uart) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <Uart_isr+0x13c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d127      	bne.n	800207a <Uart_isr+0xd6>
			if (tx_buffer1.head == tx_buffer1.tail) {
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <Uart_isr+0x14c>)
 800202c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <Uart_isr+0x14c>)
 8002032:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002036:	429a      	cmp	r2, r3
 8002038:	d108      	bne.n	800204c <Uart_isr+0xa8>
				// Buffer empty, so disable interrupts
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002048:	60da      	str	r2, [r3, #12]
				huart->Instance->SR;
				huart->Instance->DR = c;

			}
		}
		return;
 800204a:	e044      	b.n	80020d6 <Uart_isr+0x132>
				unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <Uart_isr+0x14c>)
 800204e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002052:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <Uart_isr+0x14c>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	737b      	strb	r3, [r7, #13]
				tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <Uart_isr+0x14c>)
 800205a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <Uart_isr+0x14c>)
 8002066:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
				huart->Instance->SR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	7b7a      	ldrb	r2, [r7, #13]
 8002076:	605a      	str	r2, [r3, #4]
		return;
 8002078:	e02d      	b.n	80020d6 <Uart_isr+0x132>
		else if (huart == wifi_uart) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <Uart_isr+0x144>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d129      	bne.n	80020d6 <Uart_isr+0x132>
			if (tx_buffer2.head == tx_buffer2.tail) {
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <Uart_isr+0x150>)
 8002084:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <Uart_isr+0x150>)
 800208a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800208e:	429a      	cmp	r2, r3
 8002090:	d108      	bne.n	80020a4 <Uart_isr+0x100>
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a0:	60da      	str	r2, [r3, #12]
		return;
 80020a2:	e018      	b.n	80020d6 <Uart_isr+0x132>
				unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <Uart_isr+0x150>)
 80020a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <Uart_isr+0x150>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	73bb      	strb	r3, [r7, #14]
				tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <Uart_isr+0x150>)
 80020b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <Uart_isr+0x150>)
 80020be:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
				huart->Instance->SR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	7bba      	ldrb	r2, [r7, #14]
 80020ce:	605a      	str	r2, [r3, #4]
		return;
 80020d0:	e001      	b.n	80020d6 <Uart_isr+0x132>
		return;
 80020d2:	bf00      	nop
 80020d4:	e000      	b.n	80020d8 <Uart_isr+0x134>
		return;
 80020d6:	bf00      	nop
	}
}
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000ab0 	.word	0x20000ab0
 80020e4:	20000a4c 	.word	0x20000a4c
 80020e8:	20000af8 	.word	0x20000af8
 80020ec:	20000a54 	.word	0x20000a54
 80020f0:	20000434 	.word	0x20000434
 80020f4:	20000844 	.word	0x20000844

080020f8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f023 030f 	bic.w	r3, r3, #15
 8002108:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	f043 030c 	orr.w	r3, r3, #12
 8002116:	b2db      	uxtb	r3, r3
 8002118:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	b2db      	uxtb	r3, r3
 8002122:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	f043 030c 	orr.w	r3, r3, #12
 800212a:	b2db      	uxtb	r3, r3
 800212c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800212e:	7bbb      	ldrb	r3, [r7, #14]
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	b2db      	uxtb	r3, r3
 8002136:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002138:	f107 0208 	add.w	r2, r7, #8
 800213c:	2364      	movs	r3, #100	; 0x64
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2304      	movs	r3, #4
 8002142:	214e      	movs	r1, #78	; 0x4e
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <lcd_send_cmd+0x5c>)
 8002146:	f001 fa13 	bl	8003570 <HAL_I2C_Master_Transmit>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000a5c 	.word	0x20000a5c

08002158 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	f043 030d 	orr.w	r3, r3, #13
 8002176:	b2db      	uxtb	r3, r3
 8002178:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	f043 0309 	orr.w	r3, r3, #9
 8002180:	b2db      	uxtb	r3, r3
 8002182:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	f043 030d 	orr.w	r3, r3, #13
 800218a:	b2db      	uxtb	r3, r3
 800218c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800218e:	7bbb      	ldrb	r3, [r7, #14]
 8002190:	f043 0309 	orr.w	r3, r3, #9
 8002194:	b2db      	uxtb	r3, r3
 8002196:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002198:	f107 0208 	add.w	r2, r7, #8
 800219c:	2364      	movs	r3, #100	; 0x64
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2304      	movs	r3, #4
 80021a2:	214e      	movs	r1, #78	; 0x4e
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <lcd_send_data+0x5c>)
 80021a6:	f001 f9e3 	bl	8003570 <HAL_I2C_Master_Transmit>
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000a5c 	.word	0x20000a5c

080021b8 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
    switch (row)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <lcd_put_cur+0x18>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <lcd_put_cur+0x22>
 80021ce:	e009      	b.n	80021e4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d6:	603b      	str	r3, [r7, #0]
            break;
 80021d8:	e004      	b.n	80021e4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021e0:	603b      	str	r3, [r7, #0]
            break;
 80021e2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff85 	bl	80020f8 <lcd_send_cmd>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <lcd_init>:


void lcd_init (void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80021fa:	2032      	movs	r0, #50	; 0x32
 80021fc:	f000 fda6 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002200:	2030      	movs	r0, #48	; 0x30
 8002202:	f7ff ff79 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002206:	2005      	movs	r0, #5
 8002208:	f000 fda0 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x30);
 800220c:	2030      	movs	r0, #48	; 0x30
 800220e:	f7ff ff73 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002212:	2001      	movs	r0, #1
 8002214:	f000 fd9a 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002218:	2030      	movs	r0, #48	; 0x30
 800221a:	f7ff ff6d 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(10);
 800221e:	200a      	movs	r0, #10
 8002220:	f000 fd94 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8002224:	2020      	movs	r0, #32
 8002226:	f7ff ff67 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(10);
 800222a:	200a      	movs	r0, #10
 800222c:	f000 fd8e 	bl	8002d4c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002230:	2028      	movs	r0, #40	; 0x28
 8002232:	f7ff ff61 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f000 fd88 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800223c:	2008      	movs	r0, #8
 800223e:	f7ff ff5b 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 8002242:	2001      	movs	r0, #1
 8002244:	f000 fd82 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff ff55 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f000 fd7c 	bl	8002d4c <HAL_Delay>
	HAL_Delay(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f000 fd79 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800225a:	2006      	movs	r0, #6
 800225c:	f7ff ff4c 	bl	80020f8 <lcd_send_cmd>
	HAL_Delay(1);
 8002260:	2001      	movs	r0, #1
 8002262:	f000 fd73 	bl	8002d4c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002266:	200c      	movs	r0, #12
 8002268:	f7ff ff46 	bl	80020f8 <lcd_send_cmd>
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002278:	e006      	b.n	8002288 <lcd_send_string+0x18>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff68 	bl	8002158 <lcd_send_data>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f4      	bne.n	800227a <lcd_send_string+0xa>
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <led_on>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void led_on() {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80022a0:	2201      	movs	r2, #1
 80022a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022a6:	4802      	ldr	r0, [pc, #8]	; (80022b0 <led_on+0x14>)
 80022a8:	f001 f806 	bl	80032b8 <HAL_GPIO_WritePin>
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40011000 	.word	0x40011000

080022b4 <led_off>:
void led_off() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022be:	4802      	ldr	r0, [pc, #8]	; (80022c8 <led_off+0x14>)
 80022c0:	f000 fffa 	bl	80032b8 <HAL_GPIO_WritePin>
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40011000 	.word	0x40011000

080022cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022d2:	f000 fcd9 	bl	8002c88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022d6:	f000 f957 	bl	8002588 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022da:	f000 fa1d 	bl	8002718 <MX_GPIO_Init>
	MX_I2C1_Init();
 80022de:	f000 f999 	bl	8002614 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80022e2:	f000 f9c5 	bl	8002670 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80022e6:	f000 f9ed 	bl	80026c4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	lcd_init();
 80022ea:	f7ff ff84 	bl	80021f6 <lcd_init>
	Ringbuf_init();
 80022ee:	f7ff fba1 	bl	8001a34 <Ringbuf_init>
	HAL_Delay(500);
 80022f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022f6:	f000 fd29 	bl	8002d4c <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(100);
 80022fa:	2064      	movs	r0, #100	; 0x64
 80022fc:	f000 fd26 	bl	8002d4c <HAL_Delay>
		if (master_count++ > 10000)
 8002300:	4b89      	ldr	r3, [pc, #548]	; (8002528 <main+0x25c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	4988      	ldr	r1, [pc, #544]	; (8002528 <main+0x25c>)
 8002308:	600a      	str	r2, [r1, #0]
 800230a:	f242 7210 	movw	r2, #10000	; 0x2710
 800230e:	4293      	cmp	r3, r2
 8002310:	d902      	bls.n	8002318 <main+0x4c>
			master_count = 0;
 8002312:	4b85      	ldr	r3, [pc, #532]	; (8002528 <main+0x25c>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
		master_toggle = (master_count / 10) % 2;
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <main+0x25c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a83      	ldr	r2, [pc, #524]	; (800252c <main+0x260>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b80      	ldr	r3, [pc, #512]	; (8002530 <main+0x264>)
 800232e:	701a      	strb	r2, [r3, #0]
		if (master_toggle == 0)
 8002330:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <main+0x264>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <main+0x72>
			led_off();
 8002338:	f7ff ffbc 	bl	80022b4 <led_off>
 800233c:	e001      	b.n	8002342 <main+0x76>
		else
			led_on();
 800233e:	f7ff ffad 	bl	800229c <led_on>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (Wait_for("GGA", gps_uart) == 1) {
 8002342:	497c      	ldr	r1, [pc, #496]	; (8002534 <main+0x268>)
 8002344:	487c      	ldr	r0, [pc, #496]	; (8002538 <main+0x26c>)
 8002346:	f7ff fd67 	bl	8001e18 <Wait_for>
 800234a:	4603      	mov	r3, r0
 800234c:	2b01      	cmp	r3, #1
 800234e:	d116      	bne.n	800237e <main+0xb2>
			VCCTimeout = 5000; // Reset the VCC Timeout indicating the GGA is being received
 8002350:	4b7a      	ldr	r3, [pc, #488]	; (800253c <main+0x270>)
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	601a      	str	r2, [r3, #0]
			Copy_upto("*", GGA, gps_uart);
 8002358:	4a76      	ldr	r2, [pc, #472]	; (8002534 <main+0x268>)
 800235a:	4979      	ldr	r1, [pc, #484]	; (8002540 <main+0x274>)
 800235c:	4879      	ldr	r0, [pc, #484]	; (8002544 <main+0x278>)
 800235e:	f7ff fcb1 	bl	8001cc4 <Copy_upto>
			if (decodeGGA(GGA, &gpsData.ggastruct) == 0) {
 8002362:	4979      	ldr	r1, [pc, #484]	; (8002548 <main+0x27c>)
 8002364:	4876      	ldr	r0, [pc, #472]	; (8002540 <main+0x274>)
 8002366:	f7fe fd13 	bl	8000d90 <decodeGGA>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <main+0xac>
				flagGGA = 2;  // 2 indicates the data is valid
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <main+0x280>)
 8002372:	2202      	movs	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e002      	b.n	800237e <main+0xb2>
//				led_on();
			} else {
				flagGGA = 1;  // 1 indicates the data is invalid
 8002378:	4b74      	ldr	r3, [pc, #464]	; (800254c <main+0x280>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
//				led_off();
			}
		}
		if (Wait_for("RMC", gps_uart) == 1) {
 800237e:	496d      	ldr	r1, [pc, #436]	; (8002534 <main+0x268>)
 8002380:	4873      	ldr	r0, [pc, #460]	; (8002550 <main+0x284>)
 8002382:	f7ff fd49 	bl	8001e18 <Wait_for>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d116      	bne.n	80023ba <main+0xee>
			VCCTimeout = 5000; // Reset the VCC Timeout indicating the RMC is being received
 800238c:	4b6b      	ldr	r3, [pc, #428]	; (800253c <main+0x270>)
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	601a      	str	r2, [r3, #0]
			Copy_upto("*", RMC, gps_uart);
 8002394:	4a67      	ldr	r2, [pc, #412]	; (8002534 <main+0x268>)
 8002396:	496f      	ldr	r1, [pc, #444]	; (8002554 <main+0x288>)
 8002398:	486a      	ldr	r0, [pc, #424]	; (8002544 <main+0x278>)
 800239a:	f7ff fc93 	bl	8001cc4 <Copy_upto>
			if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) {
 800239e:	496e      	ldr	r1, [pc, #440]	; (8002558 <main+0x28c>)
 80023a0:	486c      	ldr	r0, [pc, #432]	; (8002554 <main+0x288>)
 80023a2:	f7ff f90f 	bl	80015c4 <decodeRMC>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <main+0xe8>
				flagRMC = 2;  // 2 indicates the data is valid
 80023ac:	4b6b      	ldr	r3, [pc, #428]	; (800255c <main+0x290>)
 80023ae:	2202      	movs	r2, #2
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e002      	b.n	80023ba <main+0xee>
//				led_on();
			} else {
				flagRMC = 1;  // 1 indicates the data is invalid
 80023b4:	4b69      	ldr	r3, [pc, #420]	; (800255c <main+0x290>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
//				led_off();
			}
		}
		if ((flagGGA == 2) | (flagRMC == 2)) {
 80023ba:	4b64      	ldr	r3, [pc, #400]	; (800254c <main+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b64      	ldr	r3, [pc, #400]	; (800255c <main+0x290>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d034      	beq.n	8002448 <main+0x17c>
			#endif
					lcd_send_string(lcdBuffer);
#else
			//			lcd_blank();

			memset(lcdBuffer, '\0', 50);
 80023de:	2232      	movs	r2, #50	; 0x32
 80023e0:	2100      	movs	r1, #0
 80023e2:	485f      	ldr	r0, [pc, #380]	; (8002560 <main+0x294>)
 80023e4:	f002 ff07 	bl	80051f6 <memset>
			lcd_put_cur(0, 0);
 80023e8:	2100      	movs	r1, #0
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fee4 	bl	80021b8 <lcd_put_cur>
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test1,
 80023f0:	4b55      	ldr	r3, [pc, #340]	; (8002548 <main+0x27c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f817 	bl	8000428 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
					gpsData.ggastruct.lcation.NS);
 80023fe:	4952      	ldr	r1, [pc, #328]	; (8002548 <main+0x27c>)
 8002400:	7a09      	ldrb	r1, [r1, #8]
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test1,
 8002402:	9100      	str	r1, [sp, #0]
 8002404:	4957      	ldr	r1, [pc, #348]	; (8002564 <main+0x298>)
 8002406:	4856      	ldr	r0, [pc, #344]	; (8002560 <main+0x294>)
 8002408:	f002 fe92 	bl	8005130 <siprintf>
			lcd_send_string(lcdBuffer);
 800240c:	4854      	ldr	r0, [pc, #336]	; (8002560 <main+0x294>)
 800240e:	f7ff ff2f 	bl	8002270 <lcd_send_string>

			memset(lcdBuffer, '\0', 50);
 8002412:	2232      	movs	r2, #50	; 0x32
 8002414:	2100      	movs	r1, #0
 8002416:	4852      	ldr	r0, [pc, #328]	; (8002560 <main+0x294>)
 8002418:	f002 feed 	bl	80051f6 <memset>
			lcd_put_cur(1, 0);
 800241c:	2100      	movs	r1, #0
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff feca 	bl	80021b8 <lcd_put_cur>
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test2,
 8002424:	4b48      	ldr	r3, [pc, #288]	; (8002548 <main+0x27c>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd fffd 	bl	8000428 <__aeabi_f2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
					gpsData.ggastruct.lcation.EW);
 8002432:	4945      	ldr	r1, [pc, #276]	; (8002548 <main+0x27c>)
 8002434:	7d09      	ldrb	r1, [r1, #20]
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test2,
 8002436:	9100      	str	r1, [sp, #0]
 8002438:	494a      	ldr	r1, [pc, #296]	; (8002564 <main+0x298>)
 800243a:	4849      	ldr	r0, [pc, #292]	; (8002560 <main+0x294>)
 800243c:	f002 fe78 	bl	8005130 <siprintf>
			lcd_send_string(lcdBuffer);
 8002440:	4847      	ldr	r0, [pc, #284]	; (8002560 <main+0x294>)
 8002442:	f7ff ff15 	bl	8002270 <lcd_send_string>
 8002446:	e01f      	b.n	8002488 <main+0x1bc>
#endif
		} else if ((flagGGA == 1) | (flagRMC == 1)) {
 8002448:	4b40      	ldr	r3, [pc, #256]	; (800254c <main+0x280>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <main+0x290>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <main+0x1bc>
			// Instead of clearing the display, it's better if we print spaces.
			// This will avoid the "refreshing" part
			//			lcd_blank();
			lcd_put_cur(0, 0);
 800246c:	2100      	movs	r1, #0
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff fea2 	bl	80021b8 <lcd_put_cur>
			lcd_send_string("   NO FIX YET   ");
 8002474:	483c      	ldr	r0, [pc, #240]	; (8002568 <main+0x29c>)
 8002476:	f7ff fefb 	bl	8002270 <lcd_send_string>
			lcd_put_cur(1, 0);
 800247a:	2100      	movs	r1, #0
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff fe9b 	bl	80021b8 <lcd_put_cur>
			lcd_send_string("   Please wait  ");
 8002482:	483a      	ldr	r0, [pc, #232]	; (800256c <main+0x2a0>)
 8002484:	f7ff fef4 	bl	8002270 <lcd_send_string>
		}
		if (VCCTimeout <= 0) {
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <main+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	dc18      	bgt.n	80024c2 <main+0x1f6>
			VCCTimeout = 5000;  // Reset the timeout
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <main+0x270>)
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	601a      	str	r2, [r3, #0]
			//reset flags
			flagGGA = flagRMC = 0;
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <main+0x290>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	4b2f      	ldr	r3, [pc, #188]	; (800255c <main+0x290>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2a      	ldr	r2, [pc, #168]	; (800254c <main+0x280>)
 80024a4:	6013      	str	r3, [r2, #0]
			// You are here means the VCC is less, or maybe there is some connection issue
			// Check the VCC, also you can try connecting to the external 5V
			//			lcd_blank();
			lcd_put_cur(0, 0);
 80024a6:	2100      	movs	r1, #0
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff fe85 	bl	80021b8 <lcd_put_cur>
			lcd_send_string("    VCC Issue   ");
 80024ae:	4830      	ldr	r0, [pc, #192]	; (8002570 <main+0x2a4>)
 80024b0:	f7ff fede 	bl	8002270 <lcd_send_string>
			lcd_put_cur(1, 0);
 80024b4:	2100      	movs	r1, #0
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7ff fe7e 	bl	80021b8 <lcd_put_cur>
			lcd_send_string("Check Connection");
 80024bc:	482d      	ldr	r0, [pc, #180]	; (8002574 <main+0x2a8>)
 80024be:	f7ff fed7 	bl	8002270 <lcd_send_string>
		}
		// Send AT commands, feed data to Thingspeak server
		master_atcnt = master_count / 10 / 15;
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <main+0x25c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <main+0x2ac>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <main+0x2b0>)
 80024d2:	701a      	strb	r2, [r3, #0]
#define check1 ((flagGGA==2)|(flagRMC==2))&(prev_atcnt < master_atcnt)
		if (check1) {
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <main+0x280>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <main+0x290>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <main+0x2b4>)
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <main+0x2b0>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	bf34      	ite	cc
 8002502:	2301      	movcc	r3, #1
 8002504:	2300      	movcs	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	400b      	ands	r3, r1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <main+0x252>
			Value_Buf[0] = gpsData.ggastruct.lcation.test1;
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <main+0x27c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <main+0x2b8>)
 8002514:	6013      	str	r3, [r2, #0]
			Value_Buf[1] = gpsData.ggastruct.lcation.test2;
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <main+0x27c>)
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <main+0x2b8>)
 800251c:	6053      	str	r3, [r2, #4]
//			ESP_Send_Multi("W93N9RZLEHGDUYF1", 2, Value_Buf);
		}
		prev_atcnt = master_atcnt;
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <main+0x2b0>)
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <main+0x2b4>)
 8002524:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8002526:	e6e8      	b.n	80022fa <main+0x2e>
 8002528:	20000c90 	.word	0x20000c90
 800252c:	cccccccd 	.word	0xcccccccd
 8002530:	20000c94 	.word	0x20000c94
 8002534:	20000ab0 	.word	0x20000ab0
 8002538:	080081f8 	.word	0x080081f8
 800253c:	20000004 	.word	0x20000004
 8002540:	20000b40 	.word	0x20000b40
 8002544:	080081fc 	.word	0x080081fc
 8002548:	20000c08 	.word	0x20000c08
 800254c:	20000c54 	.word	0x20000c54
 8002550:	08008200 	.word	0x08008200
 8002554:	20000ba4 	.word	0x20000ba4
 8002558:	20000c3c 	.word	0x20000c3c
 800255c:	20000c58 	.word	0x20000c58
 8002560:	20000c5c 	.word	0x20000c5c
 8002564:	08008204 	.word	0x08008204
 8002568:	08008210 	.word	0x08008210
 800256c:	08008224 	.word	0x08008224
 8002570:	08008238 	.word	0x08008238
 8002574:	0800824c 	.word	0x0800824c
 8002578:	1b4e81b5 	.word	0x1b4e81b5
 800257c:	20000c95 	.word	0x20000c95
 8002580:	20000c96 	.word	0x20000c96
 8002584:	20000c98 	.word	0x20000c98

08002588 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b090      	sub	sp, #64	; 0x40
 800258c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800258e:	f107 0318 	add.w	r3, r7, #24
 8002592:	2228      	movs	r2, #40	; 0x28
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fe2d 	bl	80051f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025b8:	2301      	movs	r3, #1
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025bc:	2302      	movs	r3, #2
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80025c6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fb25 	bl	8003c20 <HAL_RCC_OscConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0x58>
		Error_Handler();
 80025dc:	f000 f8f4 	bl	80027c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025e0:	230f      	movs	r3, #15
 80025e2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e4:	2302      	movs	r3, #2
 80025e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2102      	movs	r1, #2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fd92 	bl	8004124 <HAL_RCC_ClockConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0x82>
		Error_Handler();
 8002606:	f000 f8df 	bl	80027c8 <Error_Handler>
	}
}
 800260a:	bf00      	nop
 800260c:	3740      	adds	r7, #64	; 0x40
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <MX_I2C1_Init+0x50>)
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <MX_I2C1_Init+0x54>)
 800261c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_I2C1_Init+0x50>)
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <MX_I2C1_Init+0x58>)
 8002622:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_I2C1_Init+0x50>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_I2C1_Init+0x50>)
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_I2C1_Init+0x50>)
 8002632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002636:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <MX_I2C1_Init+0x50>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_I2C1_Init+0x50>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <MX_I2C1_Init+0x50>)
 8002646:	2200      	movs	r2, #0
 8002648:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_I2C1_Init+0x50>)
 800264c:	2200      	movs	r2, #0
 800264e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <MX_I2C1_Init+0x50>)
 8002652:	f000 fe49 	bl	80032e8 <HAL_I2C_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800265c:	f000 f8b4 	bl	80027c8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000a5c 	.word	0x20000a5c
 8002668:	40005400 	.word	0x40005400
 800266c:	000186a0 	.word	0x000186a0

08002670 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <MX_USART1_UART_Init+0x50>)
 8002678:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 800267c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002680:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002696:	220c      	movs	r2, #12
 8002698:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 80026a8:	f001 feca 	bl	8004440 <HAL_UART_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80026b2:	f000 f889 	bl	80027c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000ab0 	.word	0x20000ab0
 80026c0:	40013800 	.word	0x40013800

080026c4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <MX_USART2_UART_Init+0x50>)
 80026cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026ea:	220c      	movs	r2, #12
 80026ec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80026fa:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_USART2_UART_Init+0x4c>)
 80026fc:	f001 fea0 	bl	8004440 <HAL_UART_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002706:	f000 f85f 	bl	80027c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000af8 	.word	0x20000af8
 8002714:	40004400 	.word	0x40004400

08002718 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <MX_GPIO_Init+0xa8>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <MX_GPIO_Init+0xa8>)
 8002732:	f043 0310 	orr.w	r3, r3, #16
 8002736:	6193      	str	r3, [r2, #24]
 8002738:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <MX_GPIO_Init+0xa8>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_GPIO_Init+0xa8>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <MX_GPIO_Init+0xa8>)
 800274a:	f043 0320 	orr.w	r3, r3, #32
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_GPIO_Init+0xa8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_GPIO_Init+0xa8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <MX_GPIO_Init+0xa8>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_GPIO_Init+0xa8>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <MX_GPIO_Init+0xa8>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <MX_GPIO_Init+0xa8>)
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_GPIO_Init+0xa8>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002792:	480c      	ldr	r0, [pc, #48]	; (80027c4 <MX_GPIO_Init+0xac>)
 8002794:	f000 fd90 	bl	80032b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279e:	2301      	movs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4619      	mov	r1, r3
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_GPIO_Init+0xac>)
 80027b2:	f000 fbfd 	bl	8002fb0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80027b6:	bf00      	nop
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40011000 	.word	0x40011000

080027c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027d0:	e7fe      	b.n	80027d0 <Error_Handler+0x8>
	...

080027d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_MspInit+0x5c>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_MspInit+0x5c>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6193      	str	r3, [r2, #24]
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_MspInit+0x5c>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_MspInit+0x5c>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <HAL_MspInit+0x5c>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_MspInit+0x5c>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_MspInit+0x60>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_MspInit+0x60>)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	40010000 	.word	0x40010000

08002838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_I2C_MspInit+0x90>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d132      	bne.n	80028be <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_I2C_MspInit+0x94>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_I2C_MspInit+0x94>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_I2C_MspInit+0x94>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002870:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002876:	2312      	movs	r3, #18
 8002878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	4812      	ldr	r0, [pc, #72]	; (80028d0 <HAL_I2C_MspInit+0x98>)
 8002886:	f000 fb93 	bl	8002fb0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_I2C_MspInit+0x9c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f043 0302 	orr.w	r3, r3, #2
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_I2C_MspInit+0x9c>)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_I2C_MspInit+0x94>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_I2C_MspInit+0x94>)
 80028ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_I2C_MspInit+0x94>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40005400 	.word	0x40005400
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010c00 	.word	0x40010c00
 80028d4:	40010000 	.word	0x40010000

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a45      	ldr	r2, [pc, #276]	; (8002a08 <HAL_UART_MspInit+0x130>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d146      	bne.n	8002986 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f8:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <HAL_UART_MspInit+0x134>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a43      	ldr	r2, [pc, #268]	; (8002a0c <HAL_UART_MspInit+0x134>)
 80028fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_UART_MspInit+0x134>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_UART_MspInit+0x134>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a3d      	ldr	r2, [pc, #244]	; (8002a0c <HAL_UART_MspInit+0x134>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_UART_MspInit+0x134>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002928:	2340      	movs	r3, #64	; 0x40
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4619      	mov	r1, r3
 800293a:	4835      	ldr	r0, [pc, #212]	; (8002a10 <HAL_UART_MspInit+0x138>)
 800293c:	f000 fb38 	bl	8002fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	482f      	ldr	r0, [pc, #188]	; (8002a10 <HAL_UART_MspInit+0x138>)
 8002954:	f000 fb2c 	bl	8002fb0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_UART_MspInit+0x13c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296e:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <HAL_UART_MspInit+0x13c>)
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	2025      	movs	r0, #37	; 0x25
 800297a:	f000 fae2 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800297e:	2025      	movs	r0, #37	; 0x25
 8002980:	f000 fafb 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002984:	e03c      	b.n	8002a00 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <HAL_UART_MspInit+0x140>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d137      	bne.n	8002a00 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002990:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <HAL_UART_MspInit+0x134>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <HAL_UART_MspInit+0x134>)
 8002996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299a:	61d3      	str	r3, [r2, #28]
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_UART_MspInit+0x134>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_UART_MspInit+0x134>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <HAL_UART_MspInit+0x134>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_UART_MspInit+0x134>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029c0:	2304      	movs	r3, #4
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	4619      	mov	r1, r3
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <HAL_UART_MspInit+0x144>)
 80029d4:	f000 faec 	bl	8002fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d8:	2308      	movs	r3, #8
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029dc:	2300      	movs	r3, #0
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4619      	mov	r1, r3
 80029ea:	480c      	ldr	r0, [pc, #48]	; (8002a1c <HAL_UART_MspInit+0x144>)
 80029ec:	f000 fae0 	bl	8002fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	2026      	movs	r0, #38	; 0x26
 80029f6:	f000 faa4 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029fa:	2026      	movs	r0, #38	; 0x26
 80029fc:	f000 fabd 	bl	8002f7a <HAL_NVIC_EnableIRQ>
}
 8002a00:	bf00      	nop
 8002a02:	3730      	adds	r7, #48	; 0x30
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010c00 	.word	0x40010c00
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40004400 	.word	0x40004400
 8002a1c:	40010800 	.word	0x40010800

08002a20 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002a24:	e7fe      	b.n	8002a24 <NMI_Handler+0x4>

08002a26 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002a2a:	e7fe      	b.n	8002a2a <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002a30:	e7fe      	b.n	8002a30 <MemManage_Handler+0x4>

08002a32 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002a36:	e7fe      	b.n	8002a36 <BusFault_Handler+0x4>

08002a38 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002a3c:	e7fe      	b.n	8002a3c <UsageFault_Handler+0x4>

08002a3e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
	...

08002a64 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	if (timeout > 0)
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <SysTick_Handler+0x20>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <SysTick_Handler+0x18>
		timeout--;
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <SysTick_Handler+0x20>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <SysTick_Handler+0x20>)
 8002a7a:	801a      	strh	r2, [r3, #0]
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002a7c:	f000 f94a 	bl	8002d14 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000228 	.word	0x20000228

08002a88 <USART1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <USART1_IRQHandler+0x10>)
 8002a8e:	f7ff fa89 	bl	8001fa4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
	/* USER CODE END USART1_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000ab0 	.word	0x20000ab0

08002a9c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <USART2_IRQHandler+0x10>)
 8002aa2:	f7ff fa7f 	bl	8001fa4 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
	/* USER CODE END USART2_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000af8 	.word	0x20000af8

08002ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return 1;
 8002ab4:	2301      	movs	r3, #1
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <_kill>:

int _kill(int pid, int sig)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ac8:	f002 fbe8 	bl	800529c <__errno>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2216      	movs	r2, #22
 8002ad0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_exit>:

void _exit (int status)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffe7 	bl	8002abe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002af0:	e7fe      	b.n	8002af0 <_exit+0x12>

08002af2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e00a      	b.n	8002b1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b04:	f3af 8000 	nop.w
 8002b08:	4601      	mov	r1, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	60ba      	str	r2, [r7, #8]
 8002b10:	b2ca      	uxtb	r2, r1
 8002b12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3301      	adds	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	dbf0      	blt.n	8002b04 <_read+0x12>
  }

  return len;
 8002b22:	687b      	ldr	r3, [r7, #4]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e009      	b.n	8002b52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	60ba      	str	r2, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dbf1      	blt.n	8002b3e <_write+0x12>
  }
  return len;
 8002b5a:	687b      	ldr	r3, [r7, #4]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_close>:

int _close(int file)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b8a:	605a      	str	r2, [r3, #4]
  return 0;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <_isatty>:

int _isatty(int file)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f002 fb52 	bl	800529c <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20005000 	.word	0x20005000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	20000ca0 	.word	0x20000ca0
 8002c2c:	20000df8 	.word	0x20000df8

08002c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c3c:	f7ff fff8 	bl	8002c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c40:	480b      	ldr	r0, [pc, #44]	; (8002c70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c42:	490c      	ldr	r1, [pc, #48]	; (8002c74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c48:	e002      	b.n	8002c50 <LoopCopyDataInit>

08002c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4e:	3304      	adds	r3, #4

08002c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c54:	d3f9      	bcc.n	8002c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c56:	4a09      	ldr	r2, [pc, #36]	; (8002c7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c58:	4c09      	ldr	r4, [pc, #36]	; (8002c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c5c:	e001      	b.n	8002c62 <LoopFillZerobss>

08002c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c60:	3204      	adds	r2, #4

08002c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c64:	d3fb      	bcc.n	8002c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c66:	f002 fb1f 	bl	80052a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c6a:	f7ff fb2f 	bl	80022cc <main>
  bx lr
 8002c6e:	4770      	bx	lr
  ldr r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c74:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c78:	08008638 	.word	0x08008638
  ldr r2, =_sbss
 8002c7c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c80:	20000df4 	.word	0x20000df4

08002c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c84:	e7fe      	b.n	8002c84 <ADC1_2_IRQHandler>
	...

08002c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_Init+0x28>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <HAL_Init+0x28>)
 8002c92:	f043 0310 	orr.w	r3, r3, #16
 8002c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f000 f947 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c9e:	200f      	movs	r0, #15
 8002ca0:	f000 f808 	bl	8002cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ca4:	f7ff fd96 	bl	80027d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_InitTick+0x54>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_InitTick+0x58>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f95f 	bl	8002f96 <HAL_SYSTICK_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00e      	b.n	8002d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d80a      	bhi.n	8002cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f000 f927 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <HAL_InitTick+0x5c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	20000010 	.word	0x20000010
 8002d10:	2000000c 	.word	0x2000000c

08002d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_IncTick+0x1c>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_IncTick+0x20>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_IncTick+0x20>)
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	20000010 	.word	0x20000010
 8002d34:	20000ca4 	.word	0x20000ca4

08002d38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d3c:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <HAL_GetTick+0x10>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	20000ca4 	.word	0x20000ca4

08002d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d005      	beq.n	8002d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_Delay+0x44>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d72:	bf00      	nop
 8002d74:	f7ff ffe0 	bl	8002d38 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d8f7      	bhi.n	8002d74 <HAL_Delay+0x28>
  {
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000010 	.word	0x20000010

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4906      	ldr	r1, [pc, #24]	; (8002e2c <__NVIC_EnableIRQ+0x34>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff90 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff2d 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff42 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff35 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b08b      	sub	sp, #44	; 0x2c
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc2:	e169      	b.n	8003298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8158 	bne.w	8003292 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a9a      	ldr	r2, [pc, #616]	; (8003250 <HAL_GPIO_Init+0x2a0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d05e      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8002fec:	4a98      	ldr	r2, [pc, #608]	; (8003250 <HAL_GPIO_Init+0x2a0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d875      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8002ff2:	4a98      	ldr	r2, [pc, #608]	; (8003254 <HAL_GPIO_Init+0x2a4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d058      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8002ff8:	4a96      	ldr	r2, [pc, #600]	; (8003254 <HAL_GPIO_Init+0x2a4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d86f      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8002ffe:	4a96      	ldr	r2, [pc, #600]	; (8003258 <HAL_GPIO_Init+0x2a8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d052      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8003004:	4a94      	ldr	r2, [pc, #592]	; (8003258 <HAL_GPIO_Init+0x2a8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d869      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 800300a:	4a94      	ldr	r2, [pc, #592]	; (800325c <HAL_GPIO_Init+0x2ac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04c      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8003010:	4a92      	ldr	r2, [pc, #584]	; (800325c <HAL_GPIO_Init+0x2ac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d863      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8003016:	4a92      	ldr	r2, [pc, #584]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d046      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 800301c:	4a90      	ldr	r2, [pc, #576]	; (8003260 <HAL_GPIO_Init+0x2b0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d85d      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8003022:	2b12      	cmp	r3, #18
 8003024:	d82a      	bhi.n	800307c <HAL_GPIO_Init+0xcc>
 8003026:	2b12      	cmp	r3, #18
 8003028:	d859      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <HAL_GPIO_Init+0x80>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	080030ab 	.word	0x080030ab
 8003034:	08003085 	.word	0x08003085
 8003038:	08003097 	.word	0x08003097
 800303c:	080030d9 	.word	0x080030d9
 8003040:	080030df 	.word	0x080030df
 8003044:	080030df 	.word	0x080030df
 8003048:	080030df 	.word	0x080030df
 800304c:	080030df 	.word	0x080030df
 8003050:	080030df 	.word	0x080030df
 8003054:	080030df 	.word	0x080030df
 8003058:	080030df 	.word	0x080030df
 800305c:	080030df 	.word	0x080030df
 8003060:	080030df 	.word	0x080030df
 8003064:	080030df 	.word	0x080030df
 8003068:	080030df 	.word	0x080030df
 800306c:	080030df 	.word	0x080030df
 8003070:	080030df 	.word	0x080030df
 8003074:	0800308d 	.word	0x0800308d
 8003078:	080030a1 	.word	0x080030a1
 800307c:	4a79      	ldr	r2, [pc, #484]	; (8003264 <HAL_GPIO_Init+0x2b4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003082:	e02c      	b.n	80030de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e029      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	3304      	adds	r3, #4
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e024      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	3308      	adds	r3, #8
 800309c:	623b      	str	r3, [r7, #32]
          break;
 800309e:	e01f      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	330c      	adds	r3, #12
 80030a6:	623b      	str	r3, [r7, #32]
          break;
 80030a8:	e01a      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030b2:	2304      	movs	r3, #4
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e013      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c0:	2308      	movs	r3, #8
 80030c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	611a      	str	r2, [r3, #16]
          break;
 80030ca:	e009      	b.n	80030e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030cc:	2308      	movs	r3, #8
 80030ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	615a      	str	r2, [r3, #20]
          break;
 80030d6:	e003      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
          break;
 80030dc:	e000      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          break;
 80030de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2bff      	cmp	r3, #255	; 0xff
 80030e4:	d801      	bhi.n	80030ea <HAL_GPIO_Init+0x13a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	e001      	b.n	80030ee <HAL_GPIO_Init+0x13e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2bff      	cmp	r3, #255	; 0xff
 80030f4:	d802      	bhi.n	80030fc <HAL_GPIO_Init+0x14c>
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_Init+0x152>
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	3b08      	subs	r3, #8
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	210f      	movs	r1, #15
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	431a      	orrs	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80b1 	beq.w	8003292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003130:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_GPIO_Init+0x2b8>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4a4c      	ldr	r2, [pc, #304]	; (8003268 <HAL_GPIO_Init+0x2b8>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6193      	str	r3, [r2, #24]
 800313c:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_GPIO_Init+0x2b8>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003148:	4a48      	ldr	r2, [pc, #288]	; (800326c <HAL_GPIO_Init+0x2bc>)
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a40      	ldr	r2, [pc, #256]	; (8003270 <HAL_GPIO_Init+0x2c0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <HAL_GPIO_Init+0x1ec>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3f      	ldr	r2, [pc, #252]	; (8003274 <HAL_GPIO_Init+0x2c4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00d      	beq.n	8003198 <HAL_GPIO_Init+0x1e8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3e      	ldr	r2, [pc, #248]	; (8003278 <HAL_GPIO_Init+0x2c8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <HAL_GPIO_Init+0x1e4>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3d      	ldr	r2, [pc, #244]	; (800327c <HAL_GPIO_Init+0x2cc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_GPIO_Init+0x1e0>
 800318c:	2303      	movs	r3, #3
 800318e:	e006      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 8003190:	2304      	movs	r3, #4
 8003192:	e004      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 8003194:	2302      	movs	r3, #2
 8003196:	e002      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 800319c:	2300      	movs	r3, #0
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	f002 0203 	and.w	r2, r2, #3
 80031a4:	0092      	lsls	r2, r2, #2
 80031a6:	4093      	lsls	r3, r2
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031ae:	492f      	ldr	r1, [pc, #188]	; (800326c <HAL_GPIO_Init+0x2bc>)
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	492c      	ldr	r1, [pc, #176]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	43db      	mvns	r3, r3
 80031de:	4928      	ldr	r1, [pc, #160]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60cb      	str	r3, [r1, #12]
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	43db      	mvns	r3, r3
 8003206:	491e      	ldr	r1, [pc, #120]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 8003208:	4013      	ands	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4918      	ldr	r1, [pc, #96]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	43db      	mvns	r3, r3
 800322e:	4914      	ldr	r1, [pc, #80]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 8003230:	4013      	ands	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d021      	beq.n	8003284 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_GPIO_Init+0x2d0>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e021      	b.n	8003292 <HAL_GPIO_Init+0x2e2>
 800324e:	bf00      	nop
 8003250:	10320000 	.word	0x10320000
 8003254:	10310000 	.word	0x10310000
 8003258:	10220000 	.word	0x10220000
 800325c:	10210000 	.word	0x10210000
 8003260:	10120000 	.word	0x10120000
 8003264:	10110000 	.word	0x10110000
 8003268:	40021000 	.word	0x40021000
 800326c:	40010000 	.word	0x40010000
 8003270:	40010800 	.word	0x40010800
 8003274:	40010c00 	.word	0x40010c00
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_GPIO_Init+0x304>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	43db      	mvns	r3, r3
 800328c:	4909      	ldr	r1, [pc, #36]	; (80032b4 <HAL_GPIO_Init+0x304>)
 800328e:	4013      	ands	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	3301      	adds	r3, #1
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f47f ae8e 	bne.w	8002fc4 <HAL_GPIO_Init+0x14>
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	372c      	adds	r7, #44	; 0x2c
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
 80032c4:	4613      	mov	r3, r2
 80032c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032c8:	787b      	ldrb	r3, [r7, #1]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032d4:	e003      	b.n	80032de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	041a      	lsls	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	611a      	str	r2, [r3, #16]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e12b      	b.n	8003552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fa92 	bl	8002838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800334c:	f001 f832 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8003350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4a81      	ldr	r2, [pc, #516]	; (800355c <HAL_I2C_Init+0x274>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d807      	bhi.n	800336c <HAL_I2C_Init+0x84>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a80      	ldr	r2, [pc, #512]	; (8003560 <HAL_I2C_Init+0x278>)
 8003360:	4293      	cmp	r3, r2
 8003362:	bf94      	ite	ls
 8003364:	2301      	movls	r3, #1
 8003366:	2300      	movhi	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e006      	b.n	800337a <HAL_I2C_Init+0x92>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_I2C_Init+0x27c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0e7      	b.n	8003552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a78      	ldr	r2, [pc, #480]	; (8003568 <HAL_I2C_Init+0x280>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a6a      	ldr	r2, [pc, #424]	; (800355c <HAL_I2C_Init+0x274>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d802      	bhi.n	80033bc <HAL_I2C_Init+0xd4>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3301      	adds	r3, #1
 80033ba:	e009      	b.n	80033d0 <HAL_I2C_Init+0xe8>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	4a69      	ldr	r2, [pc, #420]	; (800356c <HAL_I2C_Init+0x284>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	3301      	adds	r3, #1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	495c      	ldr	r1, [pc, #368]	; (800355c <HAL_I2C_Init+0x274>)
 80033ec:	428b      	cmp	r3, r1
 80033ee:	d819      	bhi.n	8003424 <HAL_I2C_Init+0x13c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e59      	subs	r1, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003404:	400b      	ands	r3, r1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_I2C_Init+0x138>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1e59      	subs	r1, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fbb1 f3f3 	udiv	r3, r1, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	e051      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003420:	2304      	movs	r3, #4
 8003422:	e04f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d111      	bne.n	8003450 <HAL_I2C_Init+0x168>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1e58      	subs	r0, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e012      	b.n	8003476 <HAL_I2C_Init+0x18e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Init+0x196>
 800347a:	2301      	movs	r3, #1
 800347c:	e022      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10e      	bne.n	80034a4 <HAL_I2C_Init+0x1bc>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e58      	subs	r0, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	440b      	add	r3, r1
 8003494:	fbb0 f3f3 	udiv	r3, r0, r3
 8003498:	3301      	adds	r3, #1
 800349a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a2:	e00f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e58      	subs	r0, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	0099      	lsls	r1, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	6809      	ldr	r1, [r1, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6911      	ldr	r1, [r2, #16]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	430b      	orrs	r3, r1
 8003506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	000186a0 	.word	0x000186a0
 8003560:	001e847f 	.word	0x001e847f
 8003564:	003d08ff 	.word	0x003d08ff
 8003568:	431bde83 	.word	0x431bde83
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
 8003580:	4613      	mov	r3, r2
 8003582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff fbd8 	bl	8002d38 <HAL_GetTick>
 8003588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 80e0 	bne.w	8003758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	4970      	ldr	r1, [pc, #448]	; (8003764 <HAL_I2C_Master_Transmit+0x1f4>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f964 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0d3      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x50>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0cc      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d007      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2221      	movs	r2, #33	; 0x21
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2210      	movs	r2, #16
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a50      	ldr	r2, [pc, #320]	; (8003768 <HAL_I2C_Master_Transmit+0x1f8>)
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f89c 	bl	800376c <I2C_MasterRequestWrite>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e08d      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003654:	e066      	b.n	8003724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fa22 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b04      	cmp	r3, #4
 800366c:	d107      	bne.n	800367e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06b      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d11b      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x188>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	6a39      	ldr	r1, [r7, #32]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fa19 	bl	8003b34 <I2C_WaitOnBTFFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e01a      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d194      	bne.n	8003656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000

0800376c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	460b      	mov	r3, r1
 800377a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d006      	beq.n	8003796 <I2C_MasterRequestWrite+0x2a>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d003      	beq.n	8003796 <I2C_MasterRequestWrite+0x2a>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003794:	d108      	bne.n	80037a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	e00b      	b.n	80037c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	2b12      	cmp	r3, #18
 80037ae:	d107      	bne.n	80037c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f84f 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e6:	d103      	bne.n	80037f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e035      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037fc:	d108      	bne.n	8003810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	e01b      	b.n	8003848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	11db      	asrs	r3, r3, #7
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f063 030f 	orn	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <I2C_MasterRequestWrite+0xfc>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f898 	bl	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e010      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <I2C_MasterRequestWrite+0x100>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f888 	bl	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00010008 	.word	0x00010008
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003880:	e048      	b.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d044      	beq.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7ff fa55 	bl	8002d38 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d139      	bne.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d10d      	bne.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	e00c      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d116      	bne.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e023      	b.n	800395c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10d      	bne.n	800393a <I2C_WaitOnFlagUntilTimeout+0xca>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	43da      	mvns	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	e00c      	b.n	8003954 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	43da      	mvns	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	429a      	cmp	r2, r3
 8003958:	d093      	beq.n	8003882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003972:	e071      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d123      	bne.n	80039cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800399c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f043 0204 	orr.w	r2, r3, #4
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e067      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d041      	beq.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d4:	f7ff f9b0 	bl	8002d38 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d302      	bcc.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d136      	bne.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10c      	bne.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	e00b      	b.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	43da      	mvns	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e021      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10c      	bne.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e00b      	b.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f af6d 	bne.w	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab0:	e034      	b.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f886 	bl	8003bc4 <I2C_IsAcknowledgeFailed>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e034      	b.n	8003b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d028      	beq.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7ff f935 	bl	8002d38 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d11d      	bne.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b80      	cmp	r3, #128	; 0x80
 8003aec:	d016      	beq.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d1c3      	bne.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b40:	e034      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f83e 	bl	8003bc4 <I2C_IsAcknowledgeFailed>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e034      	b.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d028      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7ff f8ed 	bl	8002d38 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11d      	bne.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d016      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e007      	b.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d1c3      	bne.n	8003b42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d11b      	bne.n	8003c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e272      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8087 	beq.w	8003d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c40:	4b92      	ldr	r3, [pc, #584]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d00c      	beq.n	8003c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c4c:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d112      	bne.n	8003c7e <HAL_RCC_OscConfig+0x5e>
 8003c58:	4b8c      	ldr	r3, [pc, #560]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d10b      	bne.n	8003c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c66:	4b89      	ldr	r3, [pc, #548]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d06c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x12c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d168      	bne.n	8003d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e24c      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x76>
 8003c88:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7f      	ldr	r2, [pc, #508]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	e02e      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x98>
 8003c9e:	4b7b      	ldr	r3, [pc, #492]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7a      	ldr	r2, [pc, #488]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a77      	ldr	r2, [pc, #476]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e01d      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0xbc>
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a71      	ldr	r2, [pc, #452]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4b6f      	ldr	r3, [pc, #444]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6e      	ldr	r2, [pc, #440]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003cdc:	4b6b      	ldr	r3, [pc, #428]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6a      	ldr	r2, [pc, #424]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b68      	ldr	r3, [pc, #416]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a67      	ldr	r2, [pc, #412]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7ff f81c 	bl	8002d38 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d04:	f7ff f818 	bl	8002d38 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e200      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b5d      	ldr	r3, [pc, #372]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0xe4>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7ff f808 	bl	8002d38 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7ff f804 	bl	8002d38 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1ec      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x10c>
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d063      	beq.n	8003e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d66:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d11c      	bne.n	8003dac <HAL_RCC_OscConfig+0x18c>
 8003d72:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d116      	bne.n	8003dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x176>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1c0      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4939      	ldr	r1, [pc, #228]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	e03a      	b.n	8003e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCC_OscConfig+0x270>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe ffbd 	bl	8002d38 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fe ffb9 	bl	8002d38 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e1a1      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4927      	ldr	r1, [pc, #156]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_RCC_OscConfig+0x270>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe ff9c 	bl	8002d38 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe ff98 	bl	8002d38 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e180      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d03a      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d019      	beq.n	8003e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_RCC_OscConfig+0x274>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fe ff7c 	bl	8002d38 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fe ff78 	bl	8002d38 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e160      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f000 face 	bl	8004404 <RCC_Delay>
 8003e68:	e01c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e70:	f7fe ff62 	bl	8002d38 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e76:	e00f      	b.n	8003e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe ff5e 	bl	8002d38 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d908      	bls.n	8003e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e146      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	42420000 	.word	0x42420000
 8003e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b92      	ldr	r3, [pc, #584]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e9      	bne.n	8003e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a6 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4a87      	ldr	r2, [pc, #540]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	61d3      	str	r3, [r2, #28]
 8003ece:	4b85      	ldr	r3, [pc, #532]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b82      	ldr	r3, [pc, #520]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b7f      	ldr	r3, [pc, #508]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7e      	ldr	r2, [pc, #504]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe ff1f 	bl	8002d38 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe ff1b 	bl	8002d38 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	; 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e103      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x312>
 8003f24:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6213      	str	r3, [r2, #32]
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x334>
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4a69      	ldr	r2, [pc, #420]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6213      	str	r3, [r2, #32]
 8003f46:	4b67      	ldr	r3, [pc, #412]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a66      	ldr	r2, [pc, #408]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6213      	str	r3, [r2, #32]
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x356>
 8003f5c:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4a60      	ldr	r2, [pc, #384]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6213      	str	r3, [r2, #32]
 8003f68:	4b5e      	ldr	r3, [pc, #376]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6213      	str	r3, [r2, #32]
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f76:	4b5b      	ldr	r3, [pc, #364]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6213      	str	r3, [r2, #32]
 8003f82:	4b58      	ldr	r3, [pc, #352]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fe fecf 	bl	8002d38 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fe fecb 	bl	8002d38 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0b1      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x37e>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe feb9 	bl	8002d38 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fe feb5 	bl	8002d38 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e09b      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b3c      	ldr	r3, [pc, #240]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8087 	beq.w	8004116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004008:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d061      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d146      	bne.n	80040aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_RCC_OscConfig+0x4cc>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe fe89 	bl	8002d38 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fe fe85 	bl	8002d38 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e06d      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d108      	bne.n	8004064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	4921      	ldr	r1, [pc, #132]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004064:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a19      	ldr	r1, [r3, #32]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	430b      	orrs	r3, r1
 8004076:	491b      	ldr	r1, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x4cc>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe fe59 	bl	8002d38 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fe fe55 	bl	8002d38 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e03d      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x46a>
 80040a8:	e035      	b.n	8004116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_RCC_OscConfig+0x4cc>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe fe42 	bl	8002d38 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fe fe3e 	bl	8002d38 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e026      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x498>
 80040d6:	e01e      	b.n	8004116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e019      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_OscConfig+0x500>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	429a      	cmp	r2, r3
 8004102:	d106      	bne.n	8004112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000

08004124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0d0      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004138:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d910      	bls.n	8004168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 0207 	bic.w	r2, r3, #7
 800414e:	4965      	ldr	r1, [pc, #404]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b63      	ldr	r3, [pc, #396]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0b8      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004180:	4b59      	ldr	r3, [pc, #356]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a58      	ldr	r2, [pc, #352]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800418a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a4:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	494d      	ldr	r1, [pc, #308]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d040      	beq.n	8004244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d115      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e07f      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e073      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f2:	4b3d      	ldr	r3, [pc, #244]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06b      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004202:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4936      	ldr	r1, [pc, #216]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004214:	f7fe fd90 	bl	8002d38 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	e00a      	b.n	8004232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421c:	f7fe fd8c 	bl	8002d38 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e053      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 020c 	and.w	r2, r3, #12
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	429a      	cmp	r2, r3
 8004242:	d1eb      	bne.n	800421c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d210      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0207 	bic.w	r2, r3, #7
 800425a:	4922      	ldr	r1, [pc, #136]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e032      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4916      	ldr	r1, [pc, #88]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	490e      	ldr	r1, [pc, #56]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b2:	f000 f821 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	490a      	ldr	r1, [pc, #40]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	5ccb      	ldrb	r3, [r1, r3]
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1cc>)
 80042cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1d0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fcee 	bl	8002cb4 <HAL_InitTick>

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40022000 	.word	0x40022000
 80042e8:	40021000 	.word	0x40021000
 80042ec:	08008260 	.word	0x08008260
 80042f0:	20000008 	.word	0x20000008
 80042f4:	2000000c 	.word	0x2000000c

080042f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCC_GetSysClockFreq+0x94>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b04      	cmp	r3, #4
 8004320:	d002      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x30>
 8004322:	2b08      	cmp	r3, #8
 8004324:	d003      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x36>
 8004326:	e027      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCC_GetSysClockFreq+0x98>)
 800432a:	613b      	str	r3, [r7, #16]
      break;
 800432c:	e027      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	0c9b      	lsrs	r3, r3, #18
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004338:	5cd3      	ldrb	r3, [r2, r3]
 800433a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d010      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_RCC_GetSysClockFreq+0x94>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	0c5b      	lsrs	r3, r3, #17
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004352:	5cd3      	ldrb	r3, [r2, r3]
 8004354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <HAL_RCC_GetSysClockFreq+0x98>)
 800435a:	fb03 f202 	mul.w	r2, r3, r2
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e004      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <HAL_RCC_GetSysClockFreq+0xa4>)
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	613b      	str	r3, [r7, #16]
      break;
 8004376:	e002      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetSysClockFreq+0x98>)
 800437a:	613b      	str	r3, [r7, #16]
      break;
 800437c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437e:	693b      	ldr	r3, [r7, #16]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	007a1200 	.word	0x007a1200
 8004394:	08008278 	.word	0x08008278
 8004398:	08008288 	.word	0x08008288
 800439c:	003d0900 	.word	0x003d0900

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	20000008 	.word	0x20000008

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b8:	f7ff fff2 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4903      	ldr	r1, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	08008270 	.word	0x08008270

080043dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e0:	f7ff ffde 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0adb      	lsrs	r3, r3, #11
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000
 8004400:	08008270 	.word	0x08008270

08004404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <RCC_Delay+0x34>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <RCC_Delay+0x38>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0a5b      	lsrs	r3, r3, #9
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004420:	bf00      	nop
  }
  while (Delay --);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f9      	bne.n	8004420 <RCC_Delay+0x1c>
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	20000008 	.word	0x20000008
 800443c:	10624dd3 	.word	0x10624dd3

08004440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e042      	b.n	80044d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe fa36 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f82b 	bl	80044e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800451a:	f023 030c 	bic.w	r3, r3, #12
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	430b      	orrs	r3, r1
 8004526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <UART_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7ff ff48 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	e002      	b.n	8004556 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7ff ff30 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8004554:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <UART_SetConfig+0x118>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	0119      	lsls	r1, r3, #4
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009a      	lsls	r2, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <UART_SetConfig+0x118>)
 800458e:	fba3 0302 	umull	r0, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2064      	movs	r0, #100	; 0x64
 8004596:	fb00 f303 	mul.w	r3, r0, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	3332      	adds	r3, #50	; 0x32
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <UART_SetConfig+0x118>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ac:	4419      	add	r1, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009a      	lsls	r2, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <UART_SetConfig+0x118>)
 80045c6:	fba3 0302 	umull	r0, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	fb00 f303 	mul.w	r3, r0, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	3332      	adds	r3, #50	; 0x32
 80045d8:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <UART_SetConfig+0x118>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	440a      	add	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40013800 	.word	0x40013800
 80045f8:	51eb851f 	.word	0x51eb851f

080045fc <atoi>:
 80045fc:	220a      	movs	r2, #10
 80045fe:	2100      	movs	r1, #0
 8004600:	f000 b87e 	b.w	8004700 <strtol>

08004604 <_strtol_l.constprop.0>:
 8004604:	2b01      	cmp	r3, #1
 8004606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460a:	4686      	mov	lr, r0
 800460c:	4690      	mov	r8, r2
 800460e:	d001      	beq.n	8004614 <_strtol_l.constprop.0+0x10>
 8004610:	2b24      	cmp	r3, #36	; 0x24
 8004612:	d906      	bls.n	8004622 <_strtol_l.constprop.0+0x1e>
 8004614:	f000 fe42 	bl	800529c <__errno>
 8004618:	2316      	movs	r3, #22
 800461a:	6003      	str	r3, [r0, #0]
 800461c:	2000      	movs	r0, #0
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	460d      	mov	r5, r1
 8004624:	4835      	ldr	r0, [pc, #212]	; (80046fc <_strtol_l.constprop.0+0xf8>)
 8004626:	462a      	mov	r2, r5
 8004628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800462c:	5d06      	ldrb	r6, [r0, r4]
 800462e:	f016 0608 	ands.w	r6, r6, #8
 8004632:	d1f8      	bne.n	8004626 <_strtol_l.constprop.0+0x22>
 8004634:	2c2d      	cmp	r4, #45	; 0x2d
 8004636:	d12e      	bne.n	8004696 <_strtol_l.constprop.0+0x92>
 8004638:	2601      	movs	r6, #1
 800463a:	782c      	ldrb	r4, [r5, #0]
 800463c:	1c95      	adds	r5, r2, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d057      	beq.n	80046f2 <_strtol_l.constprop.0+0xee>
 8004642:	2b10      	cmp	r3, #16
 8004644:	d109      	bne.n	800465a <_strtol_l.constprop.0+0x56>
 8004646:	2c30      	cmp	r4, #48	; 0x30
 8004648:	d107      	bne.n	800465a <_strtol_l.constprop.0+0x56>
 800464a:	782a      	ldrb	r2, [r5, #0]
 800464c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004650:	2a58      	cmp	r2, #88	; 0x58
 8004652:	d149      	bne.n	80046e8 <_strtol_l.constprop.0+0xe4>
 8004654:	2310      	movs	r3, #16
 8004656:	786c      	ldrb	r4, [r5, #1]
 8004658:	3502      	adds	r5, #2
 800465a:	2200      	movs	r2, #0
 800465c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004660:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004664:	fbbc f9f3 	udiv	r9, ip, r3
 8004668:	4610      	mov	r0, r2
 800466a:	fb03 ca19 	mls	sl, r3, r9, ip
 800466e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004672:	2f09      	cmp	r7, #9
 8004674:	d814      	bhi.n	80046a0 <_strtol_l.constprop.0+0x9c>
 8004676:	463c      	mov	r4, r7
 8004678:	42a3      	cmp	r3, r4
 800467a:	dd20      	ble.n	80046be <_strtol_l.constprop.0+0xba>
 800467c:	1c57      	adds	r7, r2, #1
 800467e:	d007      	beq.n	8004690 <_strtol_l.constprop.0+0x8c>
 8004680:	4581      	cmp	r9, r0
 8004682:	d319      	bcc.n	80046b8 <_strtol_l.constprop.0+0xb4>
 8004684:	d101      	bne.n	800468a <_strtol_l.constprop.0+0x86>
 8004686:	45a2      	cmp	sl, r4
 8004688:	db16      	blt.n	80046b8 <_strtol_l.constprop.0+0xb4>
 800468a:	2201      	movs	r2, #1
 800468c:	fb00 4003 	mla	r0, r0, r3, r4
 8004690:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004694:	e7eb      	b.n	800466e <_strtol_l.constprop.0+0x6a>
 8004696:	2c2b      	cmp	r4, #43	; 0x2b
 8004698:	bf04      	itt	eq
 800469a:	782c      	ldrbeq	r4, [r5, #0]
 800469c:	1c95      	addeq	r5, r2, #2
 800469e:	e7ce      	b.n	800463e <_strtol_l.constprop.0+0x3a>
 80046a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80046a4:	2f19      	cmp	r7, #25
 80046a6:	d801      	bhi.n	80046ac <_strtol_l.constprop.0+0xa8>
 80046a8:	3c37      	subs	r4, #55	; 0x37
 80046aa:	e7e5      	b.n	8004678 <_strtol_l.constprop.0+0x74>
 80046ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80046b0:	2f19      	cmp	r7, #25
 80046b2:	d804      	bhi.n	80046be <_strtol_l.constprop.0+0xba>
 80046b4:	3c57      	subs	r4, #87	; 0x57
 80046b6:	e7df      	b.n	8004678 <_strtol_l.constprop.0+0x74>
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	e7e8      	b.n	8004690 <_strtol_l.constprop.0+0x8c>
 80046be:	1c53      	adds	r3, r2, #1
 80046c0:	d108      	bne.n	80046d4 <_strtol_l.constprop.0+0xd0>
 80046c2:	2322      	movs	r3, #34	; 0x22
 80046c4:	4660      	mov	r0, ip
 80046c6:	f8ce 3000 	str.w	r3, [lr]
 80046ca:	f1b8 0f00 	cmp.w	r8, #0
 80046ce:	d0a6      	beq.n	800461e <_strtol_l.constprop.0+0x1a>
 80046d0:	1e69      	subs	r1, r5, #1
 80046d2:	e006      	b.n	80046e2 <_strtol_l.constprop.0+0xde>
 80046d4:	b106      	cbz	r6, 80046d8 <_strtol_l.constprop.0+0xd4>
 80046d6:	4240      	negs	r0, r0
 80046d8:	f1b8 0f00 	cmp.w	r8, #0
 80046dc:	d09f      	beq.n	800461e <_strtol_l.constprop.0+0x1a>
 80046de:	2a00      	cmp	r2, #0
 80046e0:	d1f6      	bne.n	80046d0 <_strtol_l.constprop.0+0xcc>
 80046e2:	f8c8 1000 	str.w	r1, [r8]
 80046e6:	e79a      	b.n	800461e <_strtol_l.constprop.0+0x1a>
 80046e8:	2430      	movs	r4, #48	; 0x30
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1b5      	bne.n	800465a <_strtol_l.constprop.0+0x56>
 80046ee:	2308      	movs	r3, #8
 80046f0:	e7b3      	b.n	800465a <_strtol_l.constprop.0+0x56>
 80046f2:	2c30      	cmp	r4, #48	; 0x30
 80046f4:	d0a9      	beq.n	800464a <_strtol_l.constprop.0+0x46>
 80046f6:	230a      	movs	r3, #10
 80046f8:	e7af      	b.n	800465a <_strtol_l.constprop.0+0x56>
 80046fa:	bf00      	nop
 80046fc:	0800828b 	.word	0x0800828b

08004700 <strtol>:
 8004700:	4613      	mov	r3, r2
 8004702:	460a      	mov	r2, r1
 8004704:	4601      	mov	r1, r0
 8004706:	4802      	ldr	r0, [pc, #8]	; (8004710 <strtol+0x10>)
 8004708:	6800      	ldr	r0, [r0, #0]
 800470a:	f7ff bf7b 	b.w	8004604 <_strtol_l.constprop.0>
 800470e:	bf00      	nop
 8004710:	2000006c 	.word	0x2000006c

08004714 <__cvt>:
 8004714:	2b00      	cmp	r3, #0
 8004716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800471a:	461f      	mov	r7, r3
 800471c:	bfbb      	ittet	lt
 800471e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004722:	461f      	movlt	r7, r3
 8004724:	2300      	movge	r3, #0
 8004726:	232d      	movlt	r3, #45	; 0x2d
 8004728:	b088      	sub	sp, #32
 800472a:	4614      	mov	r4, r2
 800472c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800472e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004730:	7013      	strb	r3, [r2, #0]
 8004732:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004734:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004738:	f023 0820 	bic.w	r8, r3, #32
 800473c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004740:	d005      	beq.n	800474e <__cvt+0x3a>
 8004742:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004746:	d100      	bne.n	800474a <__cvt+0x36>
 8004748:	3501      	adds	r5, #1
 800474a:	2302      	movs	r3, #2
 800474c:	e000      	b.n	8004750 <__cvt+0x3c>
 800474e:	2303      	movs	r3, #3
 8004750:	aa07      	add	r2, sp, #28
 8004752:	9204      	str	r2, [sp, #16]
 8004754:	aa06      	add	r2, sp, #24
 8004756:	e9cd a202 	strd	sl, r2, [sp, #8]
 800475a:	e9cd 3500 	strd	r3, r5, [sp]
 800475e:	4622      	mov	r2, r4
 8004760:	463b      	mov	r3, r7
 8004762:	f000 fe61 	bl	8005428 <_dtoa_r>
 8004766:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800476a:	4606      	mov	r6, r0
 800476c:	d102      	bne.n	8004774 <__cvt+0x60>
 800476e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004770:	07db      	lsls	r3, r3, #31
 8004772:	d522      	bpl.n	80047ba <__cvt+0xa6>
 8004774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004778:	eb06 0905 	add.w	r9, r6, r5
 800477c:	d110      	bne.n	80047a0 <__cvt+0x8c>
 800477e:	7833      	ldrb	r3, [r6, #0]
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d10a      	bne.n	800479a <__cvt+0x86>
 8004784:	2200      	movs	r2, #0
 8004786:	2300      	movs	r3, #0
 8004788:	4620      	mov	r0, r4
 800478a:	4639      	mov	r1, r7
 800478c:	f7fc f90c 	bl	80009a8 <__aeabi_dcmpeq>
 8004790:	b918      	cbnz	r0, 800479a <__cvt+0x86>
 8004792:	f1c5 0501 	rsb	r5, r5, #1
 8004796:	f8ca 5000 	str.w	r5, [sl]
 800479a:	f8da 3000 	ldr.w	r3, [sl]
 800479e:	4499      	add	r9, r3
 80047a0:	2200      	movs	r2, #0
 80047a2:	2300      	movs	r3, #0
 80047a4:	4620      	mov	r0, r4
 80047a6:	4639      	mov	r1, r7
 80047a8:	f7fc f8fe 	bl	80009a8 <__aeabi_dcmpeq>
 80047ac:	b108      	cbz	r0, 80047b2 <__cvt+0x9e>
 80047ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80047b2:	2230      	movs	r2, #48	; 0x30
 80047b4:	9b07      	ldr	r3, [sp, #28]
 80047b6:	454b      	cmp	r3, r9
 80047b8:	d307      	bcc.n	80047ca <__cvt+0xb6>
 80047ba:	4630      	mov	r0, r6
 80047bc:	9b07      	ldr	r3, [sp, #28]
 80047be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047c0:	1b9b      	subs	r3, r3, r6
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	b008      	add	sp, #32
 80047c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	9107      	str	r1, [sp, #28]
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e7f0      	b.n	80047b4 <__cvt+0xa0>

080047d2 <__exponent>:
 80047d2:	4603      	mov	r3, r0
 80047d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047d6:	2900      	cmp	r1, #0
 80047d8:	f803 2b02 	strb.w	r2, [r3], #2
 80047dc:	bfb6      	itet	lt
 80047de:	222d      	movlt	r2, #45	; 0x2d
 80047e0:	222b      	movge	r2, #43	; 0x2b
 80047e2:	4249      	neglt	r1, r1
 80047e4:	2909      	cmp	r1, #9
 80047e6:	7042      	strb	r2, [r0, #1]
 80047e8:	dd2a      	ble.n	8004840 <__exponent+0x6e>
 80047ea:	f10d 0207 	add.w	r2, sp, #7
 80047ee:	4617      	mov	r7, r2
 80047f0:	260a      	movs	r6, #10
 80047f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80047f6:	4694      	mov	ip, r2
 80047f8:	fb06 1415 	mls	r4, r6, r5, r1
 80047fc:	3430      	adds	r4, #48	; 0x30
 80047fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004802:	460c      	mov	r4, r1
 8004804:	2c63      	cmp	r4, #99	; 0x63
 8004806:	4629      	mov	r1, r5
 8004808:	f102 32ff 	add.w	r2, r2, #4294967295
 800480c:	dcf1      	bgt.n	80047f2 <__exponent+0x20>
 800480e:	3130      	adds	r1, #48	; 0x30
 8004810:	f1ac 0402 	sub.w	r4, ip, #2
 8004814:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004818:	4622      	mov	r2, r4
 800481a:	1c41      	adds	r1, r0, #1
 800481c:	42ba      	cmp	r2, r7
 800481e:	d30a      	bcc.n	8004836 <__exponent+0x64>
 8004820:	f10d 0209 	add.w	r2, sp, #9
 8004824:	eba2 020c 	sub.w	r2, r2, ip
 8004828:	42bc      	cmp	r4, r7
 800482a:	bf88      	it	hi
 800482c:	2200      	movhi	r2, #0
 800482e:	4413      	add	r3, r2
 8004830:	1a18      	subs	r0, r3, r0
 8004832:	b003      	add	sp, #12
 8004834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004836:	f812 5b01 	ldrb.w	r5, [r2], #1
 800483a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800483e:	e7ed      	b.n	800481c <__exponent+0x4a>
 8004840:	2330      	movs	r3, #48	; 0x30
 8004842:	3130      	adds	r1, #48	; 0x30
 8004844:	7083      	strb	r3, [r0, #2]
 8004846:	70c1      	strb	r1, [r0, #3]
 8004848:	1d03      	adds	r3, r0, #4
 800484a:	e7f1      	b.n	8004830 <__exponent+0x5e>

0800484c <_printf_float>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	b091      	sub	sp, #68	; 0x44
 8004852:	460c      	mov	r4, r1
 8004854:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004858:	4616      	mov	r6, r2
 800485a:	461f      	mov	r7, r3
 800485c:	4605      	mov	r5, r0
 800485e:	f000 fcd3 	bl	8005208 <_localeconv_r>
 8004862:	6803      	ldr	r3, [r0, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	9309      	str	r3, [sp, #36]	; 0x24
 8004868:	f7fb fc72 	bl	8000150 <strlen>
 800486c:	2300      	movs	r3, #0
 800486e:	930e      	str	r3, [sp, #56]	; 0x38
 8004870:	f8d8 3000 	ldr.w	r3, [r8]
 8004874:	900a      	str	r0, [sp, #40]	; 0x28
 8004876:	3307      	adds	r3, #7
 8004878:	f023 0307 	bic.w	r3, r3, #7
 800487c:	f103 0208 	add.w	r2, r3, #8
 8004880:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004884:	f8d4 b000 	ldr.w	fp, [r4]
 8004888:	f8c8 2000 	str.w	r2, [r8]
 800488c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004890:	4652      	mov	r2, sl
 8004892:	4643      	mov	r3, r8
 8004894:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004898:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800489c:	930b      	str	r3, [sp, #44]	; 0x2c
 800489e:	f04f 32ff 	mov.w	r2, #4294967295
 80048a2:	4650      	mov	r0, sl
 80048a4:	4b9c      	ldr	r3, [pc, #624]	; (8004b18 <_printf_float+0x2cc>)
 80048a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048a8:	f7fc f8b0 	bl	8000a0c <__aeabi_dcmpun>
 80048ac:	bb70      	cbnz	r0, 800490c <_printf_float+0xc0>
 80048ae:	f04f 32ff 	mov.w	r2, #4294967295
 80048b2:	4650      	mov	r0, sl
 80048b4:	4b98      	ldr	r3, [pc, #608]	; (8004b18 <_printf_float+0x2cc>)
 80048b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048b8:	f7fc f88a 	bl	80009d0 <__aeabi_dcmple>
 80048bc:	bb30      	cbnz	r0, 800490c <_printf_float+0xc0>
 80048be:	2200      	movs	r2, #0
 80048c0:	2300      	movs	r3, #0
 80048c2:	4650      	mov	r0, sl
 80048c4:	4641      	mov	r1, r8
 80048c6:	f7fc f879 	bl	80009bc <__aeabi_dcmplt>
 80048ca:	b110      	cbz	r0, 80048d2 <_printf_float+0x86>
 80048cc:	232d      	movs	r3, #45	; 0x2d
 80048ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d2:	4a92      	ldr	r2, [pc, #584]	; (8004b1c <_printf_float+0x2d0>)
 80048d4:	4b92      	ldr	r3, [pc, #584]	; (8004b20 <_printf_float+0x2d4>)
 80048d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80048da:	bf94      	ite	ls
 80048dc:	4690      	movls	r8, r2
 80048de:	4698      	movhi	r8, r3
 80048e0:	2303      	movs	r3, #3
 80048e2:	f04f 0a00 	mov.w	sl, #0
 80048e6:	6123      	str	r3, [r4, #16]
 80048e8:	f02b 0304 	bic.w	r3, fp, #4
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	4633      	mov	r3, r6
 80048f0:	4621      	mov	r1, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	9700      	str	r7, [sp, #0]
 80048f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80048f8:	f000 f9d6 	bl	8004ca8 <_printf_common>
 80048fc:	3001      	adds	r0, #1
 80048fe:	f040 8090 	bne.w	8004a22 <_printf_float+0x1d6>
 8004902:	f04f 30ff 	mov.w	r0, #4294967295
 8004906:	b011      	add	sp, #68	; 0x44
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490c:	4652      	mov	r2, sl
 800490e:	4643      	mov	r3, r8
 8004910:	4650      	mov	r0, sl
 8004912:	4641      	mov	r1, r8
 8004914:	f7fc f87a 	bl	8000a0c <__aeabi_dcmpun>
 8004918:	b148      	cbz	r0, 800492e <_printf_float+0xe2>
 800491a:	f1b8 0f00 	cmp.w	r8, #0
 800491e:	bfb8      	it	lt
 8004920:	232d      	movlt	r3, #45	; 0x2d
 8004922:	4a80      	ldr	r2, [pc, #512]	; (8004b24 <_printf_float+0x2d8>)
 8004924:	bfb8      	it	lt
 8004926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800492a:	4b7f      	ldr	r3, [pc, #508]	; (8004b28 <_printf_float+0x2dc>)
 800492c:	e7d3      	b.n	80048d6 <_printf_float+0x8a>
 800492e:	6863      	ldr	r3, [r4, #4]
 8004930:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	d142      	bne.n	80049be <_printf_float+0x172>
 8004938:	2306      	movs	r3, #6
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	9206      	str	r2, [sp, #24]
 8004940:	aa0e      	add	r2, sp, #56	; 0x38
 8004942:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004946:	aa0d      	add	r2, sp, #52	; 0x34
 8004948:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800494c:	9203      	str	r2, [sp, #12]
 800494e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004952:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	6863      	ldr	r3, [r4, #4]
 800495a:	4652      	mov	r2, sl
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4628      	mov	r0, r5
 8004960:	4643      	mov	r3, r8
 8004962:	910b      	str	r1, [sp, #44]	; 0x2c
 8004964:	f7ff fed6 	bl	8004714 <__cvt>
 8004968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800496a:	4680      	mov	r8, r0
 800496c:	2947      	cmp	r1, #71	; 0x47
 800496e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004970:	d108      	bne.n	8004984 <_printf_float+0x138>
 8004972:	1cc8      	adds	r0, r1, #3
 8004974:	db02      	blt.n	800497c <_printf_float+0x130>
 8004976:	6863      	ldr	r3, [r4, #4]
 8004978:	4299      	cmp	r1, r3
 800497a:	dd40      	ble.n	80049fe <_printf_float+0x1b2>
 800497c:	f1a9 0902 	sub.w	r9, r9, #2
 8004980:	fa5f f989 	uxtb.w	r9, r9
 8004984:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004988:	d81f      	bhi.n	80049ca <_printf_float+0x17e>
 800498a:	464a      	mov	r2, r9
 800498c:	3901      	subs	r1, #1
 800498e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004992:	910d      	str	r1, [sp, #52]	; 0x34
 8004994:	f7ff ff1d 	bl	80047d2 <__exponent>
 8004998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800499a:	4682      	mov	sl, r0
 800499c:	1813      	adds	r3, r2, r0
 800499e:	2a01      	cmp	r2, #1
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	dc02      	bgt.n	80049aa <_printf_float+0x15e>
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	07d2      	lsls	r2, r2, #31
 80049a8:	d501      	bpl.n	80049ae <_printf_float+0x162>
 80049aa:	3301      	adds	r3, #1
 80049ac:	6123      	str	r3, [r4, #16]
 80049ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d09b      	beq.n	80048ee <_printf_float+0xa2>
 80049b6:	232d      	movs	r3, #45	; 0x2d
 80049b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049bc:	e797      	b.n	80048ee <_printf_float+0xa2>
 80049be:	2947      	cmp	r1, #71	; 0x47
 80049c0:	d1bc      	bne.n	800493c <_printf_float+0xf0>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ba      	bne.n	800493c <_printf_float+0xf0>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e7b7      	b.n	800493a <_printf_float+0xee>
 80049ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80049ce:	d118      	bne.n	8004a02 <_printf_float+0x1b6>
 80049d0:	2900      	cmp	r1, #0
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	dd0b      	ble.n	80049ee <_printf_float+0x1a2>
 80049d6:	6121      	str	r1, [r4, #16]
 80049d8:	b913      	cbnz	r3, 80049e0 <_printf_float+0x194>
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	07d0      	lsls	r0, r2, #31
 80049de:	d502      	bpl.n	80049e6 <_printf_float+0x19a>
 80049e0:	3301      	adds	r3, #1
 80049e2:	440b      	add	r3, r1
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	f04f 0a00 	mov.w	sl, #0
 80049ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80049ec:	e7df      	b.n	80049ae <_printf_float+0x162>
 80049ee:	b913      	cbnz	r3, 80049f6 <_printf_float+0x1aa>
 80049f0:	6822      	ldr	r2, [r4, #0]
 80049f2:	07d2      	lsls	r2, r2, #31
 80049f4:	d501      	bpl.n	80049fa <_printf_float+0x1ae>
 80049f6:	3302      	adds	r3, #2
 80049f8:	e7f4      	b.n	80049e4 <_printf_float+0x198>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7f2      	b.n	80049e4 <_printf_float+0x198>
 80049fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a04:	4299      	cmp	r1, r3
 8004a06:	db05      	blt.n	8004a14 <_printf_float+0x1c8>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	6121      	str	r1, [r4, #16]
 8004a0c:	07d8      	lsls	r0, r3, #31
 8004a0e:	d5ea      	bpl.n	80049e6 <_printf_float+0x19a>
 8004a10:	1c4b      	adds	r3, r1, #1
 8004a12:	e7e7      	b.n	80049e4 <_printf_float+0x198>
 8004a14:	2900      	cmp	r1, #0
 8004a16:	bfcc      	ite	gt
 8004a18:	2201      	movgt	r2, #1
 8004a1a:	f1c1 0202 	rsble	r2, r1, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	e7e0      	b.n	80049e4 <_printf_float+0x198>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	055a      	lsls	r2, r3, #21
 8004a26:	d407      	bmi.n	8004a38 <_printf_float+0x1ec>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b8      	blx	r7
 8004a32:	3001      	adds	r0, #1
 8004a34:	d12b      	bne.n	8004a8e <_printf_float+0x242>
 8004a36:	e764      	b.n	8004902 <_printf_float+0xb6>
 8004a38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a3c:	f240 80dd 	bls.w	8004bfa <_printf_float+0x3ae>
 8004a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	f7fb ffae 	bl	80009a8 <__aeabi_dcmpeq>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d033      	beq.n	8004ab8 <_printf_float+0x26c>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	4a35      	ldr	r2, [pc, #212]	; (8004b2c <_printf_float+0x2e0>)
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f af51 	beq.w	8004902 <_printf_float+0xb6>
 8004a60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a64:	429a      	cmp	r2, r3
 8004a66:	db02      	blt.n	8004a6e <_printf_float+0x222>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07d8      	lsls	r0, r3, #31
 8004a6c:	d50f      	bpl.n	8004a8e <_printf_float+0x242>
 8004a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f af42 	beq.w	8004902 <_printf_float+0xb6>
 8004a7e:	f04f 0800 	mov.w	r8, #0
 8004a82:	f104 091a 	add.w	r9, r4, #26
 8004a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	4543      	cmp	r3, r8
 8004a8c:	dc09      	bgt.n	8004aa2 <_printf_float+0x256>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	079b      	lsls	r3, r3, #30
 8004a92:	f100 8104 	bmi.w	8004c9e <_printf_float+0x452>
 8004a96:	68e0      	ldr	r0, [r4, #12]
 8004a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a9a:	4298      	cmp	r0, r3
 8004a9c:	bfb8      	it	lt
 8004a9e:	4618      	movlt	r0, r3
 8004aa0:	e731      	b.n	8004906 <_printf_float+0xba>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	464a      	mov	r2, r9
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	47b8      	blx	r7
 8004aac:	3001      	adds	r0, #1
 8004aae:	f43f af28 	beq.w	8004902 <_printf_float+0xb6>
 8004ab2:	f108 0801 	add.w	r8, r8, #1
 8004ab6:	e7e6      	b.n	8004a86 <_printf_float+0x23a>
 8004ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	dc38      	bgt.n	8004b30 <_printf_float+0x2e4>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <_printf_float+0x2e0>)
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f43f af1a 	beq.w	8004902 <_printf_float+0xb6>
 8004ace:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	d102      	bne.n	8004adc <_printf_float+0x290>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	07d9      	lsls	r1, r3, #31
 8004ada:	d5d8      	bpl.n	8004a8e <_printf_float+0x242>
 8004adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f43f af0b 	beq.w	8004902 <_printf_float+0xb6>
 8004aec:	f04f 0900 	mov.w	r9, #0
 8004af0:	f104 0a1a 	add.w	sl, r4, #26
 8004af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004af6:	425b      	negs	r3, r3
 8004af8:	454b      	cmp	r3, r9
 8004afa:	dc01      	bgt.n	8004b00 <_printf_float+0x2b4>
 8004afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004afe:	e794      	b.n	8004a2a <_printf_float+0x1de>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4652      	mov	r2, sl
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b8      	blx	r7
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	f43f aef9 	beq.w	8004902 <_printf_float+0xb6>
 8004b10:	f109 0901 	add.w	r9, r9, #1
 8004b14:	e7ee      	b.n	8004af4 <_printf_float+0x2a8>
 8004b16:	bf00      	nop
 8004b18:	7fefffff 	.word	0x7fefffff
 8004b1c:	0800838b 	.word	0x0800838b
 8004b20:	0800838f 	.word	0x0800838f
 8004b24:	08008393 	.word	0x08008393
 8004b28:	08008397 	.word	0x08008397
 8004b2c:	0800839b 	.word	0x0800839b
 8004b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b34:	429a      	cmp	r2, r3
 8004b36:	bfa8      	it	ge
 8004b38:	461a      	movge	r2, r3
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	4691      	mov	r9, r2
 8004b3e:	dc37      	bgt.n	8004bb0 <_printf_float+0x364>
 8004b40:	f04f 0b00 	mov.w	fp, #0
 8004b44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b48:	f104 021a 	add.w	r2, r4, #26
 8004b4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b50:	ebaa 0309 	sub.w	r3, sl, r9
 8004b54:	455b      	cmp	r3, fp
 8004b56:	dc33      	bgt.n	8004bc0 <_printf_float+0x374>
 8004b58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	db3b      	blt.n	8004bd8 <_printf_float+0x38c>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	07da      	lsls	r2, r3, #31
 8004b64:	d438      	bmi.n	8004bd8 <_printf_float+0x38c>
 8004b66:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004b6a:	eba2 0903 	sub.w	r9, r2, r3
 8004b6e:	eba2 020a 	sub.w	r2, r2, sl
 8004b72:	4591      	cmp	r9, r2
 8004b74:	bfa8      	it	ge
 8004b76:	4691      	movge	r9, r2
 8004b78:	f1b9 0f00 	cmp.w	r9, #0
 8004b7c:	dc34      	bgt.n	8004be8 <_printf_float+0x39c>
 8004b7e:	f04f 0800 	mov.w	r8, #0
 8004b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b86:	f104 0a1a 	add.w	sl, r4, #26
 8004b8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	eba3 0309 	sub.w	r3, r3, r9
 8004b94:	4543      	cmp	r3, r8
 8004b96:	f77f af7a 	ble.w	8004a8e <_printf_float+0x242>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b8      	blx	r7
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f43f aeac 	beq.w	8004902 <_printf_float+0xb6>
 8004baa:	f108 0801 	add.w	r8, r8, #1
 8004bae:	e7ec      	b.n	8004b8a <_printf_float+0x33e>
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	47b8      	blx	r7
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d1c0      	bne.n	8004b40 <_printf_float+0x2f4>
 8004bbe:	e6a0      	b.n	8004902 <_printf_float+0xb6>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004bc8:	47b8      	blx	r7
 8004bca:	3001      	adds	r0, #1
 8004bcc:	f43f ae99 	beq.w	8004902 <_printf_float+0xb6>
 8004bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bd2:	f10b 0b01 	add.w	fp, fp, #1
 8004bd6:	e7b9      	b.n	8004b4c <_printf_float+0x300>
 8004bd8:	4631      	mov	r1, r6
 8004bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	d1bf      	bne.n	8004b66 <_printf_float+0x31a>
 8004be6:	e68c      	b.n	8004902 <_printf_float+0xb6>
 8004be8:	464b      	mov	r3, r9
 8004bea:	4631      	mov	r1, r6
 8004bec:	4628      	mov	r0, r5
 8004bee:	eb08 020a 	add.w	r2, r8, sl
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d1c2      	bne.n	8004b7e <_printf_float+0x332>
 8004bf8:	e683      	b.n	8004902 <_printf_float+0xb6>
 8004bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bfc:	2a01      	cmp	r2, #1
 8004bfe:	dc01      	bgt.n	8004c04 <_printf_float+0x3b8>
 8004c00:	07db      	lsls	r3, r3, #31
 8004c02:	d539      	bpl.n	8004c78 <_printf_float+0x42c>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4642      	mov	r2, r8
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	f43f ae77 	beq.w	8004902 <_printf_float+0xb6>
 8004c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	47b8      	blx	r7
 8004c1e:	3001      	adds	r0, #1
 8004c20:	f43f ae6f 	beq.w	8004902 <_printf_float+0xb6>
 8004c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004c30:	f7fb feba 	bl	80009a8 <__aeabi_dcmpeq>
 8004c34:	b9d8      	cbnz	r0, 8004c6e <_printf_float+0x422>
 8004c36:	f109 33ff 	add.w	r3, r9, #4294967295
 8004c3a:	f108 0201 	add.w	r2, r8, #1
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	d10e      	bne.n	8004c66 <_printf_float+0x41a>
 8004c48:	e65b      	b.n	8004902 <_printf_float+0xb6>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	464a      	mov	r2, r9
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	f43f ae54 	beq.w	8004902 <_printf_float+0xb6>
 8004c5a:	f108 0801 	add.w	r8, r8, #1
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c60:	3b01      	subs	r3, #1
 8004c62:	4543      	cmp	r3, r8
 8004c64:	dcf1      	bgt.n	8004c4a <_printf_float+0x3fe>
 8004c66:	4653      	mov	r3, sl
 8004c68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c6c:	e6de      	b.n	8004a2c <_printf_float+0x1e0>
 8004c6e:	f04f 0800 	mov.w	r8, #0
 8004c72:	f104 091a 	add.w	r9, r4, #26
 8004c76:	e7f2      	b.n	8004c5e <_printf_float+0x412>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4642      	mov	r2, r8
 8004c7c:	e7df      	b.n	8004c3e <_printf_float+0x3f2>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	464a      	mov	r2, r9
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f ae3a 	beq.w	8004902 <_printf_float+0xb6>
 8004c8e:	f108 0801 	add.w	r8, r8, #1
 8004c92:	68e3      	ldr	r3, [r4, #12]
 8004c94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c96:	1a5b      	subs	r3, r3, r1
 8004c98:	4543      	cmp	r3, r8
 8004c9a:	dcf0      	bgt.n	8004c7e <_printf_float+0x432>
 8004c9c:	e6fb      	b.n	8004a96 <_printf_float+0x24a>
 8004c9e:	f04f 0800 	mov.w	r8, #0
 8004ca2:	f104 0919 	add.w	r9, r4, #25
 8004ca6:	e7f4      	b.n	8004c92 <_printf_float+0x446>

08004ca8 <_printf_common>:
 8004ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cac:	4616      	mov	r6, r2
 8004cae:	4699      	mov	r9, r3
 8004cb0:	688a      	ldr	r2, [r1, #8]
 8004cb2:	690b      	ldr	r3, [r1, #16]
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bfb8      	it	lt
 8004cba:	4613      	movlt	r3, r2
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc8:	b10a      	cbz	r2, 8004cce <_printf_common+0x26>
 8004cca:	3301      	adds	r3, #1
 8004ccc:	6033      	str	r3, [r6, #0]
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	0699      	lsls	r1, r3, #26
 8004cd2:	bf42      	ittt	mi
 8004cd4:	6833      	ldrmi	r3, [r6, #0]
 8004cd6:	3302      	addmi	r3, #2
 8004cd8:	6033      	strmi	r3, [r6, #0]
 8004cda:	6825      	ldr	r5, [r4, #0]
 8004cdc:	f015 0506 	ands.w	r5, r5, #6
 8004ce0:	d106      	bne.n	8004cf0 <_printf_common+0x48>
 8004ce2:	f104 0a19 	add.w	sl, r4, #25
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	6832      	ldr	r2, [r6, #0]
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dc2b      	bgt.n	8004d48 <_printf_common+0xa0>
 8004cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cf4:	1e13      	subs	r3, r2, #0
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	bf18      	it	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	0692      	lsls	r2, r2, #26
 8004cfe:	d430      	bmi.n	8004d62 <_printf_common+0xba>
 8004d00:	4649      	mov	r1, r9
 8004d02:	4638      	mov	r0, r7
 8004d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d08:	47c0      	blx	r8
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d023      	beq.n	8004d56 <_printf_common+0xae>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	6922      	ldr	r2, [r4, #16]
 8004d12:	f003 0306 	and.w	r3, r3, #6
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	bf14      	ite	ne
 8004d1a:	2500      	movne	r5, #0
 8004d1c:	6833      	ldreq	r3, [r6, #0]
 8004d1e:	f04f 0600 	mov.w	r6, #0
 8004d22:	bf08      	it	eq
 8004d24:	68e5      	ldreq	r5, [r4, #12]
 8004d26:	f104 041a 	add.w	r4, r4, #26
 8004d2a:	bf08      	it	eq
 8004d2c:	1aed      	subeq	r5, r5, r3
 8004d2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d32:	bf08      	it	eq
 8004d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	bfc4      	itt	gt
 8004d3c:	1a9b      	subgt	r3, r3, r2
 8004d3e:	18ed      	addgt	r5, r5, r3
 8004d40:	42b5      	cmp	r5, r6
 8004d42:	d11a      	bne.n	8004d7a <_printf_common+0xd2>
 8004d44:	2000      	movs	r0, #0
 8004d46:	e008      	b.n	8004d5a <_printf_common+0xb2>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4652      	mov	r2, sl
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d103      	bne.n	8004d5e <_printf_common+0xb6>
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	3501      	adds	r5, #1
 8004d60:	e7c1      	b.n	8004ce6 <_printf_common+0x3e>
 8004d62:	2030      	movs	r0, #48	; 0x30
 8004d64:	18e1      	adds	r1, r4, r3
 8004d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d70:	4422      	add	r2, r4
 8004d72:	3302      	adds	r3, #2
 8004d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d78:	e7c2      	b.n	8004d00 <_printf_common+0x58>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4638      	mov	r0, r7
 8004d82:	47c0      	blx	r8
 8004d84:	3001      	adds	r0, #1
 8004d86:	d0e6      	beq.n	8004d56 <_printf_common+0xae>
 8004d88:	3601      	adds	r6, #1
 8004d8a:	e7d9      	b.n	8004d40 <_printf_common+0x98>

08004d8c <_printf_i>:
 8004d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	7e0f      	ldrb	r7, [r1, #24]
 8004d92:	4691      	mov	r9, r2
 8004d94:	2f78      	cmp	r7, #120	; 0x78
 8004d96:	4680      	mov	r8, r0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	469a      	mov	sl, r3
 8004d9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004da2:	d807      	bhi.n	8004db4 <_printf_i+0x28>
 8004da4:	2f62      	cmp	r7, #98	; 0x62
 8004da6:	d80a      	bhi.n	8004dbe <_printf_i+0x32>
 8004da8:	2f00      	cmp	r7, #0
 8004daa:	f000 80d5 	beq.w	8004f58 <_printf_i+0x1cc>
 8004dae:	2f58      	cmp	r7, #88	; 0x58
 8004db0:	f000 80c1 	beq.w	8004f36 <_printf_i+0x1aa>
 8004db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dbc:	e03a      	b.n	8004e34 <_printf_i+0xa8>
 8004dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dc2:	2b15      	cmp	r3, #21
 8004dc4:	d8f6      	bhi.n	8004db4 <_printf_i+0x28>
 8004dc6:	a101      	add	r1, pc, #4	; (adr r1, 8004dcc <_printf_i+0x40>)
 8004dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dcc:	08004e25 	.word	0x08004e25
 8004dd0:	08004e39 	.word	0x08004e39
 8004dd4:	08004db5 	.word	0x08004db5
 8004dd8:	08004db5 	.word	0x08004db5
 8004ddc:	08004db5 	.word	0x08004db5
 8004de0:	08004db5 	.word	0x08004db5
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004db5 	.word	0x08004db5
 8004dec:	08004db5 	.word	0x08004db5
 8004df0:	08004db5 	.word	0x08004db5
 8004df4:	08004db5 	.word	0x08004db5
 8004df8:	08004f3f 	.word	0x08004f3f
 8004dfc:	08004e65 	.word	0x08004e65
 8004e00:	08004ef9 	.word	0x08004ef9
 8004e04:	08004db5 	.word	0x08004db5
 8004e08:	08004db5 	.word	0x08004db5
 8004e0c:	08004f61 	.word	0x08004f61
 8004e10:	08004db5 	.word	0x08004db5
 8004e14:	08004e65 	.word	0x08004e65
 8004e18:	08004db5 	.word	0x08004db5
 8004e1c:	08004db5 	.word	0x08004db5
 8004e20:	08004f01 	.word	0x08004f01
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	1d1a      	adds	r2, r3, #4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	602a      	str	r2, [r5, #0]
 8004e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0a0      	b.n	8004f7a <_printf_i+0x1ee>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	0607      	lsls	r7, r0, #24
 8004e3e:	f103 0104 	add.w	r1, r3, #4
 8004e42:	6029      	str	r1, [r5, #0]
 8004e44:	d501      	bpl.n	8004e4a <_printf_i+0xbe>
 8004e46:	681e      	ldr	r6, [r3, #0]
 8004e48:	e003      	b.n	8004e52 <_printf_i+0xc6>
 8004e4a:	0646      	lsls	r6, r0, #25
 8004e4c:	d5fb      	bpl.n	8004e46 <_printf_i+0xba>
 8004e4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	da03      	bge.n	8004e5e <_printf_i+0xd2>
 8004e56:	232d      	movs	r3, #45	; 0x2d
 8004e58:	4276      	negs	r6, r6
 8004e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e5e:	230a      	movs	r3, #10
 8004e60:	4859      	ldr	r0, [pc, #356]	; (8004fc8 <_printf_i+0x23c>)
 8004e62:	e012      	b.n	8004e8a <_printf_i+0xfe>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	1d19      	adds	r1, r3, #4
 8004e6a:	6029      	str	r1, [r5, #0]
 8004e6c:	0605      	lsls	r5, r0, #24
 8004e6e:	d501      	bpl.n	8004e74 <_printf_i+0xe8>
 8004e70:	681e      	ldr	r6, [r3, #0]
 8004e72:	e002      	b.n	8004e7a <_printf_i+0xee>
 8004e74:	0641      	lsls	r1, r0, #25
 8004e76:	d5fb      	bpl.n	8004e70 <_printf_i+0xe4>
 8004e78:	881e      	ldrh	r6, [r3, #0]
 8004e7a:	2f6f      	cmp	r7, #111	; 0x6f
 8004e7c:	bf0c      	ite	eq
 8004e7e:	2308      	moveq	r3, #8
 8004e80:	230a      	movne	r3, #10
 8004e82:	4851      	ldr	r0, [pc, #324]	; (8004fc8 <_printf_i+0x23c>)
 8004e84:	2100      	movs	r1, #0
 8004e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e8a:	6865      	ldr	r5, [r4, #4]
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	bfa8      	it	ge
 8004e90:	6821      	ldrge	r1, [r4, #0]
 8004e92:	60a5      	str	r5, [r4, #8]
 8004e94:	bfa4      	itt	ge
 8004e96:	f021 0104 	bicge.w	r1, r1, #4
 8004e9a:	6021      	strge	r1, [r4, #0]
 8004e9c:	b90e      	cbnz	r6, 8004ea2 <_printf_i+0x116>
 8004e9e:	2d00      	cmp	r5, #0
 8004ea0:	d04b      	beq.n	8004f3a <_printf_i+0x1ae>
 8004ea2:	4615      	mov	r5, r2
 8004ea4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ea8:	fb03 6711 	mls	r7, r3, r1, r6
 8004eac:	5dc7      	ldrb	r7, [r0, r7]
 8004eae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004eb2:	4637      	mov	r7, r6
 8004eb4:	42bb      	cmp	r3, r7
 8004eb6:	460e      	mov	r6, r1
 8004eb8:	d9f4      	bls.n	8004ea4 <_printf_i+0x118>
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d10b      	bne.n	8004ed6 <_printf_i+0x14a>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	07de      	lsls	r6, r3, #31
 8004ec2:	d508      	bpl.n	8004ed6 <_printf_i+0x14a>
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	6861      	ldr	r1, [r4, #4]
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	bfde      	ittt	le
 8004ecc:	2330      	movle	r3, #48	; 0x30
 8004ece:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ed2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ed6:	1b52      	subs	r2, r2, r5
 8004ed8:	6122      	str	r2, [r4, #16]
 8004eda:	464b      	mov	r3, r9
 8004edc:	4621      	mov	r1, r4
 8004ede:	4640      	mov	r0, r8
 8004ee0:	f8cd a000 	str.w	sl, [sp]
 8004ee4:	aa03      	add	r2, sp, #12
 8004ee6:	f7ff fedf 	bl	8004ca8 <_printf_common>
 8004eea:	3001      	adds	r0, #1
 8004eec:	d14a      	bne.n	8004f84 <_printf_i+0x1f8>
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef2:	b004      	add	sp, #16
 8004ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	f043 0320 	orr.w	r3, r3, #32
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	2778      	movs	r7, #120	; 0x78
 8004f02:	4832      	ldr	r0, [pc, #200]	; (8004fcc <_printf_i+0x240>)
 8004f04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	6829      	ldr	r1, [r5, #0]
 8004f0c:	061f      	lsls	r7, r3, #24
 8004f0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f12:	d402      	bmi.n	8004f1a <_printf_i+0x18e>
 8004f14:	065f      	lsls	r7, r3, #25
 8004f16:	bf48      	it	mi
 8004f18:	b2b6      	uxthmi	r6, r6
 8004f1a:	07df      	lsls	r7, r3, #31
 8004f1c:	bf48      	it	mi
 8004f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f22:	6029      	str	r1, [r5, #0]
 8004f24:	bf48      	it	mi
 8004f26:	6023      	strmi	r3, [r4, #0]
 8004f28:	b91e      	cbnz	r6, 8004f32 <_printf_i+0x1a6>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	f023 0320 	bic.w	r3, r3, #32
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	2310      	movs	r3, #16
 8004f34:	e7a6      	b.n	8004e84 <_printf_i+0xf8>
 8004f36:	4824      	ldr	r0, [pc, #144]	; (8004fc8 <_printf_i+0x23c>)
 8004f38:	e7e4      	b.n	8004f04 <_printf_i+0x178>
 8004f3a:	4615      	mov	r5, r2
 8004f3c:	e7bd      	b.n	8004eba <_printf_i+0x12e>
 8004f3e:	682b      	ldr	r3, [r5, #0]
 8004f40:	6826      	ldr	r6, [r4, #0]
 8004f42:	1d18      	adds	r0, r3, #4
 8004f44:	6961      	ldr	r1, [r4, #20]
 8004f46:	6028      	str	r0, [r5, #0]
 8004f48:	0635      	lsls	r5, r6, #24
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	d501      	bpl.n	8004f52 <_printf_i+0x1c6>
 8004f4e:	6019      	str	r1, [r3, #0]
 8004f50:	e002      	b.n	8004f58 <_printf_i+0x1cc>
 8004f52:	0670      	lsls	r0, r6, #25
 8004f54:	d5fb      	bpl.n	8004f4e <_printf_i+0x1c2>
 8004f56:	8019      	strh	r1, [r3, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4615      	mov	r5, r2
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	e7bc      	b.n	8004eda <_printf_i+0x14e>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	2100      	movs	r1, #0
 8004f64:	1d1a      	adds	r2, r3, #4
 8004f66:	602a      	str	r2, [r5, #0]
 8004f68:	681d      	ldr	r5, [r3, #0]
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 f9c1 	bl	80052f4 <memchr>
 8004f72:	b108      	cbz	r0, 8004f78 <_printf_i+0x1ec>
 8004f74:	1b40      	subs	r0, r0, r5
 8004f76:	6060      	str	r0, [r4, #4]
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f82:	e7aa      	b.n	8004eda <_printf_i+0x14e>
 8004f84:	462a      	mov	r2, r5
 8004f86:	4649      	mov	r1, r9
 8004f88:	4640      	mov	r0, r8
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	47d0      	blx	sl
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d0ad      	beq.n	8004eee <_printf_i+0x162>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	079b      	lsls	r3, r3, #30
 8004f96:	d413      	bmi.n	8004fc0 <_printf_i+0x234>
 8004f98:	68e0      	ldr	r0, [r4, #12]
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	4298      	cmp	r0, r3
 8004f9e:	bfb8      	it	lt
 8004fa0:	4618      	movlt	r0, r3
 8004fa2:	e7a6      	b.n	8004ef2 <_printf_i+0x166>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4649      	mov	r1, r9
 8004faa:	4640      	mov	r0, r8
 8004fac:	47d0      	blx	sl
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d09d      	beq.n	8004eee <_printf_i+0x162>
 8004fb2:	3501      	adds	r5, #1
 8004fb4:	68e3      	ldr	r3, [r4, #12]
 8004fb6:	9903      	ldr	r1, [sp, #12]
 8004fb8:	1a5b      	subs	r3, r3, r1
 8004fba:	42ab      	cmp	r3, r5
 8004fbc:	dcf2      	bgt.n	8004fa4 <_printf_i+0x218>
 8004fbe:	e7eb      	b.n	8004f98 <_printf_i+0x20c>
 8004fc0:	2500      	movs	r5, #0
 8004fc2:	f104 0619 	add.w	r6, r4, #25
 8004fc6:	e7f5      	b.n	8004fb4 <_printf_i+0x228>
 8004fc8:	0800839d 	.word	0x0800839d
 8004fcc:	080083ae 	.word	0x080083ae

08004fd0 <std>:
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fde:	6083      	str	r3, [r0, #8]
 8004fe0:	8181      	strh	r1, [r0, #12]
 8004fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fe4:	81c2      	strh	r2, [r0, #14]
 8004fe6:	6183      	str	r3, [r0, #24]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	2208      	movs	r2, #8
 8004fec:	305c      	adds	r0, #92	; 0x5c
 8004fee:	f000 f902 	bl	80051f6 <memset>
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <std+0x38>)
 8004ff4:	6224      	str	r4, [r4, #32]
 8004ff6:	6263      	str	r3, [r4, #36]	; 0x24
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <std+0x3c>)
 8004ffa:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <std+0x40>)
 8004ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <std+0x44>)
 8005002:	6323      	str	r3, [r4, #48]	; 0x30
 8005004:	bd10      	pop	{r4, pc}
 8005006:	bf00      	nop
 8005008:	08005171 	.word	0x08005171
 800500c:	08005193 	.word	0x08005193
 8005010:	080051cb 	.word	0x080051cb
 8005014:	080051ef 	.word	0x080051ef

08005018 <stdio_exit_handler>:
 8005018:	4a02      	ldr	r2, [pc, #8]	; (8005024 <stdio_exit_handler+0xc>)
 800501a:	4903      	ldr	r1, [pc, #12]	; (8005028 <stdio_exit_handler+0x10>)
 800501c:	4803      	ldr	r0, [pc, #12]	; (800502c <stdio_exit_handler+0x14>)
 800501e:	f000 b869 	b.w	80050f4 <_fwalk_sglue>
 8005022:	bf00      	nop
 8005024:	20000014 	.word	0x20000014
 8005028:	08006c8d 	.word	0x08006c8d
 800502c:	20000020 	.word	0x20000020

08005030 <cleanup_stdio>:
 8005030:	6841      	ldr	r1, [r0, #4]
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <cleanup_stdio+0x34>)
 8005034:	b510      	push	{r4, lr}
 8005036:	4299      	cmp	r1, r3
 8005038:	4604      	mov	r4, r0
 800503a:	d001      	beq.n	8005040 <cleanup_stdio+0x10>
 800503c:	f001 fe26 	bl	8006c8c <_fflush_r>
 8005040:	68a1      	ldr	r1, [r4, #8]
 8005042:	4b09      	ldr	r3, [pc, #36]	; (8005068 <cleanup_stdio+0x38>)
 8005044:	4299      	cmp	r1, r3
 8005046:	d002      	beq.n	800504e <cleanup_stdio+0x1e>
 8005048:	4620      	mov	r0, r4
 800504a:	f001 fe1f 	bl	8006c8c <_fflush_r>
 800504e:	68e1      	ldr	r1, [r4, #12]
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <cleanup_stdio+0x3c>)
 8005052:	4299      	cmp	r1, r3
 8005054:	d004      	beq.n	8005060 <cleanup_stdio+0x30>
 8005056:	4620      	mov	r0, r4
 8005058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800505c:	f001 be16 	b.w	8006c8c <_fflush_r>
 8005060:	bd10      	pop	{r4, pc}
 8005062:	bf00      	nop
 8005064:	20000ca8 	.word	0x20000ca8
 8005068:	20000d10 	.word	0x20000d10
 800506c:	20000d78 	.word	0x20000d78

08005070 <global_stdio_init.part.0>:
 8005070:	b510      	push	{r4, lr}
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <global_stdio_init.part.0+0x30>)
 8005074:	4c0b      	ldr	r4, [pc, #44]	; (80050a4 <global_stdio_init.part.0+0x34>)
 8005076:	4a0c      	ldr	r2, [pc, #48]	; (80050a8 <global_stdio_init.part.0+0x38>)
 8005078:	4620      	mov	r0, r4
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	2104      	movs	r1, #4
 800507e:	2200      	movs	r2, #0
 8005080:	f7ff ffa6 	bl	8004fd0 <std>
 8005084:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005088:	2201      	movs	r2, #1
 800508a:	2109      	movs	r1, #9
 800508c:	f7ff ffa0 	bl	8004fd0 <std>
 8005090:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005094:	2202      	movs	r2, #2
 8005096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509a:	2112      	movs	r1, #18
 800509c:	f7ff bf98 	b.w	8004fd0 <std>
 80050a0:	20000de0 	.word	0x20000de0
 80050a4:	20000ca8 	.word	0x20000ca8
 80050a8:	08005019 	.word	0x08005019

080050ac <__sfp_lock_acquire>:
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <__sfp_lock_acquire+0x8>)
 80050ae:	f000 b91f 	b.w	80052f0 <__retarget_lock_acquire_recursive>
 80050b2:	bf00      	nop
 80050b4:	20000de9 	.word	0x20000de9

080050b8 <__sfp_lock_release>:
 80050b8:	4801      	ldr	r0, [pc, #4]	; (80050c0 <__sfp_lock_release+0x8>)
 80050ba:	f000 b91a 	b.w	80052f2 <__retarget_lock_release_recursive>
 80050be:	bf00      	nop
 80050c0:	20000de9 	.word	0x20000de9

080050c4 <__sinit>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4604      	mov	r4, r0
 80050c8:	f7ff fff0 	bl	80050ac <__sfp_lock_acquire>
 80050cc:	6a23      	ldr	r3, [r4, #32]
 80050ce:	b11b      	cbz	r3, 80050d8 <__sinit+0x14>
 80050d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d4:	f7ff bff0 	b.w	80050b8 <__sfp_lock_release>
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <__sinit+0x28>)
 80050da:	6223      	str	r3, [r4, #32]
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <__sinit+0x2c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f5      	bne.n	80050d0 <__sinit+0xc>
 80050e4:	f7ff ffc4 	bl	8005070 <global_stdio_init.part.0>
 80050e8:	e7f2      	b.n	80050d0 <__sinit+0xc>
 80050ea:	bf00      	nop
 80050ec:	08005031 	.word	0x08005031
 80050f0:	20000de0 	.word	0x20000de0

080050f4 <_fwalk_sglue>:
 80050f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f8:	4607      	mov	r7, r0
 80050fa:	4688      	mov	r8, r1
 80050fc:	4614      	mov	r4, r2
 80050fe:	2600      	movs	r6, #0
 8005100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005104:	f1b9 0901 	subs.w	r9, r9, #1
 8005108:	d505      	bpl.n	8005116 <_fwalk_sglue+0x22>
 800510a:	6824      	ldr	r4, [r4, #0]
 800510c:	2c00      	cmp	r4, #0
 800510e:	d1f7      	bne.n	8005100 <_fwalk_sglue+0xc>
 8005110:	4630      	mov	r0, r6
 8005112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005116:	89ab      	ldrh	r3, [r5, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d907      	bls.n	800512c <_fwalk_sglue+0x38>
 800511c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005120:	3301      	adds	r3, #1
 8005122:	d003      	beq.n	800512c <_fwalk_sglue+0x38>
 8005124:	4629      	mov	r1, r5
 8005126:	4638      	mov	r0, r7
 8005128:	47c0      	blx	r8
 800512a:	4306      	orrs	r6, r0
 800512c:	3568      	adds	r5, #104	; 0x68
 800512e:	e7e9      	b.n	8005104 <_fwalk_sglue+0x10>

08005130 <siprintf>:
 8005130:	b40e      	push	{r1, r2, r3}
 8005132:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005136:	b500      	push	{lr}
 8005138:	b09c      	sub	sp, #112	; 0x70
 800513a:	ab1d      	add	r3, sp, #116	; 0x74
 800513c:	9002      	str	r0, [sp, #8]
 800513e:	9006      	str	r0, [sp, #24]
 8005140:	9107      	str	r1, [sp, #28]
 8005142:	9104      	str	r1, [sp, #16]
 8005144:	4808      	ldr	r0, [pc, #32]	; (8005168 <siprintf+0x38>)
 8005146:	4909      	ldr	r1, [pc, #36]	; (800516c <siprintf+0x3c>)
 8005148:	f853 2b04 	ldr.w	r2, [r3], #4
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	6800      	ldr	r0, [r0, #0]
 8005150:	a902      	add	r1, sp, #8
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	f001 fc1a 	bl	800698c <_svfiprintf_r>
 8005158:	2200      	movs	r2, #0
 800515a:	9b02      	ldr	r3, [sp, #8]
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	b01c      	add	sp, #112	; 0x70
 8005160:	f85d eb04 	ldr.w	lr, [sp], #4
 8005164:	b003      	add	sp, #12
 8005166:	4770      	bx	lr
 8005168:	2000006c 	.word	0x2000006c
 800516c:	ffff0208 	.word	0xffff0208

08005170 <__sread>:
 8005170:	b510      	push	{r4, lr}
 8005172:	460c      	mov	r4, r1
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	f000 f86c 	bl	8005254 <_read_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	bfab      	itete	ge
 8005180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005182:	89a3      	ldrhlt	r3, [r4, #12]
 8005184:	181b      	addge	r3, r3, r0
 8005186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800518a:	bfac      	ite	ge
 800518c:	6563      	strge	r3, [r4, #84]	; 0x54
 800518e:	81a3      	strhlt	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__swrite>:
 8005192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	461f      	mov	r7, r3
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	4605      	mov	r5, r0
 800519c:	05db      	lsls	r3, r3, #23
 800519e:	460c      	mov	r4, r1
 80051a0:	4616      	mov	r6, r2
 80051a2:	d505      	bpl.n	80051b0 <__swrite+0x1e>
 80051a4:	2302      	movs	r3, #2
 80051a6:	2200      	movs	r2, #0
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	f000 f840 	bl	8005230 <_lseek_r>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	4632      	mov	r2, r6
 80051b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	4628      	mov	r0, r5
 80051bc:	463b      	mov	r3, r7
 80051be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	f000 b857 	b.w	8005278 <_write_r>

080051ca <__sseek>:
 80051ca:	b510      	push	{r4, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 f82d 	bl	8005230 <_lseek_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	bf15      	itete	ne
 80051dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051e6:	81a3      	strheq	r3, [r4, #12]
 80051e8:	bf18      	it	ne
 80051ea:	81a3      	strhne	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__sclose>:
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	f000 b80d 	b.w	8005210 <_close_r>

080051f6 <memset>:
 80051f6:	4603      	mov	r3, r0
 80051f8:	4402      	add	r2, r0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d100      	bne.n	8005200 <memset+0xa>
 80051fe:	4770      	bx	lr
 8005200:	f803 1b01 	strb.w	r1, [r3], #1
 8005204:	e7f9      	b.n	80051fa <memset+0x4>
	...

08005208 <_localeconv_r>:
 8005208:	4800      	ldr	r0, [pc, #0]	; (800520c <_localeconv_r+0x4>)
 800520a:	4770      	bx	lr
 800520c:	20000160 	.word	0x20000160

08005210 <_close_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	2300      	movs	r3, #0
 8005214:	4d05      	ldr	r5, [pc, #20]	; (800522c <_close_r+0x1c>)
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	f7fd fca2 	bl	8002b64 <_close>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_close_r+0x1a>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_close_r+0x1a>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	20000de4 	.word	0x20000de4

08005230 <_lseek_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	2200      	movs	r2, #0
 800523a:	4d05      	ldr	r5, [pc, #20]	; (8005250 <_lseek_r+0x20>)
 800523c:	602a      	str	r2, [r5, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f7fd fcb4 	bl	8002bac <_lseek>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_lseek_r+0x1e>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_lseek_r+0x1e>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	20000de4 	.word	0x20000de4

08005254 <_read_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	2200      	movs	r2, #0
 800525e:	4d05      	ldr	r5, [pc, #20]	; (8005274 <_read_r+0x20>)
 8005260:	602a      	str	r2, [r5, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f7fd fc45 	bl	8002af2 <_read>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_read_r+0x1e>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_read_r+0x1e>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	20000de4 	.word	0x20000de4

08005278 <_write_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	2200      	movs	r2, #0
 8005282:	4d05      	ldr	r5, [pc, #20]	; (8005298 <_write_r+0x20>)
 8005284:	602a      	str	r2, [r5, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	f7fd fc50 	bl	8002b2c <_write>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_write_r+0x1e>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_write_r+0x1e>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	20000de4 	.word	0x20000de4

0800529c <__errno>:
 800529c:	4b01      	ldr	r3, [pc, #4]	; (80052a4 <__errno+0x8>)
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	2000006c 	.word	0x2000006c

080052a8 <__libc_init_array>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	2600      	movs	r6, #0
 80052ac:	4d0c      	ldr	r5, [pc, #48]	; (80052e0 <__libc_init_array+0x38>)
 80052ae:	4c0d      	ldr	r4, [pc, #52]	; (80052e4 <__libc_init_array+0x3c>)
 80052b0:	1b64      	subs	r4, r4, r5
 80052b2:	10a4      	asrs	r4, r4, #2
 80052b4:	42a6      	cmp	r6, r4
 80052b6:	d109      	bne.n	80052cc <__libc_init_array+0x24>
 80052b8:	f002 ff90 	bl	80081dc <_init>
 80052bc:	2600      	movs	r6, #0
 80052be:	4d0a      	ldr	r5, [pc, #40]	; (80052e8 <__libc_init_array+0x40>)
 80052c0:	4c0a      	ldr	r4, [pc, #40]	; (80052ec <__libc_init_array+0x44>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	d105      	bne.n	80052d6 <__libc_init_array+0x2e>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d0:	4798      	blx	r3
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7ee      	b.n	80052b4 <__libc_init_array+0xc>
 80052d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052da:	4798      	blx	r3
 80052dc:	3601      	adds	r6, #1
 80052de:	e7f2      	b.n	80052c6 <__libc_init_array+0x1e>
 80052e0:	08008630 	.word	0x08008630
 80052e4:	08008630 	.word	0x08008630
 80052e8:	08008630 	.word	0x08008630
 80052ec:	08008634 	.word	0x08008634

080052f0 <__retarget_lock_acquire_recursive>:
 80052f0:	4770      	bx	lr

080052f2 <__retarget_lock_release_recursive>:
 80052f2:	4770      	bx	lr

080052f4 <memchr>:
 80052f4:	4603      	mov	r3, r0
 80052f6:	b510      	push	{r4, lr}
 80052f8:	b2c9      	uxtb	r1, r1
 80052fa:	4402      	add	r2, r0
 80052fc:	4293      	cmp	r3, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	d101      	bne.n	8005306 <memchr+0x12>
 8005302:	2000      	movs	r0, #0
 8005304:	e003      	b.n	800530e <memchr+0x1a>
 8005306:	7804      	ldrb	r4, [r0, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	428c      	cmp	r4, r1
 800530c:	d1f6      	bne.n	80052fc <memchr+0x8>
 800530e:	bd10      	pop	{r4, pc}

08005310 <quorem>:
 8005310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	6903      	ldr	r3, [r0, #16]
 8005316:	690c      	ldr	r4, [r1, #16]
 8005318:	4607      	mov	r7, r0
 800531a:	42a3      	cmp	r3, r4
 800531c:	db7f      	blt.n	800541e <quorem+0x10e>
 800531e:	3c01      	subs	r4, #1
 8005320:	f100 0514 	add.w	r5, r0, #20
 8005324:	f101 0814 	add.w	r8, r1, #20
 8005328:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005332:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005336:	3301      	adds	r3, #1
 8005338:	429a      	cmp	r2, r3
 800533a:	fbb2 f6f3 	udiv	r6, r2, r3
 800533e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005342:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005346:	d331      	bcc.n	80053ac <quorem+0x9c>
 8005348:	f04f 0e00 	mov.w	lr, #0
 800534c:	4640      	mov	r0, r8
 800534e:	46ac      	mov	ip, r5
 8005350:	46f2      	mov	sl, lr
 8005352:	f850 2b04 	ldr.w	r2, [r0], #4
 8005356:	b293      	uxth	r3, r2
 8005358:	fb06 e303 	mla	r3, r6, r3, lr
 800535c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005360:	0c1a      	lsrs	r2, r3, #16
 8005362:	b29b      	uxth	r3, r3
 8005364:	fb06 220e 	mla	r2, r6, lr, r2
 8005368:	ebaa 0303 	sub.w	r3, sl, r3
 800536c:	f8dc a000 	ldr.w	sl, [ip]
 8005370:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005374:	fa1f fa8a 	uxth.w	sl, sl
 8005378:	4453      	add	r3, sl
 800537a:	f8dc a000 	ldr.w	sl, [ip]
 800537e:	b292      	uxth	r2, r2
 8005380:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005388:	b29b      	uxth	r3, r3
 800538a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800538e:	4581      	cmp	r9, r0
 8005390:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005394:	f84c 3b04 	str.w	r3, [ip], #4
 8005398:	d2db      	bcs.n	8005352 <quorem+0x42>
 800539a:	f855 300b 	ldr.w	r3, [r5, fp]
 800539e:	b92b      	cbnz	r3, 80053ac <quorem+0x9c>
 80053a0:	9b01      	ldr	r3, [sp, #4]
 80053a2:	3b04      	subs	r3, #4
 80053a4:	429d      	cmp	r5, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	d32d      	bcc.n	8005406 <quorem+0xf6>
 80053aa:	613c      	str	r4, [r7, #16]
 80053ac:	4638      	mov	r0, r7
 80053ae:	f001 f995 	bl	80066dc <__mcmp>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	db23      	blt.n	80053fe <quorem+0xee>
 80053b6:	4629      	mov	r1, r5
 80053b8:	2000      	movs	r0, #0
 80053ba:	3601      	adds	r6, #1
 80053bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80053c0:	f8d1 c000 	ldr.w	ip, [r1]
 80053c4:	b293      	uxth	r3, r2
 80053c6:	1ac3      	subs	r3, r0, r3
 80053c8:	0c12      	lsrs	r2, r2, #16
 80053ca:	fa1f f08c 	uxth.w	r0, ip
 80053ce:	4403      	add	r3, r0
 80053d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80053d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d8:	b29b      	uxth	r3, r3
 80053da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053de:	45c1      	cmp	r9, r8
 80053e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053e4:	f841 3b04 	str.w	r3, [r1], #4
 80053e8:	d2e8      	bcs.n	80053bc <quorem+0xac>
 80053ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053f2:	b922      	cbnz	r2, 80053fe <quorem+0xee>
 80053f4:	3b04      	subs	r3, #4
 80053f6:	429d      	cmp	r5, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	d30a      	bcc.n	8005412 <quorem+0x102>
 80053fc:	613c      	str	r4, [r7, #16]
 80053fe:	4630      	mov	r0, r6
 8005400:	b003      	add	sp, #12
 8005402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	3b04      	subs	r3, #4
 800540a:	2a00      	cmp	r2, #0
 800540c:	d1cd      	bne.n	80053aa <quorem+0x9a>
 800540e:	3c01      	subs	r4, #1
 8005410:	e7c8      	b.n	80053a4 <quorem+0x94>
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	3b04      	subs	r3, #4
 8005416:	2a00      	cmp	r2, #0
 8005418:	d1f0      	bne.n	80053fc <quorem+0xec>
 800541a:	3c01      	subs	r4, #1
 800541c:	e7eb      	b.n	80053f6 <quorem+0xe6>
 800541e:	2000      	movs	r0, #0
 8005420:	e7ee      	b.n	8005400 <quorem+0xf0>
 8005422:	0000      	movs	r0, r0
 8005424:	0000      	movs	r0, r0
	...

08005428 <_dtoa_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	4616      	mov	r6, r2
 800542e:	461f      	mov	r7, r3
 8005430:	69c4      	ldr	r4, [r0, #28]
 8005432:	b099      	sub	sp, #100	; 0x64
 8005434:	4605      	mov	r5, r0
 8005436:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800543a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800543e:	b974      	cbnz	r4, 800545e <_dtoa_r+0x36>
 8005440:	2010      	movs	r0, #16
 8005442:	f000 fe1d 	bl	8006080 <malloc>
 8005446:	4602      	mov	r2, r0
 8005448:	61e8      	str	r0, [r5, #28]
 800544a:	b920      	cbnz	r0, 8005456 <_dtoa_r+0x2e>
 800544c:	21ef      	movs	r1, #239	; 0xef
 800544e:	4bac      	ldr	r3, [pc, #688]	; (8005700 <_dtoa_r+0x2d8>)
 8005450:	48ac      	ldr	r0, [pc, #688]	; (8005704 <_dtoa_r+0x2dc>)
 8005452:	f001 fc7b 	bl	8006d4c <__assert_func>
 8005456:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800545a:	6004      	str	r4, [r0, #0]
 800545c:	60c4      	str	r4, [r0, #12]
 800545e:	69eb      	ldr	r3, [r5, #28]
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	b151      	cbz	r1, 800547a <_dtoa_r+0x52>
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	2301      	movs	r3, #1
 8005468:	4093      	lsls	r3, r2
 800546a:	604a      	str	r2, [r1, #4]
 800546c:	608b      	str	r3, [r1, #8]
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fefa 	bl	8006268 <_Bfree>
 8005474:	2200      	movs	r2, #0
 8005476:	69eb      	ldr	r3, [r5, #28]
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	1e3b      	subs	r3, r7, #0
 800547c:	bfaf      	iteee	ge
 800547e:	2300      	movge	r3, #0
 8005480:	2201      	movlt	r2, #1
 8005482:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005486:	9305      	strlt	r3, [sp, #20]
 8005488:	bfa8      	it	ge
 800548a:	f8c8 3000 	strge.w	r3, [r8]
 800548e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005492:	4b9d      	ldr	r3, [pc, #628]	; (8005708 <_dtoa_r+0x2e0>)
 8005494:	bfb8      	it	lt
 8005496:	f8c8 2000 	strlt.w	r2, [r8]
 800549a:	ea33 0309 	bics.w	r3, r3, r9
 800549e:	d119      	bne.n	80054d4 <_dtoa_r+0xac>
 80054a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80054a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054ac:	4333      	orrs	r3, r6
 80054ae:	f000 8589 	beq.w	8005fc4 <_dtoa_r+0xb9c>
 80054b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054b4:	b953      	cbnz	r3, 80054cc <_dtoa_r+0xa4>
 80054b6:	4b95      	ldr	r3, [pc, #596]	; (800570c <_dtoa_r+0x2e4>)
 80054b8:	e023      	b.n	8005502 <_dtoa_r+0xda>
 80054ba:	4b95      	ldr	r3, [pc, #596]	; (8005710 <_dtoa_r+0x2e8>)
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	3308      	adds	r3, #8
 80054c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	9803      	ldr	r0, [sp, #12]
 80054c6:	b019      	add	sp, #100	; 0x64
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	4b8f      	ldr	r3, [pc, #572]	; (800570c <_dtoa_r+0x2e4>)
 80054ce:	9303      	str	r3, [sp, #12]
 80054d0:	3303      	adds	r3, #3
 80054d2:	e7f5      	b.n	80054c0 <_dtoa_r+0x98>
 80054d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80054dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	2300      	movs	r3, #0
 80054e4:	f7fb fa60 	bl	80009a8 <__aeabi_dcmpeq>
 80054e8:	4680      	mov	r8, r0
 80054ea:	b160      	cbz	r0, 8005506 <_dtoa_r+0xde>
 80054ec:	2301      	movs	r3, #1
 80054ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8562 	beq.w	8005fbe <_dtoa_r+0xb96>
 80054fa:	4b86      	ldr	r3, [pc, #536]	; (8005714 <_dtoa_r+0x2ec>)
 80054fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	3b01      	subs	r3, #1
 8005502:	9303      	str	r3, [sp, #12]
 8005504:	e7de      	b.n	80054c4 <_dtoa_r+0x9c>
 8005506:	ab16      	add	r3, sp, #88	; 0x58
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	ab17      	add	r3, sp, #92	; 0x5c
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4628      	mov	r0, r5
 8005510:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005514:	f001 f98a 	bl	800682c <__d2b>
 8005518:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800551c:	4682      	mov	sl, r0
 800551e:	2c00      	cmp	r4, #0
 8005520:	d07e      	beq.n	8005620 <_dtoa_r+0x1f8>
 8005522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005528:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800552c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005530:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005534:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005538:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800553c:	4619      	mov	r1, r3
 800553e:	2200      	movs	r2, #0
 8005540:	4b75      	ldr	r3, [pc, #468]	; (8005718 <_dtoa_r+0x2f0>)
 8005542:	f7fa fe11 	bl	8000168 <__aeabi_dsub>
 8005546:	a368      	add	r3, pc, #416	; (adr r3, 80056e8 <_dtoa_r+0x2c0>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fa ffc4 	bl	80004d8 <__aeabi_dmul>
 8005550:	a367      	add	r3, pc, #412	; (adr r3, 80056f0 <_dtoa_r+0x2c8>)
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f7fa fe09 	bl	800016c <__adddf3>
 800555a:	4606      	mov	r6, r0
 800555c:	4620      	mov	r0, r4
 800555e:	460f      	mov	r7, r1
 8005560:	f7fa ff50 	bl	8000404 <__aeabi_i2d>
 8005564:	a364      	add	r3, pc, #400	; (adr r3, 80056f8 <_dtoa_r+0x2d0>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f7fa ffb5 	bl	80004d8 <__aeabi_dmul>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4630      	mov	r0, r6
 8005574:	4639      	mov	r1, r7
 8005576:	f7fa fdf9 	bl	800016c <__adddf3>
 800557a:	4606      	mov	r6, r0
 800557c:	460f      	mov	r7, r1
 800557e:	f7fb fa5b 	bl	8000a38 <__aeabi_d2iz>
 8005582:	2200      	movs	r2, #0
 8005584:	4683      	mov	fp, r0
 8005586:	2300      	movs	r3, #0
 8005588:	4630      	mov	r0, r6
 800558a:	4639      	mov	r1, r7
 800558c:	f7fb fa16 	bl	80009bc <__aeabi_dcmplt>
 8005590:	b148      	cbz	r0, 80055a6 <_dtoa_r+0x17e>
 8005592:	4658      	mov	r0, fp
 8005594:	f7fa ff36 	bl	8000404 <__aeabi_i2d>
 8005598:	4632      	mov	r2, r6
 800559a:	463b      	mov	r3, r7
 800559c:	f7fb fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80055a0:	b908      	cbnz	r0, 80055a6 <_dtoa_r+0x17e>
 80055a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055a6:	f1bb 0f16 	cmp.w	fp, #22
 80055aa:	d857      	bhi.n	800565c <_dtoa_r+0x234>
 80055ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055b0:	4b5a      	ldr	r3, [pc, #360]	; (800571c <_dtoa_r+0x2f4>)
 80055b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f7fb f9ff 	bl	80009bc <__aeabi_dcmplt>
 80055be:	2800      	cmp	r0, #0
 80055c0:	d04e      	beq.n	8005660 <_dtoa_r+0x238>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80055ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055cc:	1b1b      	subs	r3, r3, r4
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	bf46      	itte	mi
 80055d2:	f1c3 0901 	rsbmi	r9, r3, #1
 80055d6:	2300      	movmi	r3, #0
 80055d8:	f04f 0900 	movpl.w	r9, #0
 80055dc:	9209      	str	r2, [sp, #36]	; 0x24
 80055de:	bf48      	it	mi
 80055e0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80055e2:	f1bb 0f00 	cmp.w	fp, #0
 80055e6:	db3d      	blt.n	8005664 <_dtoa_r+0x23c>
 80055e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80055ee:	445b      	add	r3, fp
 80055f0:	9309      	str	r3, [sp, #36]	; 0x24
 80055f2:	2300      	movs	r3, #0
 80055f4:	930a      	str	r3, [sp, #40]	; 0x28
 80055f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055f8:	2b09      	cmp	r3, #9
 80055fa:	d867      	bhi.n	80056cc <_dtoa_r+0x2a4>
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	bfc4      	itt	gt
 8005600:	3b04      	subgt	r3, #4
 8005602:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005606:	bfc8      	it	gt
 8005608:	2400      	movgt	r4, #0
 800560a:	f1a3 0302 	sub.w	r3, r3, #2
 800560e:	bfd8      	it	le
 8005610:	2401      	movle	r4, #1
 8005612:	2b03      	cmp	r3, #3
 8005614:	f200 8086 	bhi.w	8005724 <_dtoa_r+0x2fc>
 8005618:	e8df f003 	tbb	[pc, r3]
 800561c:	5637392c 	.word	0x5637392c
 8005620:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005624:	441c      	add	r4, r3
 8005626:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800562a:	2b20      	cmp	r3, #32
 800562c:	bfc1      	itttt	gt
 800562e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005632:	fa09 f903 	lslgt.w	r9, r9, r3
 8005636:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800563a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800563e:	bfd6      	itet	le
 8005640:	f1c3 0320 	rsble	r3, r3, #32
 8005644:	ea49 0003 	orrgt.w	r0, r9, r3
 8005648:	fa06 f003 	lslle.w	r0, r6, r3
 800564c:	f7fa feca 	bl	80003e4 <__aeabi_ui2d>
 8005650:	2201      	movs	r2, #1
 8005652:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005656:	3c01      	subs	r4, #1
 8005658:	9213      	str	r2, [sp, #76]	; 0x4c
 800565a:	e76f      	b.n	800553c <_dtoa_r+0x114>
 800565c:	2301      	movs	r3, #1
 800565e:	e7b3      	b.n	80055c8 <_dtoa_r+0x1a0>
 8005660:	900f      	str	r0, [sp, #60]	; 0x3c
 8005662:	e7b2      	b.n	80055ca <_dtoa_r+0x1a2>
 8005664:	f1cb 0300 	rsb	r3, fp, #0
 8005668:	930a      	str	r3, [sp, #40]	; 0x28
 800566a:	2300      	movs	r3, #0
 800566c:	eba9 090b 	sub.w	r9, r9, fp
 8005670:	930e      	str	r3, [sp, #56]	; 0x38
 8005672:	e7c0      	b.n	80055f6 <_dtoa_r+0x1ce>
 8005674:	2300      	movs	r3, #0
 8005676:	930b      	str	r3, [sp, #44]	; 0x2c
 8005678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800567a:	2b00      	cmp	r3, #0
 800567c:	dc55      	bgt.n	800572a <_dtoa_r+0x302>
 800567e:	2301      	movs	r3, #1
 8005680:	461a      	mov	r2, r3
 8005682:	9306      	str	r3, [sp, #24]
 8005684:	9308      	str	r3, [sp, #32]
 8005686:	9223      	str	r2, [sp, #140]	; 0x8c
 8005688:	e00b      	b.n	80056a2 <_dtoa_r+0x27a>
 800568a:	2301      	movs	r3, #1
 800568c:	e7f3      	b.n	8005676 <_dtoa_r+0x24e>
 800568e:	2300      	movs	r3, #0
 8005690:	930b      	str	r3, [sp, #44]	; 0x2c
 8005692:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005694:	445b      	add	r3, fp
 8005696:	9306      	str	r3, [sp, #24]
 8005698:	3301      	adds	r3, #1
 800569a:	2b01      	cmp	r3, #1
 800569c:	9308      	str	r3, [sp, #32]
 800569e:	bfb8      	it	lt
 80056a0:	2301      	movlt	r3, #1
 80056a2:	2100      	movs	r1, #0
 80056a4:	2204      	movs	r2, #4
 80056a6:	69e8      	ldr	r0, [r5, #28]
 80056a8:	f102 0614 	add.w	r6, r2, #20
 80056ac:	429e      	cmp	r6, r3
 80056ae:	d940      	bls.n	8005732 <_dtoa_r+0x30a>
 80056b0:	6041      	str	r1, [r0, #4]
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 fd98 	bl	80061e8 <_Balloc>
 80056b8:	9003      	str	r0, [sp, #12]
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d13c      	bne.n	8005738 <_dtoa_r+0x310>
 80056be:	4602      	mov	r2, r0
 80056c0:	f240 11af 	movw	r1, #431	; 0x1af
 80056c4:	4b16      	ldr	r3, [pc, #88]	; (8005720 <_dtoa_r+0x2f8>)
 80056c6:	e6c3      	b.n	8005450 <_dtoa_r+0x28>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e7e1      	b.n	8005690 <_dtoa_r+0x268>
 80056cc:	2401      	movs	r4, #1
 80056ce:	2300      	movs	r3, #0
 80056d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80056d2:	9322      	str	r3, [sp, #136]	; 0x88
 80056d4:	f04f 33ff 	mov.w	r3, #4294967295
 80056d8:	2200      	movs	r2, #0
 80056da:	9306      	str	r3, [sp, #24]
 80056dc:	9308      	str	r3, [sp, #32]
 80056de:	2312      	movs	r3, #18
 80056e0:	e7d1      	b.n	8005686 <_dtoa_r+0x25e>
 80056e2:	bf00      	nop
 80056e4:	f3af 8000 	nop.w
 80056e8:	636f4361 	.word	0x636f4361
 80056ec:	3fd287a7 	.word	0x3fd287a7
 80056f0:	8b60c8b3 	.word	0x8b60c8b3
 80056f4:	3fc68a28 	.word	0x3fc68a28
 80056f8:	509f79fb 	.word	0x509f79fb
 80056fc:	3fd34413 	.word	0x3fd34413
 8005700:	080083cc 	.word	0x080083cc
 8005704:	080083e3 	.word	0x080083e3
 8005708:	7ff00000 	.word	0x7ff00000
 800570c:	080083c8 	.word	0x080083c8
 8005710:	080083bf 	.word	0x080083bf
 8005714:	0800839c 	.word	0x0800839c
 8005718:	3ff80000 	.word	0x3ff80000
 800571c:	080084d0 	.word	0x080084d0
 8005720:	0800843b 	.word	0x0800843b
 8005724:	2301      	movs	r3, #1
 8005726:	930b      	str	r3, [sp, #44]	; 0x2c
 8005728:	e7d4      	b.n	80056d4 <_dtoa_r+0x2ac>
 800572a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800572c:	9306      	str	r3, [sp, #24]
 800572e:	9308      	str	r3, [sp, #32]
 8005730:	e7b7      	b.n	80056a2 <_dtoa_r+0x27a>
 8005732:	3101      	adds	r1, #1
 8005734:	0052      	lsls	r2, r2, #1
 8005736:	e7b7      	b.n	80056a8 <_dtoa_r+0x280>
 8005738:	69eb      	ldr	r3, [r5, #28]
 800573a:	9a03      	ldr	r2, [sp, #12]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	9b08      	ldr	r3, [sp, #32]
 8005740:	2b0e      	cmp	r3, #14
 8005742:	f200 80a8 	bhi.w	8005896 <_dtoa_r+0x46e>
 8005746:	2c00      	cmp	r4, #0
 8005748:	f000 80a5 	beq.w	8005896 <_dtoa_r+0x46e>
 800574c:	f1bb 0f00 	cmp.w	fp, #0
 8005750:	dd34      	ble.n	80057bc <_dtoa_r+0x394>
 8005752:	4b9a      	ldr	r3, [pc, #616]	; (80059bc <_dtoa_r+0x594>)
 8005754:	f00b 020f 	and.w	r2, fp, #15
 8005758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800575c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005760:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005764:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005768:	ea4f 142b 	mov.w	r4, fp, asr #4
 800576c:	d016      	beq.n	800579c <_dtoa_r+0x374>
 800576e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005772:	4b93      	ldr	r3, [pc, #588]	; (80059c0 <_dtoa_r+0x598>)
 8005774:	2703      	movs	r7, #3
 8005776:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800577a:	f7fa ffd7 	bl	800072c <__aeabi_ddiv>
 800577e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005782:	f004 040f 	and.w	r4, r4, #15
 8005786:	4e8e      	ldr	r6, [pc, #568]	; (80059c0 <_dtoa_r+0x598>)
 8005788:	b954      	cbnz	r4, 80057a0 <_dtoa_r+0x378>
 800578a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800578e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005792:	f7fa ffcb 	bl	800072c <__aeabi_ddiv>
 8005796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800579a:	e029      	b.n	80057f0 <_dtoa_r+0x3c8>
 800579c:	2702      	movs	r7, #2
 800579e:	e7f2      	b.n	8005786 <_dtoa_r+0x35e>
 80057a0:	07e1      	lsls	r1, r4, #31
 80057a2:	d508      	bpl.n	80057b6 <_dtoa_r+0x38e>
 80057a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057ac:	f7fa fe94 	bl	80004d8 <__aeabi_dmul>
 80057b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057b4:	3701      	adds	r7, #1
 80057b6:	1064      	asrs	r4, r4, #1
 80057b8:	3608      	adds	r6, #8
 80057ba:	e7e5      	b.n	8005788 <_dtoa_r+0x360>
 80057bc:	f000 80a5 	beq.w	800590a <_dtoa_r+0x4e2>
 80057c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c4:	f1cb 0400 	rsb	r4, fp, #0
 80057c8:	4b7c      	ldr	r3, [pc, #496]	; (80059bc <_dtoa_r+0x594>)
 80057ca:	f004 020f 	and.w	r2, r4, #15
 80057ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fa fe7f 	bl	80004d8 <__aeabi_dmul>
 80057da:	2702      	movs	r7, #2
 80057dc:	2300      	movs	r3, #0
 80057de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e2:	4e77      	ldr	r6, [pc, #476]	; (80059c0 <_dtoa_r+0x598>)
 80057e4:	1124      	asrs	r4, r4, #4
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	f040 8084 	bne.w	80058f4 <_dtoa_r+0x4cc>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1d2      	bne.n	8005796 <_dtoa_r+0x36e>
 80057f0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8087 	beq.w	800590e <_dtoa_r+0x4e6>
 8005800:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005804:	2200      	movs	r2, #0
 8005806:	4b6f      	ldr	r3, [pc, #444]	; (80059c4 <_dtoa_r+0x59c>)
 8005808:	f7fb f8d8 	bl	80009bc <__aeabi_dcmplt>
 800580c:	2800      	cmp	r0, #0
 800580e:	d07e      	beq.n	800590e <_dtoa_r+0x4e6>
 8005810:	9b08      	ldr	r3, [sp, #32]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d07b      	beq.n	800590e <_dtoa_r+0x4e6>
 8005816:	9b06      	ldr	r3, [sp, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	dd38      	ble.n	800588e <_dtoa_r+0x466>
 800581c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005820:	2200      	movs	r2, #0
 8005822:	4b69      	ldr	r3, [pc, #420]	; (80059c8 <_dtoa_r+0x5a0>)
 8005824:	f7fa fe58 	bl	80004d8 <__aeabi_dmul>
 8005828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800582c:	9c06      	ldr	r4, [sp, #24]
 800582e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005832:	3701      	adds	r7, #1
 8005834:	4638      	mov	r0, r7
 8005836:	f7fa fde5 	bl	8000404 <__aeabi_i2d>
 800583a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800583e:	f7fa fe4b 	bl	80004d8 <__aeabi_dmul>
 8005842:	2200      	movs	r2, #0
 8005844:	4b61      	ldr	r3, [pc, #388]	; (80059cc <_dtoa_r+0x5a4>)
 8005846:	f7fa fc91 	bl	800016c <__adddf3>
 800584a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800584e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005852:	9611      	str	r6, [sp, #68]	; 0x44
 8005854:	2c00      	cmp	r4, #0
 8005856:	d15d      	bne.n	8005914 <_dtoa_r+0x4ec>
 8005858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800585c:	2200      	movs	r2, #0
 800585e:	4b5c      	ldr	r3, [pc, #368]	; (80059d0 <_dtoa_r+0x5a8>)
 8005860:	f7fa fc82 	bl	8000168 <__aeabi_dsub>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800586c:	4633      	mov	r3, r6
 800586e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005870:	f7fb f8c2 	bl	80009f8 <__aeabi_dcmpgt>
 8005874:	2800      	cmp	r0, #0
 8005876:	f040 8295 	bne.w	8005da4 <_dtoa_r+0x97c>
 800587a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005880:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005884:	f7fb f89a 	bl	80009bc <__aeabi_dcmplt>
 8005888:	2800      	cmp	r0, #0
 800588a:	f040 8289 	bne.w	8005da0 <_dtoa_r+0x978>
 800588e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005892:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005896:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005898:	2b00      	cmp	r3, #0
 800589a:	f2c0 8151 	blt.w	8005b40 <_dtoa_r+0x718>
 800589e:	f1bb 0f0e 	cmp.w	fp, #14
 80058a2:	f300 814d 	bgt.w	8005b40 <_dtoa_r+0x718>
 80058a6:	4b45      	ldr	r3, [pc, #276]	; (80059bc <_dtoa_r+0x594>)
 80058a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80058ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f280 80da 	bge.w	8005a70 <_dtoa_r+0x648>
 80058bc:	9b08      	ldr	r3, [sp, #32]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f300 80d6 	bgt.w	8005a70 <_dtoa_r+0x648>
 80058c4:	f040 826b 	bne.w	8005d9e <_dtoa_r+0x976>
 80058c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058cc:	2200      	movs	r2, #0
 80058ce:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <_dtoa_r+0x5a8>)
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d8:	f7fb f884 	bl	80009e4 <__aeabi_dcmpge>
 80058dc:	9c08      	ldr	r4, [sp, #32]
 80058de:	4626      	mov	r6, r4
 80058e0:	2800      	cmp	r0, #0
 80058e2:	f040 8241 	bne.w	8005d68 <_dtoa_r+0x940>
 80058e6:	2331      	movs	r3, #49	; 0x31
 80058e8:	9f03      	ldr	r7, [sp, #12]
 80058ea:	f10b 0b01 	add.w	fp, fp, #1
 80058ee:	f807 3b01 	strb.w	r3, [r7], #1
 80058f2:	e23d      	b.n	8005d70 <_dtoa_r+0x948>
 80058f4:	07e2      	lsls	r2, r4, #31
 80058f6:	d505      	bpl.n	8005904 <_dtoa_r+0x4dc>
 80058f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058fc:	f7fa fdec 	bl	80004d8 <__aeabi_dmul>
 8005900:	2301      	movs	r3, #1
 8005902:	3701      	adds	r7, #1
 8005904:	1064      	asrs	r4, r4, #1
 8005906:	3608      	adds	r6, #8
 8005908:	e76d      	b.n	80057e6 <_dtoa_r+0x3be>
 800590a:	2702      	movs	r7, #2
 800590c:	e770      	b.n	80057f0 <_dtoa_r+0x3c8>
 800590e:	46d8      	mov	r8, fp
 8005910:	9c08      	ldr	r4, [sp, #32]
 8005912:	e78f      	b.n	8005834 <_dtoa_r+0x40c>
 8005914:	9903      	ldr	r1, [sp, #12]
 8005916:	4b29      	ldr	r3, [pc, #164]	; (80059bc <_dtoa_r+0x594>)
 8005918:	4421      	add	r1, r4
 800591a:	9112      	str	r1, [sp, #72]	; 0x48
 800591c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800591e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005922:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005926:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800592a:	2900      	cmp	r1, #0
 800592c:	d054      	beq.n	80059d8 <_dtoa_r+0x5b0>
 800592e:	2000      	movs	r0, #0
 8005930:	4928      	ldr	r1, [pc, #160]	; (80059d4 <_dtoa_r+0x5ac>)
 8005932:	f7fa fefb 	bl	800072c <__aeabi_ddiv>
 8005936:	463b      	mov	r3, r7
 8005938:	4632      	mov	r2, r6
 800593a:	f7fa fc15 	bl	8000168 <__aeabi_dsub>
 800593e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005942:	9f03      	ldr	r7, [sp, #12]
 8005944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005948:	f7fb f876 	bl	8000a38 <__aeabi_d2iz>
 800594c:	4604      	mov	r4, r0
 800594e:	f7fa fd59 	bl	8000404 <__aeabi_i2d>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800595a:	f7fa fc05 	bl	8000168 <__aeabi_dsub>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	3430      	adds	r4, #48	; 0x30
 8005964:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800596c:	f807 4b01 	strb.w	r4, [r7], #1
 8005970:	f7fb f824 	bl	80009bc <__aeabi_dcmplt>
 8005974:	2800      	cmp	r0, #0
 8005976:	d173      	bne.n	8005a60 <_dtoa_r+0x638>
 8005978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800597c:	2000      	movs	r0, #0
 800597e:	4911      	ldr	r1, [pc, #68]	; (80059c4 <_dtoa_r+0x59c>)
 8005980:	f7fa fbf2 	bl	8000168 <__aeabi_dsub>
 8005984:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005988:	f7fb f818 	bl	80009bc <__aeabi_dcmplt>
 800598c:	2800      	cmp	r0, #0
 800598e:	f040 80b6 	bne.w	8005afe <_dtoa_r+0x6d6>
 8005992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005994:	429f      	cmp	r7, r3
 8005996:	f43f af7a 	beq.w	800588e <_dtoa_r+0x466>
 800599a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800599e:	2200      	movs	r2, #0
 80059a0:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <_dtoa_r+0x5a0>)
 80059a2:	f7fa fd99 	bl	80004d8 <__aeabi_dmul>
 80059a6:	2200      	movs	r2, #0
 80059a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <_dtoa_r+0x5a0>)
 80059b2:	f7fa fd91 	bl	80004d8 <__aeabi_dmul>
 80059b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ba:	e7c3      	b.n	8005944 <_dtoa_r+0x51c>
 80059bc:	080084d0 	.word	0x080084d0
 80059c0:	080084a8 	.word	0x080084a8
 80059c4:	3ff00000 	.word	0x3ff00000
 80059c8:	40240000 	.word	0x40240000
 80059cc:	401c0000 	.word	0x401c0000
 80059d0:	40140000 	.word	0x40140000
 80059d4:	3fe00000 	.word	0x3fe00000
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	f7fa fd7c 	bl	80004d8 <__aeabi_dmul>
 80059e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059e6:	9c03      	ldr	r4, [sp, #12]
 80059e8:	9314      	str	r3, [sp, #80]	; 0x50
 80059ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ee:	f7fb f823 	bl	8000a38 <__aeabi_d2iz>
 80059f2:	9015      	str	r0, [sp, #84]	; 0x54
 80059f4:	f7fa fd06 	bl	8000404 <__aeabi_i2d>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a00:	f7fa fbb2 	bl	8000168 <__aeabi_dsub>
 8005a04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a06:	4606      	mov	r6, r0
 8005a08:	3330      	adds	r3, #48	; 0x30
 8005a0a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a10:	460f      	mov	r7, r1
 8005a12:	429c      	cmp	r4, r3
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	d124      	bne.n	8005a64 <_dtoa_r+0x63c>
 8005a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a1e:	4baf      	ldr	r3, [pc, #700]	; (8005cdc <_dtoa_r+0x8b4>)
 8005a20:	f7fa fba4 	bl	800016c <__adddf3>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa ffe4 	bl	80009f8 <__aeabi_dcmpgt>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d163      	bne.n	8005afc <_dtoa_r+0x6d4>
 8005a34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a38:	2000      	movs	r0, #0
 8005a3a:	49a8      	ldr	r1, [pc, #672]	; (8005cdc <_dtoa_r+0x8b4>)
 8005a3c:	f7fa fb94 	bl	8000168 <__aeabi_dsub>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4630      	mov	r0, r6
 8005a46:	4639      	mov	r1, r7
 8005a48:	f7fa ffb8 	bl	80009bc <__aeabi_dcmplt>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f43f af1e 	beq.w	800588e <_dtoa_r+0x466>
 8005a52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a54:	1e7b      	subs	r3, r7, #1
 8005a56:	9314      	str	r3, [sp, #80]	; 0x50
 8005a58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a5c:	2b30      	cmp	r3, #48	; 0x30
 8005a5e:	d0f8      	beq.n	8005a52 <_dtoa_r+0x62a>
 8005a60:	46c3      	mov	fp, r8
 8005a62:	e03b      	b.n	8005adc <_dtoa_r+0x6b4>
 8005a64:	4b9e      	ldr	r3, [pc, #632]	; (8005ce0 <_dtoa_r+0x8b8>)
 8005a66:	f7fa fd37 	bl	80004d8 <__aeabi_dmul>
 8005a6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a6e:	e7bc      	b.n	80059ea <_dtoa_r+0x5c2>
 8005a70:	9f03      	ldr	r7, [sp, #12]
 8005a72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	f7fa fe55 	bl	800072c <__aeabi_ddiv>
 8005a82:	f7fa ffd9 	bl	8000a38 <__aeabi_d2iz>
 8005a86:	4604      	mov	r4, r0
 8005a88:	f7fa fcbc 	bl	8000404 <__aeabi_i2d>
 8005a8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a90:	f7fa fd22 	bl	80004d8 <__aeabi_dmul>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4640      	mov	r0, r8
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	f7fa fb64 	bl	8000168 <__aeabi_dsub>
 8005aa0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005aa4:	f807 6b01 	strb.w	r6, [r7], #1
 8005aa8:	9e03      	ldr	r6, [sp, #12]
 8005aaa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005aae:	1bbe      	subs	r6, r7, r6
 8005ab0:	45b4      	cmp	ip, r6
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	d136      	bne.n	8005b26 <_dtoa_r+0x6fe>
 8005ab8:	f7fa fb58 	bl	800016c <__adddf3>
 8005abc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	4689      	mov	r9, r1
 8005ac4:	f7fa ff98 	bl	80009f8 <__aeabi_dcmpgt>
 8005ac8:	bb58      	cbnz	r0, 8005b22 <_dtoa_r+0x6fa>
 8005aca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fa ff69 	bl	80009a8 <__aeabi_dcmpeq>
 8005ad6:	b108      	cbz	r0, 8005adc <_dtoa_r+0x6b4>
 8005ad8:	07e3      	lsls	r3, r4, #31
 8005ada:	d422      	bmi.n	8005b22 <_dtoa_r+0x6fa>
 8005adc:	4651      	mov	r1, sl
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fbc2 	bl	8006268 <_Bfree>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ae8:	703b      	strb	r3, [r7, #0]
 8005aea:	f10b 0301 	add.w	r3, fp, #1
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f43f ace6 	beq.w	80054c4 <_dtoa_r+0x9c>
 8005af8:	601f      	str	r7, [r3, #0]
 8005afa:	e4e3      	b.n	80054c4 <_dtoa_r+0x9c>
 8005afc:	4627      	mov	r7, r4
 8005afe:	463b      	mov	r3, r7
 8005b00:	461f      	mov	r7, r3
 8005b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b06:	2a39      	cmp	r2, #57	; 0x39
 8005b08:	d107      	bne.n	8005b1a <_dtoa_r+0x6f2>
 8005b0a:	9a03      	ldr	r2, [sp, #12]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d1f7      	bne.n	8005b00 <_dtoa_r+0x6d8>
 8005b10:	2230      	movs	r2, #48	; 0x30
 8005b12:	9903      	ldr	r1, [sp, #12]
 8005b14:	f108 0801 	add.w	r8, r8, #1
 8005b18:	700a      	strb	r2, [r1, #0]
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	3201      	adds	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	e79e      	b.n	8005a60 <_dtoa_r+0x638>
 8005b22:	46d8      	mov	r8, fp
 8005b24:	e7eb      	b.n	8005afe <_dtoa_r+0x6d6>
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b6d      	ldr	r3, [pc, #436]	; (8005ce0 <_dtoa_r+0x8b8>)
 8005b2a:	f7fa fcd5 	bl	80004d8 <__aeabi_dmul>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2300      	movs	r3, #0
 8005b32:	4680      	mov	r8, r0
 8005b34:	4689      	mov	r9, r1
 8005b36:	f7fa ff37 	bl	80009a8 <__aeabi_dcmpeq>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d09b      	beq.n	8005a76 <_dtoa_r+0x64e>
 8005b3e:	e7cd      	b.n	8005adc <_dtoa_r+0x6b4>
 8005b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	f000 80c4 	beq.w	8005cd0 <_dtoa_r+0x8a8>
 8005b48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b4a:	2a01      	cmp	r2, #1
 8005b4c:	f300 80a8 	bgt.w	8005ca0 <_dtoa_r+0x878>
 8005b50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	f000 80a0 	beq.w	8005c98 <_dtoa_r+0x870>
 8005b58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b5c:	464f      	mov	r7, r9
 8005b5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b62:	2101      	movs	r1, #1
 8005b64:	441a      	add	r2, r3
 8005b66:	4628      	mov	r0, r5
 8005b68:	4499      	add	r9, r3
 8005b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b6c:	f000 fc32 	bl	80063d4 <__i2b>
 8005b70:	4606      	mov	r6, r0
 8005b72:	b15f      	cbz	r7, 8005b8c <_dtoa_r+0x764>
 8005b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dd08      	ble.n	8005b8c <_dtoa_r+0x764>
 8005b7a:	42bb      	cmp	r3, r7
 8005b7c:	bfa8      	it	ge
 8005b7e:	463b      	movge	r3, r7
 8005b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b82:	eba9 0903 	sub.w	r9, r9, r3
 8005b86:	1aff      	subs	r7, r7, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8e:	b1f3      	cbz	r3, 8005bce <_dtoa_r+0x7a6>
 8005b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80a0 	beq.w	8005cd8 <_dtoa_r+0x8b0>
 8005b98:	2c00      	cmp	r4, #0
 8005b9a:	dd10      	ble.n	8005bbe <_dtoa_r+0x796>
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 fcd5 	bl	8006550 <__pow5mult>
 8005ba6:	4652      	mov	r2, sl
 8005ba8:	4601      	mov	r1, r0
 8005baa:	4606      	mov	r6, r0
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 fc27 	bl	8006400 <__multiply>
 8005bb2:	4680      	mov	r8, r0
 8005bb4:	4651      	mov	r1, sl
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 fb56 	bl	8006268 <_Bfree>
 8005bbc:	46c2      	mov	sl, r8
 8005bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc0:	1b1a      	subs	r2, r3, r4
 8005bc2:	d004      	beq.n	8005bce <_dtoa_r+0x7a6>
 8005bc4:	4651      	mov	r1, sl
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 fcc2 	bl	8006550 <__pow5mult>
 8005bcc:	4682      	mov	sl, r0
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 fbff 	bl	80063d4 <__i2b>
 8005bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd8:	4604      	mov	r4, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f340 8082 	ble.w	8005ce4 <_dtoa_r+0x8bc>
 8005be0:	461a      	mov	r2, r3
 8005be2:	4601      	mov	r1, r0
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 fcb3 	bl	8006550 <__pow5mult>
 8005bea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bec:	4604      	mov	r4, r0
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	dd7b      	ble.n	8005cea <_dtoa_r+0x8c2>
 8005bf2:	f04f 0800 	mov.w	r8, #0
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bfc:	6918      	ldr	r0, [r3, #16]
 8005bfe:	f000 fb9b 	bl	8006338 <__hi0bits>
 8005c02:	f1c0 0020 	rsb	r0, r0, #32
 8005c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c08:	4418      	add	r0, r3
 8005c0a:	f010 001f 	ands.w	r0, r0, #31
 8005c0e:	f000 8092 	beq.w	8005d36 <_dtoa_r+0x90e>
 8005c12:	f1c0 0320 	rsb	r3, r0, #32
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	f340 8085 	ble.w	8005d26 <_dtoa_r+0x8fe>
 8005c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1e:	f1c0 001c 	rsb	r0, r0, #28
 8005c22:	4403      	add	r3, r0
 8005c24:	4481      	add	r9, r0
 8005c26:	4407      	add	r7, r0
 8005c28:	9309      	str	r3, [sp, #36]	; 0x24
 8005c2a:	f1b9 0f00 	cmp.w	r9, #0
 8005c2e:	dd05      	ble.n	8005c3c <_dtoa_r+0x814>
 8005c30:	4651      	mov	r1, sl
 8005c32:	464a      	mov	r2, r9
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fce5 	bl	8006604 <__lshift>
 8005c3a:	4682      	mov	sl, r0
 8005c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dd05      	ble.n	8005c4e <_dtoa_r+0x826>
 8005c42:	4621      	mov	r1, r4
 8005c44:	461a      	mov	r2, r3
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fcdc 	bl	8006604 <__lshift>
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d072      	beq.n	8005d3a <_dtoa_r+0x912>
 8005c54:	4621      	mov	r1, r4
 8005c56:	4650      	mov	r0, sl
 8005c58:	f000 fd40 	bl	80066dc <__mcmp>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	da6c      	bge.n	8005d3a <_dtoa_r+0x912>
 8005c60:	2300      	movs	r3, #0
 8005c62:	4651      	mov	r1, sl
 8005c64:	220a      	movs	r2, #10
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fb20 	bl	80062ac <__multadd>
 8005c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6e:	4682      	mov	sl, r0
 8005c70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 81ac 	beq.w	8005fd2 <_dtoa_r+0xbaa>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	220a      	movs	r2, #10
 8005c80:	4628      	mov	r0, r5
 8005c82:	f000 fb13 	bl	80062ac <__multadd>
 8005c86:	9b06      	ldr	r3, [sp, #24]
 8005c88:	4606      	mov	r6, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f300 8093 	bgt.w	8005db6 <_dtoa_r+0x98e>
 8005c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	dc59      	bgt.n	8005d4a <_dtoa_r+0x922>
 8005c96:	e08e      	b.n	8005db6 <_dtoa_r+0x98e>
 8005c98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c9e:	e75d      	b.n	8005b5c <_dtoa_r+0x734>
 8005ca0:	9b08      	ldr	r3, [sp, #32]
 8005ca2:	1e5c      	subs	r4, r3, #1
 8005ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	bfbf      	itttt	lt
 8005caa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005cac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005cae:	1ae3      	sublt	r3, r4, r3
 8005cb0:	18d2      	addlt	r2, r2, r3
 8005cb2:	bfa8      	it	ge
 8005cb4:	1b1c      	subge	r4, r3, r4
 8005cb6:	9b08      	ldr	r3, [sp, #32]
 8005cb8:	bfbe      	ittt	lt
 8005cba:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005cbc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005cbe:	2400      	movlt	r4, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bfb5      	itete	lt
 8005cc4:	eba9 0703 	sublt.w	r7, r9, r3
 8005cc8:	464f      	movge	r7, r9
 8005cca:	2300      	movlt	r3, #0
 8005ccc:	9b08      	ldrge	r3, [sp, #32]
 8005cce:	e747      	b.n	8005b60 <_dtoa_r+0x738>
 8005cd0:	464f      	mov	r7, r9
 8005cd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005cd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005cd6:	e74c      	b.n	8005b72 <_dtoa_r+0x74a>
 8005cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cda:	e773      	b.n	8005bc4 <_dtoa_r+0x79c>
 8005cdc:	3fe00000 	.word	0x3fe00000
 8005ce0:	40240000 	.word	0x40240000
 8005ce4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	dc18      	bgt.n	8005d1c <_dtoa_r+0x8f4>
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	b9b3      	cbnz	r3, 8005d1c <_dtoa_r+0x8f4>
 8005cee:	9b05      	ldr	r3, [sp, #20]
 8005cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cf4:	b993      	cbnz	r3, 8005d1c <_dtoa_r+0x8f4>
 8005cf6:	9b05      	ldr	r3, [sp, #20]
 8005cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	0d1b      	lsrs	r3, r3, #20
 8005cfe:	051b      	lsls	r3, r3, #20
 8005d00:	b17b      	cbz	r3, 8005d22 <_dtoa_r+0x8fa>
 8005d02:	f04f 0801 	mov.w	r8, #1
 8005d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d08:	f109 0901 	add.w	r9, r9, #1
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f47f af6f 	bne.w	8005bf6 <_dtoa_r+0x7ce>
 8005d18:	2001      	movs	r0, #1
 8005d1a:	e774      	b.n	8005c06 <_dtoa_r+0x7de>
 8005d1c:	f04f 0800 	mov.w	r8, #0
 8005d20:	e7f6      	b.n	8005d10 <_dtoa_r+0x8e8>
 8005d22:	4698      	mov	r8, r3
 8005d24:	e7f4      	b.n	8005d10 <_dtoa_r+0x8e8>
 8005d26:	d080      	beq.n	8005c2a <_dtoa_r+0x802>
 8005d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d2a:	331c      	adds	r3, #28
 8005d2c:	441a      	add	r2, r3
 8005d2e:	4499      	add	r9, r3
 8005d30:	441f      	add	r7, r3
 8005d32:	9209      	str	r2, [sp, #36]	; 0x24
 8005d34:	e779      	b.n	8005c2a <_dtoa_r+0x802>
 8005d36:	4603      	mov	r3, r0
 8005d38:	e7f6      	b.n	8005d28 <_dtoa_r+0x900>
 8005d3a:	9b08      	ldr	r3, [sp, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dc34      	bgt.n	8005daa <_dtoa_r+0x982>
 8005d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	dd31      	ble.n	8005daa <_dtoa_r+0x982>
 8005d46:	9b08      	ldr	r3, [sp, #32]
 8005d48:	9306      	str	r3, [sp, #24]
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	b963      	cbnz	r3, 8005d68 <_dtoa_r+0x940>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	2205      	movs	r2, #5
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 faaa 	bl	80062ac <__multadd>
 8005d58:	4601      	mov	r1, r0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4650      	mov	r0, sl
 8005d5e:	f000 fcbd 	bl	80066dc <__mcmp>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f73f adbf 	bgt.w	80058e6 <_dtoa_r+0x4be>
 8005d68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d6a:	9f03      	ldr	r7, [sp, #12]
 8005d6c:	ea6f 0b03 	mvn.w	fp, r3
 8005d70:	f04f 0800 	mov.w	r8, #0
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 fa76 	bl	8006268 <_Bfree>
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	f43f aead 	beq.w	8005adc <_dtoa_r+0x6b4>
 8005d82:	f1b8 0f00 	cmp.w	r8, #0
 8005d86:	d005      	beq.n	8005d94 <_dtoa_r+0x96c>
 8005d88:	45b0      	cmp	r8, r6
 8005d8a:	d003      	beq.n	8005d94 <_dtoa_r+0x96c>
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 fa6a 	bl	8006268 <_Bfree>
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fa66 	bl	8006268 <_Bfree>
 8005d9c:	e69e      	b.n	8005adc <_dtoa_r+0x6b4>
 8005d9e:	2400      	movs	r4, #0
 8005da0:	4626      	mov	r6, r4
 8005da2:	e7e1      	b.n	8005d68 <_dtoa_r+0x940>
 8005da4:	46c3      	mov	fp, r8
 8005da6:	4626      	mov	r6, r4
 8005da8:	e59d      	b.n	80058e6 <_dtoa_r+0x4be>
 8005daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80c8 	beq.w	8005f42 <_dtoa_r+0xb1a>
 8005db2:	9b08      	ldr	r3, [sp, #32]
 8005db4:	9306      	str	r3, [sp, #24]
 8005db6:	2f00      	cmp	r7, #0
 8005db8:	dd05      	ble.n	8005dc6 <_dtoa_r+0x99e>
 8005dba:	4631      	mov	r1, r6
 8005dbc:	463a      	mov	r2, r7
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 fc20 	bl	8006604 <__lshift>
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	f1b8 0f00 	cmp.w	r8, #0
 8005dca:	d05b      	beq.n	8005e84 <_dtoa_r+0xa5c>
 8005dcc:	4628      	mov	r0, r5
 8005dce:	6871      	ldr	r1, [r6, #4]
 8005dd0:	f000 fa0a 	bl	80061e8 <_Balloc>
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	b928      	cbnz	r0, 8005de4 <_dtoa_r+0x9bc>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005dde:	4b81      	ldr	r3, [pc, #516]	; (8005fe4 <_dtoa_r+0xbbc>)
 8005de0:	f7ff bb36 	b.w	8005450 <_dtoa_r+0x28>
 8005de4:	6932      	ldr	r2, [r6, #16]
 8005de6:	f106 010c 	add.w	r1, r6, #12
 8005dea:	3202      	adds	r2, #2
 8005dec:	0092      	lsls	r2, r2, #2
 8005dee:	300c      	adds	r0, #12
 8005df0:	f000 ff9e 	bl	8006d30 <memcpy>
 8005df4:	2201      	movs	r2, #1
 8005df6:	4639      	mov	r1, r7
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 fc03 	bl	8006604 <__lshift>
 8005dfe:	46b0      	mov	r8, r6
 8005e00:	4606      	mov	r6, r0
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	9a03      	ldr	r2, [sp, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	9308      	str	r3, [sp, #32]
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	930a      	str	r3, [sp, #40]	; 0x28
 8005e18:	9b08      	ldr	r3, [sp, #32]
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	4650      	mov	r0, sl
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	f7ff fa75 	bl	8005310 <quorem>
 8005e26:	4641      	mov	r1, r8
 8005e28:	9006      	str	r0, [sp, #24]
 8005e2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e2e:	4650      	mov	r0, sl
 8005e30:	f000 fc54 	bl	80066dc <__mcmp>
 8005e34:	4632      	mov	r2, r6
 8005e36:	9009      	str	r0, [sp, #36]	; 0x24
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 fc6a 	bl	8006714 <__mdiff>
 8005e40:	68c2      	ldr	r2, [r0, #12]
 8005e42:	4607      	mov	r7, r0
 8005e44:	bb02      	cbnz	r2, 8005e88 <_dtoa_r+0xa60>
 8005e46:	4601      	mov	r1, r0
 8005e48:	4650      	mov	r0, sl
 8005e4a:	f000 fc47 	bl	80066dc <__mcmp>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	4639      	mov	r1, r7
 8005e52:	4628      	mov	r0, r5
 8005e54:	920c      	str	r2, [sp, #48]	; 0x30
 8005e56:	f000 fa07 	bl	8006268 <_Bfree>
 8005e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e5e:	9f08      	ldr	r7, [sp, #32]
 8005e60:	ea43 0102 	orr.w	r1, r3, r2
 8005e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e66:	4319      	orrs	r1, r3
 8005e68:	d110      	bne.n	8005e8c <_dtoa_r+0xa64>
 8005e6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e6e:	d029      	beq.n	8005ec4 <_dtoa_r+0xa9c>
 8005e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	dd02      	ble.n	8005e7c <_dtoa_r+0xa54>
 8005e76:	9b06      	ldr	r3, [sp, #24]
 8005e78:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	f883 9000 	strb.w	r9, [r3]
 8005e82:	e777      	b.n	8005d74 <_dtoa_r+0x94c>
 8005e84:	4630      	mov	r0, r6
 8005e86:	e7ba      	b.n	8005dfe <_dtoa_r+0x9d6>
 8005e88:	2201      	movs	r2, #1
 8005e8a:	e7e1      	b.n	8005e50 <_dtoa_r+0xa28>
 8005e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	db04      	blt.n	8005e9c <_dtoa_r+0xa74>
 8005e92:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e94:	430b      	orrs	r3, r1
 8005e96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	d120      	bne.n	8005ede <_dtoa_r+0xab6>
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	dded      	ble.n	8005e7c <_dtoa_r+0xa54>
 8005ea0:	4651      	mov	r1, sl
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 fbad 	bl	8006604 <__lshift>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4682      	mov	sl, r0
 8005eae:	f000 fc15 	bl	80066dc <__mcmp>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dc03      	bgt.n	8005ebe <_dtoa_r+0xa96>
 8005eb6:	d1e1      	bne.n	8005e7c <_dtoa_r+0xa54>
 8005eb8:	f019 0f01 	tst.w	r9, #1
 8005ebc:	d0de      	beq.n	8005e7c <_dtoa_r+0xa54>
 8005ebe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ec2:	d1d8      	bne.n	8005e76 <_dtoa_r+0xa4e>
 8005ec4:	2339      	movs	r3, #57	; 0x39
 8005ec6:	9a04      	ldr	r2, [sp, #16]
 8005ec8:	7013      	strb	r3, [r2, #0]
 8005eca:	463b      	mov	r3, r7
 8005ecc:	461f      	mov	r7, r3
 8005ece:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	2a39      	cmp	r2, #57	; 0x39
 8005ed6:	d06b      	beq.n	8005fb0 <_dtoa_r+0xb88>
 8005ed8:	3201      	adds	r2, #1
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e74a      	b.n	8005d74 <_dtoa_r+0x94c>
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	dd07      	ble.n	8005ef2 <_dtoa_r+0xaca>
 8005ee2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ee6:	d0ed      	beq.n	8005ec4 <_dtoa_r+0xa9c>
 8005ee8:	9a04      	ldr	r2, [sp, #16]
 8005eea:	f109 0301 	add.w	r3, r9, #1
 8005eee:	7013      	strb	r3, [r2, #0]
 8005ef0:	e740      	b.n	8005d74 <_dtoa_r+0x94c>
 8005ef2:	9b08      	ldr	r3, [sp, #32]
 8005ef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ef6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d042      	beq.n	8005f84 <_dtoa_r+0xb5c>
 8005efe:	4651      	mov	r1, sl
 8005f00:	2300      	movs	r3, #0
 8005f02:	220a      	movs	r2, #10
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f9d1 	bl	80062ac <__multadd>
 8005f0a:	45b0      	cmp	r8, r6
 8005f0c:	4682      	mov	sl, r0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	f04f 020a 	mov.w	r2, #10
 8005f16:	4641      	mov	r1, r8
 8005f18:	4628      	mov	r0, r5
 8005f1a:	d107      	bne.n	8005f2c <_dtoa_r+0xb04>
 8005f1c:	f000 f9c6 	bl	80062ac <__multadd>
 8005f20:	4680      	mov	r8, r0
 8005f22:	4606      	mov	r6, r0
 8005f24:	9b08      	ldr	r3, [sp, #32]
 8005f26:	3301      	adds	r3, #1
 8005f28:	9308      	str	r3, [sp, #32]
 8005f2a:	e775      	b.n	8005e18 <_dtoa_r+0x9f0>
 8005f2c:	f000 f9be 	bl	80062ac <__multadd>
 8005f30:	4631      	mov	r1, r6
 8005f32:	4680      	mov	r8, r0
 8005f34:	2300      	movs	r3, #0
 8005f36:	220a      	movs	r2, #10
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 f9b7 	bl	80062ac <__multadd>
 8005f3e:	4606      	mov	r6, r0
 8005f40:	e7f0      	b.n	8005f24 <_dtoa_r+0xafc>
 8005f42:	9b08      	ldr	r3, [sp, #32]
 8005f44:	9306      	str	r3, [sp, #24]
 8005f46:	9f03      	ldr	r7, [sp, #12]
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	f7ff f9e0 	bl	8005310 <quorem>
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f56:	f807 9b01 	strb.w	r9, [r7], #1
 8005f5a:	1afa      	subs	r2, r7, r3
 8005f5c:	9b06      	ldr	r3, [sp, #24]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	dd07      	ble.n	8005f72 <_dtoa_r+0xb4a>
 8005f62:	4651      	mov	r1, sl
 8005f64:	2300      	movs	r3, #0
 8005f66:	220a      	movs	r2, #10
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 f99f 	bl	80062ac <__multadd>
 8005f6e:	4682      	mov	sl, r0
 8005f70:	e7ea      	b.n	8005f48 <_dtoa_r+0xb20>
 8005f72:	9b06      	ldr	r3, [sp, #24]
 8005f74:	f04f 0800 	mov.w	r8, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	bfcc      	ite	gt
 8005f7c:	461f      	movgt	r7, r3
 8005f7e:	2701      	movle	r7, #1
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	441f      	add	r7, r3
 8005f84:	4651      	mov	r1, sl
 8005f86:	2201      	movs	r2, #1
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f000 fb3b 	bl	8006604 <__lshift>
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4682      	mov	sl, r0
 8005f92:	f000 fba3 	bl	80066dc <__mcmp>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	dc97      	bgt.n	8005eca <_dtoa_r+0xaa2>
 8005f9a:	d102      	bne.n	8005fa2 <_dtoa_r+0xb7a>
 8005f9c:	f019 0f01 	tst.w	r9, #1
 8005fa0:	d193      	bne.n	8005eca <_dtoa_r+0xaa2>
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	461f      	mov	r7, r3
 8005fa6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005faa:	2a30      	cmp	r2, #48	; 0x30
 8005fac:	d0fa      	beq.n	8005fa4 <_dtoa_r+0xb7c>
 8005fae:	e6e1      	b.n	8005d74 <_dtoa_r+0x94c>
 8005fb0:	9a03      	ldr	r2, [sp, #12]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d18a      	bne.n	8005ecc <_dtoa_r+0xaa4>
 8005fb6:	2331      	movs	r3, #49	; 0x31
 8005fb8:	f10b 0b01 	add.w	fp, fp, #1
 8005fbc:	e797      	b.n	8005eee <_dtoa_r+0xac6>
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <_dtoa_r+0xbc0>)
 8005fc0:	f7ff ba9f 	b.w	8005502 <_dtoa_r+0xda>
 8005fc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f47f aa77 	bne.w	80054ba <_dtoa_r+0x92>
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <_dtoa_r+0xbc4>)
 8005fce:	f7ff ba98 	b.w	8005502 <_dtoa_r+0xda>
 8005fd2:	9b06      	ldr	r3, [sp, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dcb6      	bgt.n	8005f46 <_dtoa_r+0xb1e>
 8005fd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	f73f aeb5 	bgt.w	8005d4a <_dtoa_r+0x922>
 8005fe0:	e7b1      	b.n	8005f46 <_dtoa_r+0xb1e>
 8005fe2:	bf00      	nop
 8005fe4:	0800843b 	.word	0x0800843b
 8005fe8:	0800839b 	.word	0x0800839b
 8005fec:	080083bf 	.word	0x080083bf

08005ff0 <_free_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	d040      	beq.n	800607a <_free_r+0x8a>
 8005ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ffc:	1f0c      	subs	r4, r1, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bfb8      	it	lt
 8006002:	18e4      	addlt	r4, r4, r3
 8006004:	f000 f8e4 	bl	80061d0 <__malloc_lock>
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <_free_r+0x8c>)
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	b933      	cbnz	r3, 800601c <_free_r+0x2c>
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	6014      	str	r4, [r2, #0]
 8006012:	4628      	mov	r0, r5
 8006014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006018:	f000 b8e0 	b.w	80061dc <__malloc_unlock>
 800601c:	42a3      	cmp	r3, r4
 800601e:	d908      	bls.n	8006032 <_free_r+0x42>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	1821      	adds	r1, r4, r0
 8006024:	428b      	cmp	r3, r1
 8006026:	bf01      	itttt	eq
 8006028:	6819      	ldreq	r1, [r3, #0]
 800602a:	685b      	ldreq	r3, [r3, #4]
 800602c:	1809      	addeq	r1, r1, r0
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	e7ed      	b.n	800600e <_free_r+0x1e>
 8006032:	461a      	mov	r2, r3
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b10b      	cbz	r3, 800603c <_free_r+0x4c>
 8006038:	42a3      	cmp	r3, r4
 800603a:	d9fa      	bls.n	8006032 <_free_r+0x42>
 800603c:	6811      	ldr	r1, [r2, #0]
 800603e:	1850      	adds	r0, r2, r1
 8006040:	42a0      	cmp	r0, r4
 8006042:	d10b      	bne.n	800605c <_free_r+0x6c>
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	4401      	add	r1, r0
 8006048:	1850      	adds	r0, r2, r1
 800604a:	4283      	cmp	r3, r0
 800604c:	6011      	str	r1, [r2, #0]
 800604e:	d1e0      	bne.n	8006012 <_free_r+0x22>
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4408      	add	r0, r1
 8006056:	6010      	str	r0, [r2, #0]
 8006058:	6053      	str	r3, [r2, #4]
 800605a:	e7da      	b.n	8006012 <_free_r+0x22>
 800605c:	d902      	bls.n	8006064 <_free_r+0x74>
 800605e:	230c      	movs	r3, #12
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	e7d6      	b.n	8006012 <_free_r+0x22>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	1821      	adds	r1, r4, r0
 8006068:	428b      	cmp	r3, r1
 800606a:	bf01      	itttt	eq
 800606c:	6819      	ldreq	r1, [r3, #0]
 800606e:	685b      	ldreq	r3, [r3, #4]
 8006070:	1809      	addeq	r1, r1, r0
 8006072:	6021      	streq	r1, [r4, #0]
 8006074:	6063      	str	r3, [r4, #4]
 8006076:	6054      	str	r4, [r2, #4]
 8006078:	e7cb      	b.n	8006012 <_free_r+0x22>
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000dec 	.word	0x20000dec

08006080 <malloc>:
 8006080:	4b02      	ldr	r3, [pc, #8]	; (800608c <malloc+0xc>)
 8006082:	4601      	mov	r1, r0
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	f000 b823 	b.w	80060d0 <_malloc_r>
 800608a:	bf00      	nop
 800608c:	2000006c 	.word	0x2000006c

08006090 <sbrk_aligned>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4e0e      	ldr	r6, [pc, #56]	; (80060cc <sbrk_aligned+0x3c>)
 8006094:	460c      	mov	r4, r1
 8006096:	6831      	ldr	r1, [r6, #0]
 8006098:	4605      	mov	r5, r0
 800609a:	b911      	cbnz	r1, 80060a2 <sbrk_aligned+0x12>
 800609c:	f000 fe38 	bl	8006d10 <_sbrk_r>
 80060a0:	6030      	str	r0, [r6, #0]
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 fe33 	bl	8006d10 <_sbrk_r>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d00a      	beq.n	80060c4 <sbrk_aligned+0x34>
 80060ae:	1cc4      	adds	r4, r0, #3
 80060b0:	f024 0403 	bic.w	r4, r4, #3
 80060b4:	42a0      	cmp	r0, r4
 80060b6:	d007      	beq.n	80060c8 <sbrk_aligned+0x38>
 80060b8:	1a21      	subs	r1, r4, r0
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 fe28 	bl	8006d10 <_sbrk_r>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d101      	bne.n	80060c8 <sbrk_aligned+0x38>
 80060c4:	f04f 34ff 	mov.w	r4, #4294967295
 80060c8:	4620      	mov	r0, r4
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	20000df0 	.word	0x20000df0

080060d0 <_malloc_r>:
 80060d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	1ccd      	adds	r5, r1, #3
 80060d6:	f025 0503 	bic.w	r5, r5, #3
 80060da:	3508      	adds	r5, #8
 80060dc:	2d0c      	cmp	r5, #12
 80060de:	bf38      	it	cc
 80060e0:	250c      	movcc	r5, #12
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	4607      	mov	r7, r0
 80060e6:	db01      	blt.n	80060ec <_malloc_r+0x1c>
 80060e8:	42a9      	cmp	r1, r5
 80060ea:	d905      	bls.n	80060f8 <_malloc_r+0x28>
 80060ec:	230c      	movs	r3, #12
 80060ee:	2600      	movs	r6, #0
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4630      	mov	r0, r6
 80060f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061cc <_malloc_r+0xfc>
 80060fc:	f000 f868 	bl	80061d0 <__malloc_lock>
 8006100:	f8d8 3000 	ldr.w	r3, [r8]
 8006104:	461c      	mov	r4, r3
 8006106:	bb5c      	cbnz	r4, 8006160 <_malloc_r+0x90>
 8006108:	4629      	mov	r1, r5
 800610a:	4638      	mov	r0, r7
 800610c:	f7ff ffc0 	bl	8006090 <sbrk_aligned>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	4604      	mov	r4, r0
 8006114:	d155      	bne.n	80061c2 <_malloc_r+0xf2>
 8006116:	f8d8 4000 	ldr.w	r4, [r8]
 800611a:	4626      	mov	r6, r4
 800611c:	2e00      	cmp	r6, #0
 800611e:	d145      	bne.n	80061ac <_malloc_r+0xdc>
 8006120:	2c00      	cmp	r4, #0
 8006122:	d048      	beq.n	80061b6 <_malloc_r+0xe6>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	4631      	mov	r1, r6
 8006128:	4638      	mov	r0, r7
 800612a:	eb04 0903 	add.w	r9, r4, r3
 800612e:	f000 fdef 	bl	8006d10 <_sbrk_r>
 8006132:	4581      	cmp	r9, r0
 8006134:	d13f      	bne.n	80061b6 <_malloc_r+0xe6>
 8006136:	6821      	ldr	r1, [r4, #0]
 8006138:	4638      	mov	r0, r7
 800613a:	1a6d      	subs	r5, r5, r1
 800613c:	4629      	mov	r1, r5
 800613e:	f7ff ffa7 	bl	8006090 <sbrk_aligned>
 8006142:	3001      	adds	r0, #1
 8006144:	d037      	beq.n	80061b6 <_malloc_r+0xe6>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	442b      	add	r3, r5
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	f8d8 3000 	ldr.w	r3, [r8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d038      	beq.n	80061c6 <_malloc_r+0xf6>
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	42a2      	cmp	r2, r4
 8006158:	d12b      	bne.n	80061b2 <_malloc_r+0xe2>
 800615a:	2200      	movs	r2, #0
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	e00f      	b.n	8006180 <_malloc_r+0xb0>
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	1b52      	subs	r2, r2, r5
 8006164:	d41f      	bmi.n	80061a6 <_malloc_r+0xd6>
 8006166:	2a0b      	cmp	r2, #11
 8006168:	d917      	bls.n	800619a <_malloc_r+0xca>
 800616a:	1961      	adds	r1, r4, r5
 800616c:	42a3      	cmp	r3, r4
 800616e:	6025      	str	r5, [r4, #0]
 8006170:	bf18      	it	ne
 8006172:	6059      	strne	r1, [r3, #4]
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	bf08      	it	eq
 8006178:	f8c8 1000 	streq.w	r1, [r8]
 800617c:	5162      	str	r2, [r4, r5]
 800617e:	604b      	str	r3, [r1, #4]
 8006180:	4638      	mov	r0, r7
 8006182:	f104 060b 	add.w	r6, r4, #11
 8006186:	f000 f829 	bl	80061dc <__malloc_unlock>
 800618a:	f026 0607 	bic.w	r6, r6, #7
 800618e:	1d23      	adds	r3, r4, #4
 8006190:	1af2      	subs	r2, r6, r3
 8006192:	d0ae      	beq.n	80060f2 <_malloc_r+0x22>
 8006194:	1b9b      	subs	r3, r3, r6
 8006196:	50a3      	str	r3, [r4, r2]
 8006198:	e7ab      	b.n	80060f2 <_malloc_r+0x22>
 800619a:	42a3      	cmp	r3, r4
 800619c:	6862      	ldr	r2, [r4, #4]
 800619e:	d1dd      	bne.n	800615c <_malloc_r+0x8c>
 80061a0:	f8c8 2000 	str.w	r2, [r8]
 80061a4:	e7ec      	b.n	8006180 <_malloc_r+0xb0>
 80061a6:	4623      	mov	r3, r4
 80061a8:	6864      	ldr	r4, [r4, #4]
 80061aa:	e7ac      	b.n	8006106 <_malloc_r+0x36>
 80061ac:	4634      	mov	r4, r6
 80061ae:	6876      	ldr	r6, [r6, #4]
 80061b0:	e7b4      	b.n	800611c <_malloc_r+0x4c>
 80061b2:	4613      	mov	r3, r2
 80061b4:	e7cc      	b.n	8006150 <_malloc_r+0x80>
 80061b6:	230c      	movs	r3, #12
 80061b8:	4638      	mov	r0, r7
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	f000 f80e 	bl	80061dc <__malloc_unlock>
 80061c0:	e797      	b.n	80060f2 <_malloc_r+0x22>
 80061c2:	6025      	str	r5, [r4, #0]
 80061c4:	e7dc      	b.n	8006180 <_malloc_r+0xb0>
 80061c6:	605b      	str	r3, [r3, #4]
 80061c8:	deff      	udf	#255	; 0xff
 80061ca:	bf00      	nop
 80061cc:	20000dec 	.word	0x20000dec

080061d0 <__malloc_lock>:
 80061d0:	4801      	ldr	r0, [pc, #4]	; (80061d8 <__malloc_lock+0x8>)
 80061d2:	f7ff b88d 	b.w	80052f0 <__retarget_lock_acquire_recursive>
 80061d6:	bf00      	nop
 80061d8:	20000de8 	.word	0x20000de8

080061dc <__malloc_unlock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__malloc_unlock+0x8>)
 80061de:	f7ff b888 	b.w	80052f2 <__retarget_lock_release_recursive>
 80061e2:	bf00      	nop
 80061e4:	20000de8 	.word	0x20000de8

080061e8 <_Balloc>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	69c6      	ldr	r6, [r0, #28]
 80061ec:	4604      	mov	r4, r0
 80061ee:	460d      	mov	r5, r1
 80061f0:	b976      	cbnz	r6, 8006210 <_Balloc+0x28>
 80061f2:	2010      	movs	r0, #16
 80061f4:	f7ff ff44 	bl	8006080 <malloc>
 80061f8:	4602      	mov	r2, r0
 80061fa:	61e0      	str	r0, [r4, #28]
 80061fc:	b920      	cbnz	r0, 8006208 <_Balloc+0x20>
 80061fe:	216b      	movs	r1, #107	; 0x6b
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <_Balloc+0x78>)
 8006202:	4818      	ldr	r0, [pc, #96]	; (8006264 <_Balloc+0x7c>)
 8006204:	f000 fda2 	bl	8006d4c <__assert_func>
 8006208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800620c:	6006      	str	r6, [r0, #0]
 800620e:	60c6      	str	r6, [r0, #12]
 8006210:	69e6      	ldr	r6, [r4, #28]
 8006212:	68f3      	ldr	r3, [r6, #12]
 8006214:	b183      	cbz	r3, 8006238 <_Balloc+0x50>
 8006216:	69e3      	ldr	r3, [r4, #28]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800621e:	b9b8      	cbnz	r0, 8006250 <_Balloc+0x68>
 8006220:	2101      	movs	r1, #1
 8006222:	fa01 f605 	lsl.w	r6, r1, r5
 8006226:	1d72      	adds	r2, r6, #5
 8006228:	4620      	mov	r0, r4
 800622a:	0092      	lsls	r2, r2, #2
 800622c:	f000 fdac 	bl	8006d88 <_calloc_r>
 8006230:	b160      	cbz	r0, 800624c <_Balloc+0x64>
 8006232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006236:	e00e      	b.n	8006256 <_Balloc+0x6e>
 8006238:	2221      	movs	r2, #33	; 0x21
 800623a:	2104      	movs	r1, #4
 800623c:	4620      	mov	r0, r4
 800623e:	f000 fda3 	bl	8006d88 <_calloc_r>
 8006242:	69e3      	ldr	r3, [r4, #28]
 8006244:	60f0      	str	r0, [r6, #12]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e4      	bne.n	8006216 <_Balloc+0x2e>
 800624c:	2000      	movs	r0, #0
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	6802      	ldr	r2, [r0, #0]
 8006252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006256:	2300      	movs	r3, #0
 8006258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800625c:	e7f7      	b.n	800624e <_Balloc+0x66>
 800625e:	bf00      	nop
 8006260:	080083cc 	.word	0x080083cc
 8006264:	0800844c 	.word	0x0800844c

08006268 <_Bfree>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	69c6      	ldr	r6, [r0, #28]
 800626c:	4605      	mov	r5, r0
 800626e:	460c      	mov	r4, r1
 8006270:	b976      	cbnz	r6, 8006290 <_Bfree+0x28>
 8006272:	2010      	movs	r0, #16
 8006274:	f7ff ff04 	bl	8006080 <malloc>
 8006278:	4602      	mov	r2, r0
 800627a:	61e8      	str	r0, [r5, #28]
 800627c:	b920      	cbnz	r0, 8006288 <_Bfree+0x20>
 800627e:	218f      	movs	r1, #143	; 0x8f
 8006280:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <_Bfree+0x3c>)
 8006282:	4809      	ldr	r0, [pc, #36]	; (80062a8 <_Bfree+0x40>)
 8006284:	f000 fd62 	bl	8006d4c <__assert_func>
 8006288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800628c:	6006      	str	r6, [r0, #0]
 800628e:	60c6      	str	r6, [r0, #12]
 8006290:	b13c      	cbz	r4, 80062a2 <_Bfree+0x3a>
 8006292:	69eb      	ldr	r3, [r5, #28]
 8006294:	6862      	ldr	r2, [r4, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800629c:	6021      	str	r1, [r4, #0]
 800629e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	080083cc 	.word	0x080083cc
 80062a8:	0800844c 	.word	0x0800844c

080062ac <__multadd>:
 80062ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b0:	4607      	mov	r7, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	461e      	mov	r6, r3
 80062b6:	2000      	movs	r0, #0
 80062b8:	690d      	ldr	r5, [r1, #16]
 80062ba:	f101 0c14 	add.w	ip, r1, #20
 80062be:	f8dc 3000 	ldr.w	r3, [ip]
 80062c2:	3001      	adds	r0, #1
 80062c4:	b299      	uxth	r1, r3
 80062c6:	fb02 6101 	mla	r1, r2, r1, r6
 80062ca:	0c1e      	lsrs	r6, r3, #16
 80062cc:	0c0b      	lsrs	r3, r1, #16
 80062ce:	fb02 3306 	mla	r3, r2, r6, r3
 80062d2:	b289      	uxth	r1, r1
 80062d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062d8:	4285      	cmp	r5, r0
 80062da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062de:	f84c 1b04 	str.w	r1, [ip], #4
 80062e2:	dcec      	bgt.n	80062be <__multadd+0x12>
 80062e4:	b30e      	cbz	r6, 800632a <__multadd+0x7e>
 80062e6:	68a3      	ldr	r3, [r4, #8]
 80062e8:	42ab      	cmp	r3, r5
 80062ea:	dc19      	bgt.n	8006320 <__multadd+0x74>
 80062ec:	6861      	ldr	r1, [r4, #4]
 80062ee:	4638      	mov	r0, r7
 80062f0:	3101      	adds	r1, #1
 80062f2:	f7ff ff79 	bl	80061e8 <_Balloc>
 80062f6:	4680      	mov	r8, r0
 80062f8:	b928      	cbnz	r0, 8006306 <__multadd+0x5a>
 80062fa:	4602      	mov	r2, r0
 80062fc:	21ba      	movs	r1, #186	; 0xba
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <__multadd+0x84>)
 8006300:	480c      	ldr	r0, [pc, #48]	; (8006334 <__multadd+0x88>)
 8006302:	f000 fd23 	bl	8006d4c <__assert_func>
 8006306:	6922      	ldr	r2, [r4, #16]
 8006308:	f104 010c 	add.w	r1, r4, #12
 800630c:	3202      	adds	r2, #2
 800630e:	0092      	lsls	r2, r2, #2
 8006310:	300c      	adds	r0, #12
 8006312:	f000 fd0d 	bl	8006d30 <memcpy>
 8006316:	4621      	mov	r1, r4
 8006318:	4638      	mov	r0, r7
 800631a:	f7ff ffa5 	bl	8006268 <_Bfree>
 800631e:	4644      	mov	r4, r8
 8006320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006324:	3501      	adds	r5, #1
 8006326:	615e      	str	r6, [r3, #20]
 8006328:	6125      	str	r5, [r4, #16]
 800632a:	4620      	mov	r0, r4
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	0800843b 	.word	0x0800843b
 8006334:	0800844c 	.word	0x0800844c

08006338 <__hi0bits>:
 8006338:	0c02      	lsrs	r2, r0, #16
 800633a:	0412      	lsls	r2, r2, #16
 800633c:	4603      	mov	r3, r0
 800633e:	b9ca      	cbnz	r2, 8006374 <__hi0bits+0x3c>
 8006340:	0403      	lsls	r3, r0, #16
 8006342:	2010      	movs	r0, #16
 8006344:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006348:	bf04      	itt	eq
 800634a:	021b      	lsleq	r3, r3, #8
 800634c:	3008      	addeq	r0, #8
 800634e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006352:	bf04      	itt	eq
 8006354:	011b      	lsleq	r3, r3, #4
 8006356:	3004      	addeq	r0, #4
 8006358:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800635c:	bf04      	itt	eq
 800635e:	009b      	lsleq	r3, r3, #2
 8006360:	3002      	addeq	r0, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	db05      	blt.n	8006372 <__hi0bits+0x3a>
 8006366:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800636a:	f100 0001 	add.w	r0, r0, #1
 800636e:	bf08      	it	eq
 8006370:	2020      	moveq	r0, #32
 8006372:	4770      	bx	lr
 8006374:	2000      	movs	r0, #0
 8006376:	e7e5      	b.n	8006344 <__hi0bits+0xc>

08006378 <__lo0bits>:
 8006378:	6803      	ldr	r3, [r0, #0]
 800637a:	4602      	mov	r2, r0
 800637c:	f013 0007 	ands.w	r0, r3, #7
 8006380:	d00b      	beq.n	800639a <__lo0bits+0x22>
 8006382:	07d9      	lsls	r1, r3, #31
 8006384:	d421      	bmi.n	80063ca <__lo0bits+0x52>
 8006386:	0798      	lsls	r0, r3, #30
 8006388:	bf49      	itett	mi
 800638a:	085b      	lsrmi	r3, r3, #1
 800638c:	089b      	lsrpl	r3, r3, #2
 800638e:	2001      	movmi	r0, #1
 8006390:	6013      	strmi	r3, [r2, #0]
 8006392:	bf5c      	itt	pl
 8006394:	2002      	movpl	r0, #2
 8006396:	6013      	strpl	r3, [r2, #0]
 8006398:	4770      	bx	lr
 800639a:	b299      	uxth	r1, r3
 800639c:	b909      	cbnz	r1, 80063a2 <__lo0bits+0x2a>
 800639e:	2010      	movs	r0, #16
 80063a0:	0c1b      	lsrs	r3, r3, #16
 80063a2:	b2d9      	uxtb	r1, r3
 80063a4:	b909      	cbnz	r1, 80063aa <__lo0bits+0x32>
 80063a6:	3008      	adds	r0, #8
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	0719      	lsls	r1, r3, #28
 80063ac:	bf04      	itt	eq
 80063ae:	091b      	lsreq	r3, r3, #4
 80063b0:	3004      	addeq	r0, #4
 80063b2:	0799      	lsls	r1, r3, #30
 80063b4:	bf04      	itt	eq
 80063b6:	089b      	lsreq	r3, r3, #2
 80063b8:	3002      	addeq	r0, #2
 80063ba:	07d9      	lsls	r1, r3, #31
 80063bc:	d403      	bmi.n	80063c6 <__lo0bits+0x4e>
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	f100 0001 	add.w	r0, r0, #1
 80063c4:	d003      	beq.n	80063ce <__lo0bits+0x56>
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4770      	bx	lr
 80063ca:	2000      	movs	r0, #0
 80063cc:	4770      	bx	lr
 80063ce:	2020      	movs	r0, #32
 80063d0:	4770      	bx	lr
	...

080063d4 <__i2b>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	460c      	mov	r4, r1
 80063d8:	2101      	movs	r1, #1
 80063da:	f7ff ff05 	bl	80061e8 <_Balloc>
 80063de:	4602      	mov	r2, r0
 80063e0:	b928      	cbnz	r0, 80063ee <__i2b+0x1a>
 80063e2:	f240 1145 	movw	r1, #325	; 0x145
 80063e6:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <__i2b+0x24>)
 80063e8:	4804      	ldr	r0, [pc, #16]	; (80063fc <__i2b+0x28>)
 80063ea:	f000 fcaf 	bl	8006d4c <__assert_func>
 80063ee:	2301      	movs	r3, #1
 80063f0:	6144      	str	r4, [r0, #20]
 80063f2:	6103      	str	r3, [r0, #16]
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	bf00      	nop
 80063f8:	0800843b 	.word	0x0800843b
 80063fc:	0800844c 	.word	0x0800844c

08006400 <__multiply>:
 8006400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	4691      	mov	r9, r2
 8006406:	690a      	ldr	r2, [r1, #16]
 8006408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800640c:	460c      	mov	r4, r1
 800640e:	429a      	cmp	r2, r3
 8006410:	bfbe      	ittt	lt
 8006412:	460b      	movlt	r3, r1
 8006414:	464c      	movlt	r4, r9
 8006416:	4699      	movlt	r9, r3
 8006418:	6927      	ldr	r7, [r4, #16]
 800641a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800641e:	68a3      	ldr	r3, [r4, #8]
 8006420:	6861      	ldr	r1, [r4, #4]
 8006422:	eb07 060a 	add.w	r6, r7, sl
 8006426:	42b3      	cmp	r3, r6
 8006428:	b085      	sub	sp, #20
 800642a:	bfb8      	it	lt
 800642c:	3101      	addlt	r1, #1
 800642e:	f7ff fedb 	bl	80061e8 <_Balloc>
 8006432:	b930      	cbnz	r0, 8006442 <__multiply+0x42>
 8006434:	4602      	mov	r2, r0
 8006436:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800643a:	4b43      	ldr	r3, [pc, #268]	; (8006548 <__multiply+0x148>)
 800643c:	4843      	ldr	r0, [pc, #268]	; (800654c <__multiply+0x14c>)
 800643e:	f000 fc85 	bl	8006d4c <__assert_func>
 8006442:	f100 0514 	add.w	r5, r0, #20
 8006446:	462b      	mov	r3, r5
 8006448:	2200      	movs	r2, #0
 800644a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800644e:	4543      	cmp	r3, r8
 8006450:	d321      	bcc.n	8006496 <__multiply+0x96>
 8006452:	f104 0314 	add.w	r3, r4, #20
 8006456:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800645a:	f109 0314 	add.w	r3, r9, #20
 800645e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006462:	9202      	str	r2, [sp, #8]
 8006464:	1b3a      	subs	r2, r7, r4
 8006466:	3a15      	subs	r2, #21
 8006468:	f022 0203 	bic.w	r2, r2, #3
 800646c:	3204      	adds	r2, #4
 800646e:	f104 0115 	add.w	r1, r4, #21
 8006472:	428f      	cmp	r7, r1
 8006474:	bf38      	it	cc
 8006476:	2204      	movcc	r2, #4
 8006478:	9201      	str	r2, [sp, #4]
 800647a:	9a02      	ldr	r2, [sp, #8]
 800647c:	9303      	str	r3, [sp, #12]
 800647e:	429a      	cmp	r2, r3
 8006480:	d80c      	bhi.n	800649c <__multiply+0x9c>
 8006482:	2e00      	cmp	r6, #0
 8006484:	dd03      	ble.n	800648e <__multiply+0x8e>
 8006486:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800648a:	2b00      	cmp	r3, #0
 800648c:	d05a      	beq.n	8006544 <__multiply+0x144>
 800648e:	6106      	str	r6, [r0, #16]
 8006490:	b005      	add	sp, #20
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	f843 2b04 	str.w	r2, [r3], #4
 800649a:	e7d8      	b.n	800644e <__multiply+0x4e>
 800649c:	f8b3 a000 	ldrh.w	sl, [r3]
 80064a0:	f1ba 0f00 	cmp.w	sl, #0
 80064a4:	d023      	beq.n	80064ee <__multiply+0xee>
 80064a6:	46a9      	mov	r9, r5
 80064a8:	f04f 0c00 	mov.w	ip, #0
 80064ac:	f104 0e14 	add.w	lr, r4, #20
 80064b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064b4:	f8d9 1000 	ldr.w	r1, [r9]
 80064b8:	fa1f fb82 	uxth.w	fp, r2
 80064bc:	b289      	uxth	r1, r1
 80064be:	fb0a 110b 	mla	r1, sl, fp, r1
 80064c2:	4461      	add	r1, ip
 80064c4:	f8d9 c000 	ldr.w	ip, [r9]
 80064c8:	0c12      	lsrs	r2, r2, #16
 80064ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80064ce:	fb0a c202 	mla	r2, sl, r2, ip
 80064d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064d6:	b289      	uxth	r1, r1
 80064d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80064dc:	4577      	cmp	r7, lr
 80064de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064e2:	f849 1b04 	str.w	r1, [r9], #4
 80064e6:	d8e3      	bhi.n	80064b0 <__multiply+0xb0>
 80064e8:	9a01      	ldr	r2, [sp, #4]
 80064ea:	f845 c002 	str.w	ip, [r5, r2]
 80064ee:	9a03      	ldr	r2, [sp, #12]
 80064f0:	3304      	adds	r3, #4
 80064f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80064f6:	f1b9 0f00 	cmp.w	r9, #0
 80064fa:	d021      	beq.n	8006540 <__multiply+0x140>
 80064fc:	46ae      	mov	lr, r5
 80064fe:	f04f 0a00 	mov.w	sl, #0
 8006502:	6829      	ldr	r1, [r5, #0]
 8006504:	f104 0c14 	add.w	ip, r4, #20
 8006508:	f8bc b000 	ldrh.w	fp, [ip]
 800650c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006510:	b289      	uxth	r1, r1
 8006512:	fb09 220b 	mla	r2, r9, fp, r2
 8006516:	4452      	add	r2, sl
 8006518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800651c:	f84e 1b04 	str.w	r1, [lr], #4
 8006520:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006528:	f8be 1000 	ldrh.w	r1, [lr]
 800652c:	4567      	cmp	r7, ip
 800652e:	fb09 110a 	mla	r1, r9, sl, r1
 8006532:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006536:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800653a:	d8e5      	bhi.n	8006508 <__multiply+0x108>
 800653c:	9a01      	ldr	r2, [sp, #4]
 800653e:	50a9      	str	r1, [r5, r2]
 8006540:	3504      	adds	r5, #4
 8006542:	e79a      	b.n	800647a <__multiply+0x7a>
 8006544:	3e01      	subs	r6, #1
 8006546:	e79c      	b.n	8006482 <__multiply+0x82>
 8006548:	0800843b 	.word	0x0800843b
 800654c:	0800844c 	.word	0x0800844c

08006550 <__pow5mult>:
 8006550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006554:	4615      	mov	r5, r2
 8006556:	f012 0203 	ands.w	r2, r2, #3
 800655a:	4606      	mov	r6, r0
 800655c:	460f      	mov	r7, r1
 800655e:	d007      	beq.n	8006570 <__pow5mult+0x20>
 8006560:	4c25      	ldr	r4, [pc, #148]	; (80065f8 <__pow5mult+0xa8>)
 8006562:	3a01      	subs	r2, #1
 8006564:	2300      	movs	r3, #0
 8006566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800656a:	f7ff fe9f 	bl	80062ac <__multadd>
 800656e:	4607      	mov	r7, r0
 8006570:	10ad      	asrs	r5, r5, #2
 8006572:	d03d      	beq.n	80065f0 <__pow5mult+0xa0>
 8006574:	69f4      	ldr	r4, [r6, #28]
 8006576:	b97c      	cbnz	r4, 8006598 <__pow5mult+0x48>
 8006578:	2010      	movs	r0, #16
 800657a:	f7ff fd81 	bl	8006080 <malloc>
 800657e:	4602      	mov	r2, r0
 8006580:	61f0      	str	r0, [r6, #28]
 8006582:	b928      	cbnz	r0, 8006590 <__pow5mult+0x40>
 8006584:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006588:	4b1c      	ldr	r3, [pc, #112]	; (80065fc <__pow5mult+0xac>)
 800658a:	481d      	ldr	r0, [pc, #116]	; (8006600 <__pow5mult+0xb0>)
 800658c:	f000 fbde 	bl	8006d4c <__assert_func>
 8006590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006594:	6004      	str	r4, [r0, #0]
 8006596:	60c4      	str	r4, [r0, #12]
 8006598:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800659c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065a0:	b94c      	cbnz	r4, 80065b6 <__pow5mult+0x66>
 80065a2:	f240 2171 	movw	r1, #625	; 0x271
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7ff ff14 	bl	80063d4 <__i2b>
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	f04f 0900 	mov.w	r9, #0
 80065ba:	07eb      	lsls	r3, r5, #31
 80065bc:	d50a      	bpl.n	80065d4 <__pow5mult+0x84>
 80065be:	4639      	mov	r1, r7
 80065c0:	4622      	mov	r2, r4
 80065c2:	4630      	mov	r0, r6
 80065c4:	f7ff ff1c 	bl	8006400 <__multiply>
 80065c8:	4680      	mov	r8, r0
 80065ca:	4639      	mov	r1, r7
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff fe4b 	bl	8006268 <_Bfree>
 80065d2:	4647      	mov	r7, r8
 80065d4:	106d      	asrs	r5, r5, #1
 80065d6:	d00b      	beq.n	80065f0 <__pow5mult+0xa0>
 80065d8:	6820      	ldr	r0, [r4, #0]
 80065da:	b938      	cbnz	r0, 80065ec <__pow5mult+0x9c>
 80065dc:	4622      	mov	r2, r4
 80065de:	4621      	mov	r1, r4
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7ff ff0d 	bl	8006400 <__multiply>
 80065e6:	6020      	str	r0, [r4, #0]
 80065e8:	f8c0 9000 	str.w	r9, [r0]
 80065ec:	4604      	mov	r4, r0
 80065ee:	e7e4      	b.n	80065ba <__pow5mult+0x6a>
 80065f0:	4638      	mov	r0, r7
 80065f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f6:	bf00      	nop
 80065f8:	08008598 	.word	0x08008598
 80065fc:	080083cc 	.word	0x080083cc
 8006600:	0800844c 	.word	0x0800844c

08006604 <__lshift>:
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	460c      	mov	r4, r1
 800660a:	4607      	mov	r7, r0
 800660c:	4691      	mov	r9, r2
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	6849      	ldr	r1, [r1, #4]
 8006612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800661c:	f108 0601 	add.w	r6, r8, #1
 8006620:	42b3      	cmp	r3, r6
 8006622:	db0b      	blt.n	800663c <__lshift+0x38>
 8006624:	4638      	mov	r0, r7
 8006626:	f7ff fddf 	bl	80061e8 <_Balloc>
 800662a:	4605      	mov	r5, r0
 800662c:	b948      	cbnz	r0, 8006642 <__lshift+0x3e>
 800662e:	4602      	mov	r2, r0
 8006630:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006634:	4b27      	ldr	r3, [pc, #156]	; (80066d4 <__lshift+0xd0>)
 8006636:	4828      	ldr	r0, [pc, #160]	; (80066d8 <__lshift+0xd4>)
 8006638:	f000 fb88 	bl	8006d4c <__assert_func>
 800663c:	3101      	adds	r1, #1
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	e7ee      	b.n	8006620 <__lshift+0x1c>
 8006642:	2300      	movs	r3, #0
 8006644:	f100 0114 	add.w	r1, r0, #20
 8006648:	f100 0210 	add.w	r2, r0, #16
 800664c:	4618      	mov	r0, r3
 800664e:	4553      	cmp	r3, sl
 8006650:	db33      	blt.n	80066ba <__lshift+0xb6>
 8006652:	6920      	ldr	r0, [r4, #16]
 8006654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006658:	f104 0314 	add.w	r3, r4, #20
 800665c:	f019 091f 	ands.w	r9, r9, #31
 8006660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006664:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006668:	d02b      	beq.n	80066c2 <__lshift+0xbe>
 800666a:	468a      	mov	sl, r1
 800666c:	2200      	movs	r2, #0
 800666e:	f1c9 0e20 	rsb	lr, r9, #32
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	fa00 f009 	lsl.w	r0, r0, r9
 8006678:	4310      	orrs	r0, r2
 800667a:	f84a 0b04 	str.w	r0, [sl], #4
 800667e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006682:	459c      	cmp	ip, r3
 8006684:	fa22 f20e 	lsr.w	r2, r2, lr
 8006688:	d8f3      	bhi.n	8006672 <__lshift+0x6e>
 800668a:	ebac 0304 	sub.w	r3, ip, r4
 800668e:	3b15      	subs	r3, #21
 8006690:	f023 0303 	bic.w	r3, r3, #3
 8006694:	3304      	adds	r3, #4
 8006696:	f104 0015 	add.w	r0, r4, #21
 800669a:	4584      	cmp	ip, r0
 800669c:	bf38      	it	cc
 800669e:	2304      	movcc	r3, #4
 80066a0:	50ca      	str	r2, [r1, r3]
 80066a2:	b10a      	cbz	r2, 80066a8 <__lshift+0xa4>
 80066a4:	f108 0602 	add.w	r6, r8, #2
 80066a8:	3e01      	subs	r6, #1
 80066aa:	4638      	mov	r0, r7
 80066ac:	4621      	mov	r1, r4
 80066ae:	612e      	str	r6, [r5, #16]
 80066b0:	f7ff fdda 	bl	8006268 <_Bfree>
 80066b4:	4628      	mov	r0, r5
 80066b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80066be:	3301      	adds	r3, #1
 80066c0:	e7c5      	b.n	800664e <__lshift+0x4a>
 80066c2:	3904      	subs	r1, #4
 80066c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c8:	459c      	cmp	ip, r3
 80066ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80066ce:	d8f9      	bhi.n	80066c4 <__lshift+0xc0>
 80066d0:	e7ea      	b.n	80066a8 <__lshift+0xa4>
 80066d2:	bf00      	nop
 80066d4:	0800843b 	.word	0x0800843b
 80066d8:	0800844c 	.word	0x0800844c

080066dc <__mcmp>:
 80066dc:	4603      	mov	r3, r0
 80066de:	690a      	ldr	r2, [r1, #16]
 80066e0:	6900      	ldr	r0, [r0, #16]
 80066e2:	b530      	push	{r4, r5, lr}
 80066e4:	1a80      	subs	r0, r0, r2
 80066e6:	d10d      	bne.n	8006704 <__mcmp+0x28>
 80066e8:	3314      	adds	r3, #20
 80066ea:	3114      	adds	r1, #20
 80066ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066fc:	4295      	cmp	r5, r2
 80066fe:	d002      	beq.n	8006706 <__mcmp+0x2a>
 8006700:	d304      	bcc.n	800670c <__mcmp+0x30>
 8006702:	2001      	movs	r0, #1
 8006704:	bd30      	pop	{r4, r5, pc}
 8006706:	42a3      	cmp	r3, r4
 8006708:	d3f4      	bcc.n	80066f4 <__mcmp+0x18>
 800670a:	e7fb      	b.n	8006704 <__mcmp+0x28>
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	e7f8      	b.n	8006704 <__mcmp+0x28>
	...

08006714 <__mdiff>:
 8006714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	460d      	mov	r5, r1
 800671a:	4607      	mov	r7, r0
 800671c:	4611      	mov	r1, r2
 800671e:	4628      	mov	r0, r5
 8006720:	4614      	mov	r4, r2
 8006722:	f7ff ffdb 	bl	80066dc <__mcmp>
 8006726:	1e06      	subs	r6, r0, #0
 8006728:	d111      	bne.n	800674e <__mdiff+0x3a>
 800672a:	4631      	mov	r1, r6
 800672c:	4638      	mov	r0, r7
 800672e:	f7ff fd5b 	bl	80061e8 <_Balloc>
 8006732:	4602      	mov	r2, r0
 8006734:	b928      	cbnz	r0, 8006742 <__mdiff+0x2e>
 8006736:	f240 2137 	movw	r1, #567	; 0x237
 800673a:	4b3a      	ldr	r3, [pc, #232]	; (8006824 <__mdiff+0x110>)
 800673c:	483a      	ldr	r0, [pc, #232]	; (8006828 <__mdiff+0x114>)
 800673e:	f000 fb05 	bl	8006d4c <__assert_func>
 8006742:	2301      	movs	r3, #1
 8006744:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006748:	4610      	mov	r0, r2
 800674a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674e:	bfa4      	itt	ge
 8006750:	4623      	movge	r3, r4
 8006752:	462c      	movge	r4, r5
 8006754:	4638      	mov	r0, r7
 8006756:	6861      	ldr	r1, [r4, #4]
 8006758:	bfa6      	itte	ge
 800675a:	461d      	movge	r5, r3
 800675c:	2600      	movge	r6, #0
 800675e:	2601      	movlt	r6, #1
 8006760:	f7ff fd42 	bl	80061e8 <_Balloc>
 8006764:	4602      	mov	r2, r0
 8006766:	b918      	cbnz	r0, 8006770 <__mdiff+0x5c>
 8006768:	f240 2145 	movw	r1, #581	; 0x245
 800676c:	4b2d      	ldr	r3, [pc, #180]	; (8006824 <__mdiff+0x110>)
 800676e:	e7e5      	b.n	800673c <__mdiff+0x28>
 8006770:	f102 0814 	add.w	r8, r2, #20
 8006774:	46c2      	mov	sl, r8
 8006776:	f04f 0c00 	mov.w	ip, #0
 800677a:	6927      	ldr	r7, [r4, #16]
 800677c:	60c6      	str	r6, [r0, #12]
 800677e:	692e      	ldr	r6, [r5, #16]
 8006780:	f104 0014 	add.w	r0, r4, #20
 8006784:	f105 0914 	add.w	r9, r5, #20
 8006788:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800678c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006790:	3410      	adds	r4, #16
 8006792:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006796:	f859 3b04 	ldr.w	r3, [r9], #4
 800679a:	fa1f f18b 	uxth.w	r1, fp
 800679e:	4461      	add	r1, ip
 80067a0:	fa1f fc83 	uxth.w	ip, r3
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	eba1 010c 	sub.w	r1, r1, ip
 80067aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067b2:	b289      	uxth	r1, r1
 80067b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80067b8:	454e      	cmp	r6, r9
 80067ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80067be:	f84a 1b04 	str.w	r1, [sl], #4
 80067c2:	d8e6      	bhi.n	8006792 <__mdiff+0x7e>
 80067c4:	1b73      	subs	r3, r6, r5
 80067c6:	3b15      	subs	r3, #21
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	3515      	adds	r5, #21
 80067ce:	3304      	adds	r3, #4
 80067d0:	42ae      	cmp	r6, r5
 80067d2:	bf38      	it	cc
 80067d4:	2304      	movcc	r3, #4
 80067d6:	4418      	add	r0, r3
 80067d8:	4443      	add	r3, r8
 80067da:	461e      	mov	r6, r3
 80067dc:	4605      	mov	r5, r0
 80067de:	4575      	cmp	r5, lr
 80067e0:	d30e      	bcc.n	8006800 <__mdiff+0xec>
 80067e2:	f10e 0103 	add.w	r1, lr, #3
 80067e6:	1a09      	subs	r1, r1, r0
 80067e8:	f021 0103 	bic.w	r1, r1, #3
 80067ec:	3803      	subs	r0, #3
 80067ee:	4586      	cmp	lr, r0
 80067f0:	bf38      	it	cc
 80067f2:	2100      	movcc	r1, #0
 80067f4:	440b      	add	r3, r1
 80067f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067fa:	b189      	cbz	r1, 8006820 <__mdiff+0x10c>
 80067fc:	6117      	str	r7, [r2, #16]
 80067fe:	e7a3      	b.n	8006748 <__mdiff+0x34>
 8006800:	f855 8b04 	ldr.w	r8, [r5], #4
 8006804:	fa1f f188 	uxth.w	r1, r8
 8006808:	4461      	add	r1, ip
 800680a:	140c      	asrs	r4, r1, #16
 800680c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006810:	b289      	uxth	r1, r1
 8006812:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006816:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800681a:	f846 1b04 	str.w	r1, [r6], #4
 800681e:	e7de      	b.n	80067de <__mdiff+0xca>
 8006820:	3f01      	subs	r7, #1
 8006822:	e7e8      	b.n	80067f6 <__mdiff+0xe2>
 8006824:	0800843b 	.word	0x0800843b
 8006828:	0800844c 	.word	0x0800844c

0800682c <__d2b>:
 800682c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800682e:	2101      	movs	r1, #1
 8006830:	4617      	mov	r7, r2
 8006832:	461c      	mov	r4, r3
 8006834:	9e08      	ldr	r6, [sp, #32]
 8006836:	f7ff fcd7 	bl	80061e8 <_Balloc>
 800683a:	4605      	mov	r5, r0
 800683c:	b930      	cbnz	r0, 800684c <__d2b+0x20>
 800683e:	4602      	mov	r2, r0
 8006840:	f240 310f 	movw	r1, #783	; 0x30f
 8006844:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <__d2b+0xa4>)
 8006846:	4823      	ldr	r0, [pc, #140]	; (80068d4 <__d2b+0xa8>)
 8006848:	f000 fa80 	bl	8006d4c <__assert_func>
 800684c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006850:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006854:	bb24      	cbnz	r4, 80068a0 <__d2b+0x74>
 8006856:	2f00      	cmp	r7, #0
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	d026      	beq.n	80068aa <__d2b+0x7e>
 800685c:	4668      	mov	r0, sp
 800685e:	9700      	str	r7, [sp, #0]
 8006860:	f7ff fd8a 	bl	8006378 <__lo0bits>
 8006864:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006868:	b1e8      	cbz	r0, 80068a6 <__d2b+0x7a>
 800686a:	f1c0 0320 	rsb	r3, r0, #32
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	430b      	orrs	r3, r1
 8006874:	40c2      	lsrs	r2, r0
 8006876:	616b      	str	r3, [r5, #20]
 8006878:	9201      	str	r2, [sp, #4]
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf14      	ite	ne
 8006880:	2102      	movne	r1, #2
 8006882:	2101      	moveq	r1, #1
 8006884:	61ab      	str	r3, [r5, #24]
 8006886:	6129      	str	r1, [r5, #16]
 8006888:	b1bc      	cbz	r4, 80068ba <__d2b+0x8e>
 800688a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800688e:	4404      	add	r4, r0
 8006890:	6034      	str	r4, [r6, #0]
 8006892:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	6018      	str	r0, [r3, #0]
 800689a:	4628      	mov	r0, r5
 800689c:	b003      	add	sp, #12
 800689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068a4:	e7d7      	b.n	8006856 <__d2b+0x2a>
 80068a6:	6169      	str	r1, [r5, #20]
 80068a8:	e7e7      	b.n	800687a <__d2b+0x4e>
 80068aa:	a801      	add	r0, sp, #4
 80068ac:	f7ff fd64 	bl	8006378 <__lo0bits>
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	2101      	movs	r1, #1
 80068b4:	616b      	str	r3, [r5, #20]
 80068b6:	3020      	adds	r0, #32
 80068b8:	e7e5      	b.n	8006886 <__d2b+0x5a>
 80068ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068be:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80068c2:	6030      	str	r0, [r6, #0]
 80068c4:	6918      	ldr	r0, [r3, #16]
 80068c6:	f7ff fd37 	bl	8006338 <__hi0bits>
 80068ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068ce:	e7e2      	b.n	8006896 <__d2b+0x6a>
 80068d0:	0800843b 	.word	0x0800843b
 80068d4:	0800844c 	.word	0x0800844c

080068d8 <__ssputs_r>:
 80068d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068dc:	461f      	mov	r7, r3
 80068de:	688e      	ldr	r6, [r1, #8]
 80068e0:	4682      	mov	sl, r0
 80068e2:	42be      	cmp	r6, r7
 80068e4:	460c      	mov	r4, r1
 80068e6:	4690      	mov	r8, r2
 80068e8:	680b      	ldr	r3, [r1, #0]
 80068ea:	d82c      	bhi.n	8006946 <__ssputs_r+0x6e>
 80068ec:	898a      	ldrh	r2, [r1, #12]
 80068ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068f2:	d026      	beq.n	8006942 <__ssputs_r+0x6a>
 80068f4:	6965      	ldr	r5, [r4, #20]
 80068f6:	6909      	ldr	r1, [r1, #16]
 80068f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068fc:	eba3 0901 	sub.w	r9, r3, r1
 8006900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006904:	1c7b      	adds	r3, r7, #1
 8006906:	444b      	add	r3, r9
 8006908:	106d      	asrs	r5, r5, #1
 800690a:	429d      	cmp	r5, r3
 800690c:	bf38      	it	cc
 800690e:	461d      	movcc	r5, r3
 8006910:	0553      	lsls	r3, r2, #21
 8006912:	d527      	bpl.n	8006964 <__ssputs_r+0x8c>
 8006914:	4629      	mov	r1, r5
 8006916:	f7ff fbdb 	bl	80060d0 <_malloc_r>
 800691a:	4606      	mov	r6, r0
 800691c:	b360      	cbz	r0, 8006978 <__ssputs_r+0xa0>
 800691e:	464a      	mov	r2, r9
 8006920:	6921      	ldr	r1, [r4, #16]
 8006922:	f000 fa05 	bl	8006d30 <memcpy>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800692c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	6126      	str	r6, [r4, #16]
 8006934:	444e      	add	r6, r9
 8006936:	6026      	str	r6, [r4, #0]
 8006938:	463e      	mov	r6, r7
 800693a:	6165      	str	r5, [r4, #20]
 800693c:	eba5 0509 	sub.w	r5, r5, r9
 8006940:	60a5      	str	r5, [r4, #8]
 8006942:	42be      	cmp	r6, r7
 8006944:	d900      	bls.n	8006948 <__ssputs_r+0x70>
 8006946:	463e      	mov	r6, r7
 8006948:	4632      	mov	r2, r6
 800694a:	4641      	mov	r1, r8
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	f000 f9c5 	bl	8006cdc <memmove>
 8006952:	2000      	movs	r0, #0
 8006954:	68a3      	ldr	r3, [r4, #8]
 8006956:	1b9b      	subs	r3, r3, r6
 8006958:	60a3      	str	r3, [r4, #8]
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	4433      	add	r3, r6
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006964:	462a      	mov	r2, r5
 8006966:	f000 fa35 	bl	8006dd4 <_realloc_r>
 800696a:	4606      	mov	r6, r0
 800696c:	2800      	cmp	r0, #0
 800696e:	d1e0      	bne.n	8006932 <__ssputs_r+0x5a>
 8006970:	4650      	mov	r0, sl
 8006972:	6921      	ldr	r1, [r4, #16]
 8006974:	f7ff fb3c 	bl	8005ff0 <_free_r>
 8006978:	230c      	movs	r3, #12
 800697a:	f8ca 3000 	str.w	r3, [sl]
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	e7e9      	b.n	8006960 <__ssputs_r+0x88>

0800698c <_svfiprintf_r>:
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	4698      	mov	r8, r3
 8006992:	898b      	ldrh	r3, [r1, #12]
 8006994:	4607      	mov	r7, r0
 8006996:	061b      	lsls	r3, r3, #24
 8006998:	460d      	mov	r5, r1
 800699a:	4614      	mov	r4, r2
 800699c:	b09d      	sub	sp, #116	; 0x74
 800699e:	d50e      	bpl.n	80069be <_svfiprintf_r+0x32>
 80069a0:	690b      	ldr	r3, [r1, #16]
 80069a2:	b963      	cbnz	r3, 80069be <_svfiprintf_r+0x32>
 80069a4:	2140      	movs	r1, #64	; 0x40
 80069a6:	f7ff fb93 	bl	80060d0 <_malloc_r>
 80069aa:	6028      	str	r0, [r5, #0]
 80069ac:	6128      	str	r0, [r5, #16]
 80069ae:	b920      	cbnz	r0, 80069ba <_svfiprintf_r+0x2e>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	e0d0      	b.n	8006b5c <_svfiprintf_r+0x1d0>
 80069ba:	2340      	movs	r3, #64	; 0x40
 80069bc:	616b      	str	r3, [r5, #20]
 80069be:	2300      	movs	r3, #0
 80069c0:	9309      	str	r3, [sp, #36]	; 0x24
 80069c2:	2320      	movs	r3, #32
 80069c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069c8:	2330      	movs	r3, #48	; 0x30
 80069ca:	f04f 0901 	mov.w	r9, #1
 80069ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80069d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006b74 <_svfiprintf_r+0x1e8>
 80069d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069da:	4623      	mov	r3, r4
 80069dc:	469a      	mov	sl, r3
 80069de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e2:	b10a      	cbz	r2, 80069e8 <_svfiprintf_r+0x5c>
 80069e4:	2a25      	cmp	r2, #37	; 0x25
 80069e6:	d1f9      	bne.n	80069dc <_svfiprintf_r+0x50>
 80069e8:	ebba 0b04 	subs.w	fp, sl, r4
 80069ec:	d00b      	beq.n	8006a06 <_svfiprintf_r+0x7a>
 80069ee:	465b      	mov	r3, fp
 80069f0:	4622      	mov	r2, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	4638      	mov	r0, r7
 80069f6:	f7ff ff6f 	bl	80068d8 <__ssputs_r>
 80069fa:	3001      	adds	r0, #1
 80069fc:	f000 80a9 	beq.w	8006b52 <_svfiprintf_r+0x1c6>
 8006a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a02:	445a      	add	r2, fp
 8006a04:	9209      	str	r2, [sp, #36]	; 0x24
 8006a06:	f89a 3000 	ldrb.w	r3, [sl]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80a1 	beq.w	8006b52 <_svfiprintf_r+0x1c6>
 8006a10:	2300      	movs	r3, #0
 8006a12:	f04f 32ff 	mov.w	r2, #4294967295
 8006a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a1a:	f10a 0a01 	add.w	sl, sl, #1
 8006a1e:	9304      	str	r3, [sp, #16]
 8006a20:	9307      	str	r3, [sp, #28]
 8006a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a26:	931a      	str	r3, [sp, #104]	; 0x68
 8006a28:	4654      	mov	r4, sl
 8006a2a:	2205      	movs	r2, #5
 8006a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a30:	4850      	ldr	r0, [pc, #320]	; (8006b74 <_svfiprintf_r+0x1e8>)
 8006a32:	f7fe fc5f 	bl	80052f4 <memchr>
 8006a36:	9a04      	ldr	r2, [sp, #16]
 8006a38:	b9d8      	cbnz	r0, 8006a72 <_svfiprintf_r+0xe6>
 8006a3a:	06d0      	lsls	r0, r2, #27
 8006a3c:	bf44      	itt	mi
 8006a3e:	2320      	movmi	r3, #32
 8006a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a44:	0711      	lsls	r1, r2, #28
 8006a46:	bf44      	itt	mi
 8006a48:	232b      	movmi	r3, #43	; 0x2b
 8006a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a52:	2b2a      	cmp	r3, #42	; 0x2a
 8006a54:	d015      	beq.n	8006a82 <_svfiprintf_r+0xf6>
 8006a56:	4654      	mov	r4, sl
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f04f 0c0a 	mov.w	ip, #10
 8006a5e:	9a07      	ldr	r2, [sp, #28]
 8006a60:	4621      	mov	r1, r4
 8006a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a66:	3b30      	subs	r3, #48	; 0x30
 8006a68:	2b09      	cmp	r3, #9
 8006a6a:	d94d      	bls.n	8006b08 <_svfiprintf_r+0x17c>
 8006a6c:	b1b0      	cbz	r0, 8006a9c <_svfiprintf_r+0x110>
 8006a6e:	9207      	str	r2, [sp, #28]
 8006a70:	e014      	b.n	8006a9c <_svfiprintf_r+0x110>
 8006a72:	eba0 0308 	sub.w	r3, r0, r8
 8006a76:	fa09 f303 	lsl.w	r3, r9, r3
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	46a2      	mov	sl, r4
 8006a7e:	9304      	str	r3, [sp, #16]
 8006a80:	e7d2      	b.n	8006a28 <_svfiprintf_r+0x9c>
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	1d19      	adds	r1, r3, #4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	9103      	str	r1, [sp, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bfbb      	ittet	lt
 8006a8e:	425b      	neglt	r3, r3
 8006a90:	f042 0202 	orrlt.w	r2, r2, #2
 8006a94:	9307      	strge	r3, [sp, #28]
 8006a96:	9307      	strlt	r3, [sp, #28]
 8006a98:	bfb8      	it	lt
 8006a9a:	9204      	strlt	r2, [sp, #16]
 8006a9c:	7823      	ldrb	r3, [r4, #0]
 8006a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa0:	d10c      	bne.n	8006abc <_svfiprintf_r+0x130>
 8006aa2:	7863      	ldrb	r3, [r4, #1]
 8006aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa6:	d134      	bne.n	8006b12 <_svfiprintf_r+0x186>
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	3402      	adds	r4, #2
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	9203      	str	r2, [sp, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bfb8      	it	lt
 8006ab6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aba:	9305      	str	r3, [sp, #20]
 8006abc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006b78 <_svfiprintf_r+0x1ec>
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	7821      	ldrb	r1, [r4, #0]
 8006ac6:	f7fe fc15 	bl	80052f4 <memchr>
 8006aca:	b138      	cbz	r0, 8006adc <_svfiprintf_r+0x150>
 8006acc:	2240      	movs	r2, #64	; 0x40
 8006ace:	9b04      	ldr	r3, [sp, #16]
 8006ad0:	eba0 000a 	sub.w	r0, r0, sl
 8006ad4:	4082      	lsls	r2, r0
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	3401      	adds	r4, #1
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae0:	2206      	movs	r2, #6
 8006ae2:	4826      	ldr	r0, [pc, #152]	; (8006b7c <_svfiprintf_r+0x1f0>)
 8006ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ae8:	f7fe fc04 	bl	80052f4 <memchr>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d038      	beq.n	8006b62 <_svfiprintf_r+0x1d6>
 8006af0:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <_svfiprintf_r+0x1f4>)
 8006af2:	bb1b      	cbnz	r3, 8006b3c <_svfiprintf_r+0x1b0>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	3307      	adds	r3, #7
 8006af8:	f023 0307 	bic.w	r3, r3, #7
 8006afc:	3308      	adds	r3, #8
 8006afe:	9303      	str	r3, [sp, #12]
 8006b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b02:	4433      	add	r3, r6
 8006b04:	9309      	str	r3, [sp, #36]	; 0x24
 8006b06:	e768      	b.n	80069da <_svfiprintf_r+0x4e>
 8006b08:	460c      	mov	r4, r1
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b10:	e7a6      	b.n	8006a60 <_svfiprintf_r+0xd4>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f04f 0c0a 	mov.w	ip, #10
 8006b18:	4619      	mov	r1, r3
 8006b1a:	3401      	adds	r4, #1
 8006b1c:	9305      	str	r3, [sp, #20]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b24:	3a30      	subs	r2, #48	; 0x30
 8006b26:	2a09      	cmp	r2, #9
 8006b28:	d903      	bls.n	8006b32 <_svfiprintf_r+0x1a6>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0c6      	beq.n	8006abc <_svfiprintf_r+0x130>
 8006b2e:	9105      	str	r1, [sp, #20]
 8006b30:	e7c4      	b.n	8006abc <_svfiprintf_r+0x130>
 8006b32:	4604      	mov	r4, r0
 8006b34:	2301      	movs	r3, #1
 8006b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b3a:	e7f0      	b.n	8006b1e <_svfiprintf_r+0x192>
 8006b3c:	ab03      	add	r3, sp, #12
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	462a      	mov	r2, r5
 8006b42:	4638      	mov	r0, r7
 8006b44:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <_svfiprintf_r+0x1f8>)
 8006b46:	a904      	add	r1, sp, #16
 8006b48:	f7fd fe80 	bl	800484c <_printf_float>
 8006b4c:	1c42      	adds	r2, r0, #1
 8006b4e:	4606      	mov	r6, r0
 8006b50:	d1d6      	bne.n	8006b00 <_svfiprintf_r+0x174>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	065b      	lsls	r3, r3, #25
 8006b56:	f53f af2d 	bmi.w	80069b4 <_svfiprintf_r+0x28>
 8006b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5c:	b01d      	add	sp, #116	; 0x74
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	ab03      	add	r3, sp, #12
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	462a      	mov	r2, r5
 8006b68:	4638      	mov	r0, r7
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <_svfiprintf_r+0x1f8>)
 8006b6c:	a904      	add	r1, sp, #16
 8006b6e:	f7fe f90d 	bl	8004d8c <_printf_i>
 8006b72:	e7eb      	b.n	8006b4c <_svfiprintf_r+0x1c0>
 8006b74:	080085a4 	.word	0x080085a4
 8006b78:	080085aa 	.word	0x080085aa
 8006b7c:	080085ae 	.word	0x080085ae
 8006b80:	0800484d 	.word	0x0800484d
 8006b84:	080068d9 	.word	0x080068d9

08006b88 <__sflush_r>:
 8006b88:	898a      	ldrh	r2, [r1, #12]
 8006b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	0710      	lsls	r0, r2, #28
 8006b90:	460c      	mov	r4, r1
 8006b92:	d457      	bmi.n	8006c44 <__sflush_r+0xbc>
 8006b94:	684b      	ldr	r3, [r1, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dc04      	bgt.n	8006ba4 <__sflush_r+0x1c>
 8006b9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dc01      	bgt.n	8006ba4 <__sflush_r+0x1c>
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ba6:	2e00      	cmp	r6, #0
 8006ba8:	d0fa      	beq.n	8006ba0 <__sflush_r+0x18>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bb0:	682f      	ldr	r7, [r5, #0]
 8006bb2:	6a21      	ldr	r1, [r4, #32]
 8006bb4:	602b      	str	r3, [r5, #0]
 8006bb6:	d032      	beq.n	8006c1e <__sflush_r+0x96>
 8006bb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	075a      	lsls	r2, r3, #29
 8006bbe:	d505      	bpl.n	8006bcc <__sflush_r+0x44>
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	1ac0      	subs	r0, r0, r3
 8006bc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bc6:	b10b      	cbz	r3, 8006bcc <__sflush_r+0x44>
 8006bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bca:	1ac0      	subs	r0, r0, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4602      	mov	r2, r0
 8006bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	6a21      	ldr	r1, [r4, #32]
 8006bd6:	47b0      	blx	r6
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	d106      	bne.n	8006bec <__sflush_r+0x64>
 8006bde:	6829      	ldr	r1, [r5, #0]
 8006be0:	291d      	cmp	r1, #29
 8006be2:	d82b      	bhi.n	8006c3c <__sflush_r+0xb4>
 8006be4:	4a28      	ldr	r2, [pc, #160]	; (8006c88 <__sflush_r+0x100>)
 8006be6:	410a      	asrs	r2, r1
 8006be8:	07d6      	lsls	r6, r2, #31
 8006bea:	d427      	bmi.n	8006c3c <__sflush_r+0xb4>
 8006bec:	2200      	movs	r2, #0
 8006bee:	6062      	str	r2, [r4, #4]
 8006bf0:	6922      	ldr	r2, [r4, #16]
 8006bf2:	04d9      	lsls	r1, r3, #19
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	d504      	bpl.n	8006c02 <__sflush_r+0x7a>
 8006bf8:	1c42      	adds	r2, r0, #1
 8006bfa:	d101      	bne.n	8006c00 <__sflush_r+0x78>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b903      	cbnz	r3, 8006c02 <__sflush_r+0x7a>
 8006c00:	6560      	str	r0, [r4, #84]	; 0x54
 8006c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c04:	602f      	str	r7, [r5, #0]
 8006c06:	2900      	cmp	r1, #0
 8006c08:	d0ca      	beq.n	8006ba0 <__sflush_r+0x18>
 8006c0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c0e:	4299      	cmp	r1, r3
 8006c10:	d002      	beq.n	8006c18 <__sflush_r+0x90>
 8006c12:	4628      	mov	r0, r5
 8006c14:	f7ff f9ec 	bl	8005ff0 <_free_r>
 8006c18:	2000      	movs	r0, #0
 8006c1a:	6360      	str	r0, [r4, #52]	; 0x34
 8006c1c:	e7c1      	b.n	8006ba2 <__sflush_r+0x1a>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4628      	mov	r0, r5
 8006c22:	47b0      	blx	r6
 8006c24:	1c41      	adds	r1, r0, #1
 8006c26:	d1c8      	bne.n	8006bba <__sflush_r+0x32>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0c5      	beq.n	8006bba <__sflush_r+0x32>
 8006c2e:	2b1d      	cmp	r3, #29
 8006c30:	d001      	beq.n	8006c36 <__sflush_r+0xae>
 8006c32:	2b16      	cmp	r3, #22
 8006c34:	d101      	bne.n	8006c3a <__sflush_r+0xb2>
 8006c36:	602f      	str	r7, [r5, #0]
 8006c38:	e7b2      	b.n	8006ba0 <__sflush_r+0x18>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	e7ae      	b.n	8006ba2 <__sflush_r+0x1a>
 8006c44:	690f      	ldr	r7, [r1, #16]
 8006c46:	2f00      	cmp	r7, #0
 8006c48:	d0aa      	beq.n	8006ba0 <__sflush_r+0x18>
 8006c4a:	0793      	lsls	r3, r2, #30
 8006c4c:	bf18      	it	ne
 8006c4e:	2300      	movne	r3, #0
 8006c50:	680e      	ldr	r6, [r1, #0]
 8006c52:	bf08      	it	eq
 8006c54:	694b      	ldreq	r3, [r1, #20]
 8006c56:	1bf6      	subs	r6, r6, r7
 8006c58:	600f      	str	r7, [r1, #0]
 8006c5a:	608b      	str	r3, [r1, #8]
 8006c5c:	2e00      	cmp	r6, #0
 8006c5e:	dd9f      	ble.n	8006ba0 <__sflush_r+0x18>
 8006c60:	4633      	mov	r3, r6
 8006c62:	463a      	mov	r2, r7
 8006c64:	4628      	mov	r0, r5
 8006c66:	6a21      	ldr	r1, [r4, #32]
 8006c68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c6c:	47e0      	blx	ip
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	dc06      	bgt.n	8006c80 <__sflush_r+0xf8>
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	e790      	b.n	8006ba2 <__sflush_r+0x1a>
 8006c80:	4407      	add	r7, r0
 8006c82:	1a36      	subs	r6, r6, r0
 8006c84:	e7ea      	b.n	8006c5c <__sflush_r+0xd4>
 8006c86:	bf00      	nop
 8006c88:	dfbffffe 	.word	0xdfbffffe

08006c8c <_fflush_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	690b      	ldr	r3, [r1, #16]
 8006c90:	4605      	mov	r5, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	b913      	cbnz	r3, 8006c9c <_fflush_r+0x10>
 8006c96:	2500      	movs	r5, #0
 8006c98:	4628      	mov	r0, r5
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	b118      	cbz	r0, 8006ca6 <_fflush_r+0x1a>
 8006c9e:	6a03      	ldr	r3, [r0, #32]
 8006ca0:	b90b      	cbnz	r3, 8006ca6 <_fflush_r+0x1a>
 8006ca2:	f7fe fa0f 	bl	80050c4 <__sinit>
 8006ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f3      	beq.n	8006c96 <_fflush_r+0xa>
 8006cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cb0:	07d0      	lsls	r0, r2, #31
 8006cb2:	d404      	bmi.n	8006cbe <_fflush_r+0x32>
 8006cb4:	0599      	lsls	r1, r3, #22
 8006cb6:	d402      	bmi.n	8006cbe <_fflush_r+0x32>
 8006cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cba:	f7fe fb19 	bl	80052f0 <__retarget_lock_acquire_recursive>
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	f7ff ff61 	bl	8006b88 <__sflush_r>
 8006cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc8:	4605      	mov	r5, r0
 8006cca:	07da      	lsls	r2, r3, #31
 8006ccc:	d4e4      	bmi.n	8006c98 <_fflush_r+0xc>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	059b      	lsls	r3, r3, #22
 8006cd2:	d4e1      	bmi.n	8006c98 <_fflush_r+0xc>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd6:	f7fe fb0c 	bl	80052f2 <__retarget_lock_release_recursive>
 8006cda:	e7dd      	b.n	8006c98 <_fflush_r+0xc>

08006cdc <memmove>:
 8006cdc:	4288      	cmp	r0, r1
 8006cde:	b510      	push	{r4, lr}
 8006ce0:	eb01 0402 	add.w	r4, r1, r2
 8006ce4:	d902      	bls.n	8006cec <memmove+0x10>
 8006ce6:	4284      	cmp	r4, r0
 8006ce8:	4623      	mov	r3, r4
 8006cea:	d807      	bhi.n	8006cfc <memmove+0x20>
 8006cec:	1e43      	subs	r3, r0, #1
 8006cee:	42a1      	cmp	r1, r4
 8006cf0:	d008      	beq.n	8006d04 <memmove+0x28>
 8006cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cfa:	e7f8      	b.n	8006cee <memmove+0x12>
 8006cfc:	4601      	mov	r1, r0
 8006cfe:	4402      	add	r2, r0
 8006d00:	428a      	cmp	r2, r1
 8006d02:	d100      	bne.n	8006d06 <memmove+0x2a>
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d0e:	e7f7      	b.n	8006d00 <memmove+0x24>

08006d10 <_sbrk_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	2300      	movs	r3, #0
 8006d14:	4d05      	ldr	r5, [pc, #20]	; (8006d2c <_sbrk_r+0x1c>)
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	f7fb ff52 	bl	8002bc4 <_sbrk>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_sbrk_r+0x1a>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_sbrk_r+0x1a>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	20000de4 	.word	0x20000de4

08006d30 <memcpy>:
 8006d30:	440a      	add	r2, r1
 8006d32:	4291      	cmp	r1, r2
 8006d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d38:	d100      	bne.n	8006d3c <memcpy+0xc>
 8006d3a:	4770      	bx	lr
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d42:	4291      	cmp	r1, r2
 8006d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d48:	d1f9      	bne.n	8006d3e <memcpy+0xe>
 8006d4a:	bd10      	pop	{r4, pc}

08006d4c <__assert_func>:
 8006d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d4e:	4614      	mov	r4, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <__assert_func+0x2c>)
 8006d54:	4605      	mov	r5, r0
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68d8      	ldr	r0, [r3, #12]
 8006d5a:	b14c      	cbz	r4, 8006d70 <__assert_func+0x24>
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <__assert_func+0x30>)
 8006d5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d62:	9100      	str	r1, [sp, #0]
 8006d64:	462b      	mov	r3, r5
 8006d66:	4906      	ldr	r1, [pc, #24]	; (8006d80 <__assert_func+0x34>)
 8006d68:	f000 f870 	bl	8006e4c <fiprintf>
 8006d6c:	f000 f880 	bl	8006e70 <abort>
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <__assert_func+0x38>)
 8006d72:	461c      	mov	r4, r3
 8006d74:	e7f3      	b.n	8006d5e <__assert_func+0x12>
 8006d76:	bf00      	nop
 8006d78:	2000006c 	.word	0x2000006c
 8006d7c:	080085bf 	.word	0x080085bf
 8006d80:	080085cc 	.word	0x080085cc
 8006d84:	080085fa 	.word	0x080085fa

08006d88 <_calloc_r>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	fba1 5402 	umull	r5, r4, r1, r2
 8006d8e:	b934      	cbnz	r4, 8006d9e <_calloc_r+0x16>
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7ff f99d 	bl	80060d0 <_malloc_r>
 8006d96:	4606      	mov	r6, r0
 8006d98:	b928      	cbnz	r0, 8006da6 <_calloc_r+0x1e>
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	bd70      	pop	{r4, r5, r6, pc}
 8006d9e:	220c      	movs	r2, #12
 8006da0:	2600      	movs	r6, #0
 8006da2:	6002      	str	r2, [r0, #0]
 8006da4:	e7f9      	b.n	8006d9a <_calloc_r+0x12>
 8006da6:	462a      	mov	r2, r5
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7fe fa24 	bl	80051f6 <memset>
 8006dae:	e7f4      	b.n	8006d9a <_calloc_r+0x12>

08006db0 <__ascii_mbtowc>:
 8006db0:	b082      	sub	sp, #8
 8006db2:	b901      	cbnz	r1, 8006db6 <__ascii_mbtowc+0x6>
 8006db4:	a901      	add	r1, sp, #4
 8006db6:	b142      	cbz	r2, 8006dca <__ascii_mbtowc+0x1a>
 8006db8:	b14b      	cbz	r3, 8006dce <__ascii_mbtowc+0x1e>
 8006dba:	7813      	ldrb	r3, [r2, #0]
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	7812      	ldrb	r2, [r2, #0]
 8006dc0:	1e10      	subs	r0, r2, #0
 8006dc2:	bf18      	it	ne
 8006dc4:	2001      	movne	r0, #1
 8006dc6:	b002      	add	sp, #8
 8006dc8:	4770      	bx	lr
 8006dca:	4610      	mov	r0, r2
 8006dcc:	e7fb      	b.n	8006dc6 <__ascii_mbtowc+0x16>
 8006dce:	f06f 0001 	mvn.w	r0, #1
 8006dd2:	e7f8      	b.n	8006dc6 <__ascii_mbtowc+0x16>

08006dd4 <_realloc_r>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	4680      	mov	r8, r0
 8006dda:	4614      	mov	r4, r2
 8006ddc:	460e      	mov	r6, r1
 8006dde:	b921      	cbnz	r1, 8006dea <_realloc_r+0x16>
 8006de0:	4611      	mov	r1, r2
 8006de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de6:	f7ff b973 	b.w	80060d0 <_malloc_r>
 8006dea:	b92a      	cbnz	r2, 8006df8 <_realloc_r+0x24>
 8006dec:	f7ff f900 	bl	8005ff0 <_free_r>
 8006df0:	4625      	mov	r5, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df8:	f000 f841 	bl	8006e7e <_malloc_usable_size_r>
 8006dfc:	4284      	cmp	r4, r0
 8006dfe:	4607      	mov	r7, r0
 8006e00:	d802      	bhi.n	8006e08 <_realloc_r+0x34>
 8006e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e06:	d812      	bhi.n	8006e2e <_realloc_r+0x5a>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	f7ff f960 	bl	80060d0 <_malloc_r>
 8006e10:	4605      	mov	r5, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d0ed      	beq.n	8006df2 <_realloc_r+0x1e>
 8006e16:	42bc      	cmp	r4, r7
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	bf28      	it	cs
 8006e1e:	463a      	movcs	r2, r7
 8006e20:	f7ff ff86 	bl	8006d30 <memcpy>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4640      	mov	r0, r8
 8006e28:	f7ff f8e2 	bl	8005ff0 <_free_r>
 8006e2c:	e7e1      	b.n	8006df2 <_realloc_r+0x1e>
 8006e2e:	4635      	mov	r5, r6
 8006e30:	e7df      	b.n	8006df2 <_realloc_r+0x1e>

08006e32 <__ascii_wctomb>:
 8006e32:	4603      	mov	r3, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	b141      	cbz	r1, 8006e4a <__ascii_wctomb+0x18>
 8006e38:	2aff      	cmp	r2, #255	; 0xff
 8006e3a:	d904      	bls.n	8006e46 <__ascii_wctomb+0x14>
 8006e3c:	228a      	movs	r2, #138	; 0x8a
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	4770      	bx	lr
 8006e46:	2001      	movs	r0, #1
 8006e48:	700a      	strb	r2, [r1, #0]
 8006e4a:	4770      	bx	lr

08006e4c <fiprintf>:
 8006e4c:	b40e      	push	{r1, r2, r3}
 8006e4e:	b503      	push	{r0, r1, lr}
 8006e50:	4601      	mov	r1, r0
 8006e52:	ab03      	add	r3, sp, #12
 8006e54:	4805      	ldr	r0, [pc, #20]	; (8006e6c <fiprintf+0x20>)
 8006e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5a:	6800      	ldr	r0, [r0, #0]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	f000 f83d 	bl	8006edc <_vfiprintf_r>
 8006e62:	b002      	add	sp, #8
 8006e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e68:	b003      	add	sp, #12
 8006e6a:	4770      	bx	lr
 8006e6c:	2000006c 	.word	0x2000006c

08006e70 <abort>:
 8006e70:	2006      	movs	r0, #6
 8006e72:	b508      	push	{r3, lr}
 8006e74:	f000 fa0a 	bl	800728c <raise>
 8006e78:	2001      	movs	r0, #1
 8006e7a:	f7fb fe30 	bl	8002ade <_exit>

08006e7e <_malloc_usable_size_r>:
 8006e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e82:	1f18      	subs	r0, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bfbc      	itt	lt
 8006e88:	580b      	ldrlt	r3, [r1, r0]
 8006e8a:	18c0      	addlt	r0, r0, r3
 8006e8c:	4770      	bx	lr

08006e8e <__sfputc_r>:
 8006e8e:	6893      	ldr	r3, [r2, #8]
 8006e90:	b410      	push	{r4}
 8006e92:	3b01      	subs	r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	6093      	str	r3, [r2, #8]
 8006e98:	da07      	bge.n	8006eaa <__sfputc_r+0x1c>
 8006e9a:	6994      	ldr	r4, [r2, #24]
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	db01      	blt.n	8006ea4 <__sfputc_r+0x16>
 8006ea0:	290a      	cmp	r1, #10
 8006ea2:	d102      	bne.n	8006eaa <__sfputc_r+0x1c>
 8006ea4:	bc10      	pop	{r4}
 8006ea6:	f000 b933 	b.w	8007110 <__swbuf_r>
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	1c58      	adds	r0, r3, #1
 8006eae:	6010      	str	r0, [r2, #0]
 8006eb0:	7019      	strb	r1, [r3, #0]
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	bc10      	pop	{r4}
 8006eb6:	4770      	bx	lr

08006eb8 <__sfputs_r>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460f      	mov	r7, r1
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	18d5      	adds	r5, r2, r3
 8006ec2:	42ac      	cmp	r4, r5
 8006ec4:	d101      	bne.n	8006eca <__sfputs_r+0x12>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e007      	b.n	8006eda <__sfputs_r+0x22>
 8006eca:	463a      	mov	r2, r7
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed2:	f7ff ffdc 	bl	8006e8e <__sfputc_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d1f3      	bne.n	8006ec2 <__sfputs_r+0xa>
 8006eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006edc <_vfiprintf_r>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	460d      	mov	r5, r1
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	4698      	mov	r8, r3
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	b09d      	sub	sp, #116	; 0x74
 8006eea:	b118      	cbz	r0, 8006ef4 <_vfiprintf_r+0x18>
 8006eec:	6a03      	ldr	r3, [r0, #32]
 8006eee:	b90b      	cbnz	r3, 8006ef4 <_vfiprintf_r+0x18>
 8006ef0:	f7fe f8e8 	bl	80050c4 <__sinit>
 8006ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ef6:	07d9      	lsls	r1, r3, #31
 8006ef8:	d405      	bmi.n	8006f06 <_vfiprintf_r+0x2a>
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	059a      	lsls	r2, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_vfiprintf_r+0x2a>
 8006f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f02:	f7fe f9f5 	bl	80052f0 <__retarget_lock_acquire_recursive>
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	071b      	lsls	r3, r3, #28
 8006f0a:	d501      	bpl.n	8006f10 <_vfiprintf_r+0x34>
 8006f0c:	692b      	ldr	r3, [r5, #16]
 8006f0e:	b99b      	cbnz	r3, 8006f38 <_vfiprintf_r+0x5c>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4630      	mov	r0, r6
 8006f14:	f000 f93a 	bl	800718c <__swsetup_r>
 8006f18:	b170      	cbz	r0, 8006f38 <_vfiprintf_r+0x5c>
 8006f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f1c:	07dc      	lsls	r4, r3, #31
 8006f1e:	d504      	bpl.n	8006f2a <_vfiprintf_r+0x4e>
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	b01d      	add	sp, #116	; 0x74
 8006f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2a:	89ab      	ldrh	r3, [r5, #12]
 8006f2c:	0598      	lsls	r0, r3, #22
 8006f2e:	d4f7      	bmi.n	8006f20 <_vfiprintf_r+0x44>
 8006f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f32:	f7fe f9de 	bl	80052f2 <__retarget_lock_release_recursive>
 8006f36:	e7f3      	b.n	8006f20 <_vfiprintf_r+0x44>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3c:	2320      	movs	r3, #32
 8006f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f42:	2330      	movs	r3, #48	; 0x30
 8006f44:	f04f 0901 	mov.w	r9, #1
 8006f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80070fc <_vfiprintf_r+0x220>
 8006f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f54:	4623      	mov	r3, r4
 8006f56:	469a      	mov	sl, r3
 8006f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f5c:	b10a      	cbz	r2, 8006f62 <_vfiprintf_r+0x86>
 8006f5e:	2a25      	cmp	r2, #37	; 0x25
 8006f60:	d1f9      	bne.n	8006f56 <_vfiprintf_r+0x7a>
 8006f62:	ebba 0b04 	subs.w	fp, sl, r4
 8006f66:	d00b      	beq.n	8006f80 <_vfiprintf_r+0xa4>
 8006f68:	465b      	mov	r3, fp
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff ffa2 	bl	8006eb8 <__sfputs_r>
 8006f74:	3001      	adds	r0, #1
 8006f76:	f000 80a9 	beq.w	80070cc <_vfiprintf_r+0x1f0>
 8006f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f7c:	445a      	add	r2, fp
 8006f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8006f80:	f89a 3000 	ldrb.w	r3, [sl]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80a1 	beq.w	80070cc <_vfiprintf_r+0x1f0>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f94:	f10a 0a01 	add.w	sl, sl, #1
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	9307      	str	r3, [sp, #28]
 8006f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fa2:	4654      	mov	r4, sl
 8006fa4:	2205      	movs	r2, #5
 8006fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006faa:	4854      	ldr	r0, [pc, #336]	; (80070fc <_vfiprintf_r+0x220>)
 8006fac:	f7fe f9a2 	bl	80052f4 <memchr>
 8006fb0:	9a04      	ldr	r2, [sp, #16]
 8006fb2:	b9d8      	cbnz	r0, 8006fec <_vfiprintf_r+0x110>
 8006fb4:	06d1      	lsls	r1, r2, #27
 8006fb6:	bf44      	itt	mi
 8006fb8:	2320      	movmi	r3, #32
 8006fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fbe:	0713      	lsls	r3, r2, #28
 8006fc0:	bf44      	itt	mi
 8006fc2:	232b      	movmi	r3, #43	; 0x2b
 8006fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fce:	d015      	beq.n	8006ffc <_vfiprintf_r+0x120>
 8006fd0:	4654      	mov	r4, sl
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f04f 0c0a 	mov.w	ip, #10
 8006fd8:	9a07      	ldr	r2, [sp, #28]
 8006fda:	4621      	mov	r1, r4
 8006fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe0:	3b30      	subs	r3, #48	; 0x30
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d94d      	bls.n	8007082 <_vfiprintf_r+0x1a6>
 8006fe6:	b1b0      	cbz	r0, 8007016 <_vfiprintf_r+0x13a>
 8006fe8:	9207      	str	r2, [sp, #28]
 8006fea:	e014      	b.n	8007016 <_vfiprintf_r+0x13a>
 8006fec:	eba0 0308 	sub.w	r3, r0, r8
 8006ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	46a2      	mov	sl, r4
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	e7d2      	b.n	8006fa2 <_vfiprintf_r+0xc6>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	1d19      	adds	r1, r3, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	9103      	str	r1, [sp, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	bfbb      	ittet	lt
 8007008:	425b      	neglt	r3, r3
 800700a:	f042 0202 	orrlt.w	r2, r2, #2
 800700e:	9307      	strge	r3, [sp, #28]
 8007010:	9307      	strlt	r3, [sp, #28]
 8007012:	bfb8      	it	lt
 8007014:	9204      	strlt	r2, [sp, #16]
 8007016:	7823      	ldrb	r3, [r4, #0]
 8007018:	2b2e      	cmp	r3, #46	; 0x2e
 800701a:	d10c      	bne.n	8007036 <_vfiprintf_r+0x15a>
 800701c:	7863      	ldrb	r3, [r4, #1]
 800701e:	2b2a      	cmp	r3, #42	; 0x2a
 8007020:	d134      	bne.n	800708c <_vfiprintf_r+0x1b0>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	3402      	adds	r4, #2
 8007026:	1d1a      	adds	r2, r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	9203      	str	r2, [sp, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	bfb8      	it	lt
 8007030:	f04f 33ff 	movlt.w	r3, #4294967295
 8007034:	9305      	str	r3, [sp, #20]
 8007036:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007100 <_vfiprintf_r+0x224>
 800703a:	2203      	movs	r2, #3
 800703c:	4650      	mov	r0, sl
 800703e:	7821      	ldrb	r1, [r4, #0]
 8007040:	f7fe f958 	bl	80052f4 <memchr>
 8007044:	b138      	cbz	r0, 8007056 <_vfiprintf_r+0x17a>
 8007046:	2240      	movs	r2, #64	; 0x40
 8007048:	9b04      	ldr	r3, [sp, #16]
 800704a:	eba0 000a 	sub.w	r0, r0, sl
 800704e:	4082      	lsls	r2, r0
 8007050:	4313      	orrs	r3, r2
 8007052:	3401      	adds	r4, #1
 8007054:	9304      	str	r3, [sp, #16]
 8007056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705a:	2206      	movs	r2, #6
 800705c:	4829      	ldr	r0, [pc, #164]	; (8007104 <_vfiprintf_r+0x228>)
 800705e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007062:	f7fe f947 	bl	80052f4 <memchr>
 8007066:	2800      	cmp	r0, #0
 8007068:	d03f      	beq.n	80070ea <_vfiprintf_r+0x20e>
 800706a:	4b27      	ldr	r3, [pc, #156]	; (8007108 <_vfiprintf_r+0x22c>)
 800706c:	bb1b      	cbnz	r3, 80070b6 <_vfiprintf_r+0x1da>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	3307      	adds	r3, #7
 8007072:	f023 0307 	bic.w	r3, r3, #7
 8007076:	3308      	adds	r3, #8
 8007078:	9303      	str	r3, [sp, #12]
 800707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707c:	443b      	add	r3, r7
 800707e:	9309      	str	r3, [sp, #36]	; 0x24
 8007080:	e768      	b.n	8006f54 <_vfiprintf_r+0x78>
 8007082:	460c      	mov	r4, r1
 8007084:	2001      	movs	r0, #1
 8007086:	fb0c 3202 	mla	r2, ip, r2, r3
 800708a:	e7a6      	b.n	8006fda <_vfiprintf_r+0xfe>
 800708c:	2300      	movs	r3, #0
 800708e:	f04f 0c0a 	mov.w	ip, #10
 8007092:	4619      	mov	r1, r3
 8007094:	3401      	adds	r4, #1
 8007096:	9305      	str	r3, [sp, #20]
 8007098:	4620      	mov	r0, r4
 800709a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800709e:	3a30      	subs	r2, #48	; 0x30
 80070a0:	2a09      	cmp	r2, #9
 80070a2:	d903      	bls.n	80070ac <_vfiprintf_r+0x1d0>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0c6      	beq.n	8007036 <_vfiprintf_r+0x15a>
 80070a8:	9105      	str	r1, [sp, #20]
 80070aa:	e7c4      	b.n	8007036 <_vfiprintf_r+0x15a>
 80070ac:	4604      	mov	r4, r0
 80070ae:	2301      	movs	r3, #1
 80070b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b4:	e7f0      	b.n	8007098 <_vfiprintf_r+0x1bc>
 80070b6:	ab03      	add	r3, sp, #12
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	462a      	mov	r2, r5
 80070bc:	4630      	mov	r0, r6
 80070be:	4b13      	ldr	r3, [pc, #76]	; (800710c <_vfiprintf_r+0x230>)
 80070c0:	a904      	add	r1, sp, #16
 80070c2:	f7fd fbc3 	bl	800484c <_printf_float>
 80070c6:	4607      	mov	r7, r0
 80070c8:	1c78      	adds	r0, r7, #1
 80070ca:	d1d6      	bne.n	800707a <_vfiprintf_r+0x19e>
 80070cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ce:	07d9      	lsls	r1, r3, #31
 80070d0:	d405      	bmi.n	80070de <_vfiprintf_r+0x202>
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	059a      	lsls	r2, r3, #22
 80070d6:	d402      	bmi.n	80070de <_vfiprintf_r+0x202>
 80070d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070da:	f7fe f90a 	bl	80052f2 <__retarget_lock_release_recursive>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	065b      	lsls	r3, r3, #25
 80070e2:	f53f af1d 	bmi.w	8006f20 <_vfiprintf_r+0x44>
 80070e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070e8:	e71c      	b.n	8006f24 <_vfiprintf_r+0x48>
 80070ea:	ab03      	add	r3, sp, #12
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	462a      	mov	r2, r5
 80070f0:	4630      	mov	r0, r6
 80070f2:	4b06      	ldr	r3, [pc, #24]	; (800710c <_vfiprintf_r+0x230>)
 80070f4:	a904      	add	r1, sp, #16
 80070f6:	f7fd fe49 	bl	8004d8c <_printf_i>
 80070fa:	e7e4      	b.n	80070c6 <_vfiprintf_r+0x1ea>
 80070fc:	080085a4 	.word	0x080085a4
 8007100:	080085aa 	.word	0x080085aa
 8007104:	080085ae 	.word	0x080085ae
 8007108:	0800484d 	.word	0x0800484d
 800710c:	08006eb9 	.word	0x08006eb9

08007110 <__swbuf_r>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	460e      	mov	r6, r1
 8007114:	4614      	mov	r4, r2
 8007116:	4605      	mov	r5, r0
 8007118:	b118      	cbz	r0, 8007122 <__swbuf_r+0x12>
 800711a:	6a03      	ldr	r3, [r0, #32]
 800711c:	b90b      	cbnz	r3, 8007122 <__swbuf_r+0x12>
 800711e:	f7fd ffd1 	bl	80050c4 <__sinit>
 8007122:	69a3      	ldr	r3, [r4, #24]
 8007124:	60a3      	str	r3, [r4, #8]
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	071a      	lsls	r2, r3, #28
 800712a:	d525      	bpl.n	8007178 <__swbuf_r+0x68>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	b31b      	cbz	r3, 8007178 <__swbuf_r+0x68>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	6922      	ldr	r2, [r4, #16]
 8007134:	b2f6      	uxtb	r6, r6
 8007136:	1a98      	subs	r0, r3, r2
 8007138:	6963      	ldr	r3, [r4, #20]
 800713a:	4637      	mov	r7, r6
 800713c:	4283      	cmp	r3, r0
 800713e:	dc04      	bgt.n	800714a <__swbuf_r+0x3a>
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f7ff fda2 	bl	8006c8c <_fflush_r>
 8007148:	b9e0      	cbnz	r0, 8007184 <__swbuf_r+0x74>
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	3b01      	subs	r3, #1
 800714e:	60a3      	str	r3, [r4, #8]
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	6022      	str	r2, [r4, #0]
 8007156:	701e      	strb	r6, [r3, #0]
 8007158:	6962      	ldr	r2, [r4, #20]
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	429a      	cmp	r2, r3
 800715e:	d004      	beq.n	800716a <__swbuf_r+0x5a>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	07db      	lsls	r3, r3, #31
 8007164:	d506      	bpl.n	8007174 <__swbuf_r+0x64>
 8007166:	2e0a      	cmp	r6, #10
 8007168:	d104      	bne.n	8007174 <__swbuf_r+0x64>
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f7ff fd8d 	bl	8006c8c <_fflush_r>
 8007172:	b938      	cbnz	r0, 8007184 <__swbuf_r+0x74>
 8007174:	4638      	mov	r0, r7
 8007176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 f806 	bl	800718c <__swsetup_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	d0d5      	beq.n	8007130 <__swbuf_r+0x20>
 8007184:	f04f 37ff 	mov.w	r7, #4294967295
 8007188:	e7f4      	b.n	8007174 <__swbuf_r+0x64>
	...

0800718c <__swsetup_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <__swsetup_r+0xac>)
 8007190:	4605      	mov	r5, r0
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	460c      	mov	r4, r1
 8007196:	b118      	cbz	r0, 80071a0 <__swsetup_r+0x14>
 8007198:	6a03      	ldr	r3, [r0, #32]
 800719a:	b90b      	cbnz	r3, 80071a0 <__swsetup_r+0x14>
 800719c:	f7fd ff92 	bl	80050c4 <__sinit>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071a6:	0718      	lsls	r0, r3, #28
 80071a8:	d422      	bmi.n	80071f0 <__swsetup_r+0x64>
 80071aa:	06d9      	lsls	r1, r3, #27
 80071ac:	d407      	bmi.n	80071be <__swsetup_r+0x32>
 80071ae:	2309      	movs	r3, #9
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	e034      	b.n	8007228 <__swsetup_r+0x9c>
 80071be:	0758      	lsls	r0, r3, #29
 80071c0:	d512      	bpl.n	80071e8 <__swsetup_r+0x5c>
 80071c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c4:	b141      	cbz	r1, 80071d8 <__swsetup_r+0x4c>
 80071c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ca:	4299      	cmp	r1, r3
 80071cc:	d002      	beq.n	80071d4 <__swsetup_r+0x48>
 80071ce:	4628      	mov	r0, r5
 80071d0:	f7fe ff0e 	bl	8005ff0 <_free_r>
 80071d4:	2300      	movs	r3, #0
 80071d6:	6363      	str	r3, [r4, #52]	; 0x34
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	2300      	movs	r3, #0
 80071e2:	6063      	str	r3, [r4, #4]
 80071e4:	6923      	ldr	r3, [r4, #16]
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f043 0308 	orr.w	r3, r3, #8
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	b94b      	cbnz	r3, 8007208 <__swsetup_r+0x7c>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fe:	d003      	beq.n	8007208 <__swsetup_r+0x7c>
 8007200:	4621      	mov	r1, r4
 8007202:	4628      	mov	r0, r5
 8007204:	f000 f883 	bl	800730e <__smakebuf_r>
 8007208:	89a0      	ldrh	r0, [r4, #12]
 800720a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800720e:	f010 0301 	ands.w	r3, r0, #1
 8007212:	d00a      	beq.n	800722a <__swsetup_r+0x9e>
 8007214:	2300      	movs	r3, #0
 8007216:	60a3      	str	r3, [r4, #8]
 8007218:	6963      	ldr	r3, [r4, #20]
 800721a:	425b      	negs	r3, r3
 800721c:	61a3      	str	r3, [r4, #24]
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	b943      	cbnz	r3, 8007234 <__swsetup_r+0xa8>
 8007222:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007226:	d1c4      	bne.n	80071b2 <__swsetup_r+0x26>
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	0781      	lsls	r1, r0, #30
 800722c:	bf58      	it	pl
 800722e:	6963      	ldrpl	r3, [r4, #20]
 8007230:	60a3      	str	r3, [r4, #8]
 8007232:	e7f4      	b.n	800721e <__swsetup_r+0x92>
 8007234:	2000      	movs	r0, #0
 8007236:	e7f7      	b.n	8007228 <__swsetup_r+0x9c>
 8007238:	2000006c 	.word	0x2000006c

0800723c <_raise_r>:
 800723c:	291f      	cmp	r1, #31
 800723e:	b538      	push	{r3, r4, r5, lr}
 8007240:	4604      	mov	r4, r0
 8007242:	460d      	mov	r5, r1
 8007244:	d904      	bls.n	8007250 <_raise_r+0x14>
 8007246:	2316      	movs	r3, #22
 8007248:	6003      	str	r3, [r0, #0]
 800724a:	f04f 30ff 	mov.w	r0, #4294967295
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007252:	b112      	cbz	r2, 800725a <_raise_r+0x1e>
 8007254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007258:	b94b      	cbnz	r3, 800726e <_raise_r+0x32>
 800725a:	4620      	mov	r0, r4
 800725c:	f000 f830 	bl	80072c0 <_getpid_r>
 8007260:	462a      	mov	r2, r5
 8007262:	4601      	mov	r1, r0
 8007264:	4620      	mov	r0, r4
 8007266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726a:	f000 b817 	b.w	800729c <_kill_r>
 800726e:	2b01      	cmp	r3, #1
 8007270:	d00a      	beq.n	8007288 <_raise_r+0x4c>
 8007272:	1c59      	adds	r1, r3, #1
 8007274:	d103      	bne.n	800727e <_raise_r+0x42>
 8007276:	2316      	movs	r3, #22
 8007278:	6003      	str	r3, [r0, #0]
 800727a:	2001      	movs	r0, #1
 800727c:	e7e7      	b.n	800724e <_raise_r+0x12>
 800727e:	2400      	movs	r4, #0
 8007280:	4628      	mov	r0, r5
 8007282:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007286:	4798      	blx	r3
 8007288:	2000      	movs	r0, #0
 800728a:	e7e0      	b.n	800724e <_raise_r+0x12>

0800728c <raise>:
 800728c:	4b02      	ldr	r3, [pc, #8]	; (8007298 <raise+0xc>)
 800728e:	4601      	mov	r1, r0
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	f7ff bfd3 	b.w	800723c <_raise_r>
 8007296:	bf00      	nop
 8007298:	2000006c 	.word	0x2000006c

0800729c <_kill_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	2300      	movs	r3, #0
 80072a0:	4d06      	ldr	r5, [pc, #24]	; (80072bc <_kill_r+0x20>)
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	f7fb fc08 	bl	8002abe <_kill>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d102      	bne.n	80072b8 <_kill_r+0x1c>
 80072b2:	682b      	ldr	r3, [r5, #0]
 80072b4:	b103      	cbz	r3, 80072b8 <_kill_r+0x1c>
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
 80072ba:	bf00      	nop
 80072bc:	20000de4 	.word	0x20000de4

080072c0 <_getpid_r>:
 80072c0:	f7fb bbf6 	b.w	8002ab0 <_getpid>

080072c4 <__swhatbuf_r>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	460c      	mov	r4, r1
 80072c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072cc:	4615      	mov	r5, r2
 80072ce:	2900      	cmp	r1, #0
 80072d0:	461e      	mov	r6, r3
 80072d2:	b096      	sub	sp, #88	; 0x58
 80072d4:	da0c      	bge.n	80072f0 <__swhatbuf_r+0x2c>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	2100      	movs	r1, #0
 80072da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80072de:	bf0c      	ite	eq
 80072e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80072e4:	2340      	movne	r3, #64	; 0x40
 80072e6:	2000      	movs	r0, #0
 80072e8:	6031      	str	r1, [r6, #0]
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	b016      	add	sp, #88	; 0x58
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	466a      	mov	r2, sp
 80072f2:	f000 f849 	bl	8007388 <_fstat_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	dbed      	blt.n	80072d6 <__swhatbuf_r+0x12>
 80072fa:	9901      	ldr	r1, [sp, #4]
 80072fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007300:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007304:	4259      	negs	r1, r3
 8007306:	4159      	adcs	r1, r3
 8007308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730c:	e7eb      	b.n	80072e6 <__swhatbuf_r+0x22>

0800730e <__smakebuf_r>:
 800730e:	898b      	ldrh	r3, [r1, #12]
 8007310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007312:	079d      	lsls	r5, r3, #30
 8007314:	4606      	mov	r6, r0
 8007316:	460c      	mov	r4, r1
 8007318:	d507      	bpl.n	800732a <__smakebuf_r+0x1c>
 800731a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	6123      	str	r3, [r4, #16]
 8007322:	2301      	movs	r3, #1
 8007324:	6163      	str	r3, [r4, #20]
 8007326:	b002      	add	sp, #8
 8007328:	bd70      	pop	{r4, r5, r6, pc}
 800732a:	466a      	mov	r2, sp
 800732c:	ab01      	add	r3, sp, #4
 800732e:	f7ff ffc9 	bl	80072c4 <__swhatbuf_r>
 8007332:	9900      	ldr	r1, [sp, #0]
 8007334:	4605      	mov	r5, r0
 8007336:	4630      	mov	r0, r6
 8007338:	f7fe feca 	bl	80060d0 <_malloc_r>
 800733c:	b948      	cbnz	r0, 8007352 <__smakebuf_r+0x44>
 800733e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007342:	059a      	lsls	r2, r3, #22
 8007344:	d4ef      	bmi.n	8007326 <__smakebuf_r+0x18>
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	f043 0302 	orr.w	r3, r3, #2
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	e7e3      	b.n	800731a <__smakebuf_r+0xc>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	6020      	str	r0, [r4, #0]
 8007356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735a:	81a3      	strh	r3, [r4, #12]
 800735c:	9b00      	ldr	r3, [sp, #0]
 800735e:	6120      	str	r0, [r4, #16]
 8007360:	6163      	str	r3, [r4, #20]
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	b15b      	cbz	r3, 800737e <__smakebuf_r+0x70>
 8007366:	4630      	mov	r0, r6
 8007368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800736c:	f000 f81e 	bl	80073ac <_isatty_r>
 8007370:	b128      	cbz	r0, 800737e <__smakebuf_r+0x70>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f023 0303 	bic.w	r3, r3, #3
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	431d      	orrs	r5, r3
 8007382:	81a5      	strh	r5, [r4, #12]
 8007384:	e7cf      	b.n	8007326 <__smakebuf_r+0x18>
	...

08007388 <_fstat_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	2300      	movs	r3, #0
 800738c:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <_fstat_r+0x20>)
 800738e:	4604      	mov	r4, r0
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f7fb fbf0 	bl	8002b7a <_fstat>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d102      	bne.n	80073a4 <_fstat_r+0x1c>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	b103      	cbz	r3, 80073a4 <_fstat_r+0x1c>
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	bf00      	nop
 80073a8:	20000de4 	.word	0x20000de4

080073ac <_isatty_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	2300      	movs	r3, #0
 80073b0:	4d05      	ldr	r5, [pc, #20]	; (80073c8 <_isatty_r+0x1c>)
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7fb fbee 	bl	8002b98 <_isatty>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_isatty_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_isatty_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20000de4 	.word	0x20000de4

080073cc <pow>:
 80073cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d0:	4614      	mov	r4, r2
 80073d2:	461d      	mov	r5, r3
 80073d4:	4680      	mov	r8, r0
 80073d6:	4689      	mov	r9, r1
 80073d8:	f000 f866 	bl	80074a8 <__ieee754_pow>
 80073dc:	4622      	mov	r2, r4
 80073de:	4606      	mov	r6, r0
 80073e0:	460f      	mov	r7, r1
 80073e2:	462b      	mov	r3, r5
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f9 fb10 	bl	8000a0c <__aeabi_dcmpun>
 80073ec:	bbc8      	cbnz	r0, 8007462 <pow+0x96>
 80073ee:	2200      	movs	r2, #0
 80073f0:	2300      	movs	r3, #0
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f9 fad7 	bl	80009a8 <__aeabi_dcmpeq>
 80073fa:	b1b8      	cbz	r0, 800742c <pow+0x60>
 80073fc:	2200      	movs	r2, #0
 80073fe:	2300      	movs	r3, #0
 8007400:	4620      	mov	r0, r4
 8007402:	4629      	mov	r1, r5
 8007404:	f7f9 fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8007408:	2800      	cmp	r0, #0
 800740a:	d141      	bne.n	8007490 <pow+0xc4>
 800740c:	4620      	mov	r0, r4
 800740e:	4629      	mov	r1, r5
 8007410:	f000 f844 	bl	800749c <finite>
 8007414:	b328      	cbz	r0, 8007462 <pow+0x96>
 8007416:	2200      	movs	r2, #0
 8007418:	2300      	movs	r3, #0
 800741a:	4620      	mov	r0, r4
 800741c:	4629      	mov	r1, r5
 800741e:	f7f9 facd 	bl	80009bc <__aeabi_dcmplt>
 8007422:	b1f0      	cbz	r0, 8007462 <pow+0x96>
 8007424:	f7fd ff3a 	bl	800529c <__errno>
 8007428:	2322      	movs	r3, #34	; 0x22
 800742a:	e019      	b.n	8007460 <pow+0x94>
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f000 f834 	bl	800749c <finite>
 8007434:	b9c8      	cbnz	r0, 800746a <pow+0x9e>
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f000 f82f 	bl	800749c <finite>
 800743e:	b1a0      	cbz	r0, 800746a <pow+0x9e>
 8007440:	4620      	mov	r0, r4
 8007442:	4629      	mov	r1, r5
 8007444:	f000 f82a 	bl	800749c <finite>
 8007448:	b178      	cbz	r0, 800746a <pow+0x9e>
 800744a:	4632      	mov	r2, r6
 800744c:	463b      	mov	r3, r7
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	f7f9 fadb 	bl	8000a0c <__aeabi_dcmpun>
 8007456:	2800      	cmp	r0, #0
 8007458:	d0e4      	beq.n	8007424 <pow+0x58>
 800745a:	f7fd ff1f 	bl	800529c <__errno>
 800745e:	2321      	movs	r3, #33	; 0x21
 8007460:	6003      	str	r3, [r0, #0]
 8007462:	4630      	mov	r0, r6
 8007464:	4639      	mov	r1, r7
 8007466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746a:	2200      	movs	r2, #0
 800746c:	2300      	movs	r3, #0
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7f9 fa99 	bl	80009a8 <__aeabi_dcmpeq>
 8007476:	2800      	cmp	r0, #0
 8007478:	d0f3      	beq.n	8007462 <pow+0x96>
 800747a:	4640      	mov	r0, r8
 800747c:	4649      	mov	r1, r9
 800747e:	f000 f80d 	bl	800749c <finite>
 8007482:	2800      	cmp	r0, #0
 8007484:	d0ed      	beq.n	8007462 <pow+0x96>
 8007486:	4620      	mov	r0, r4
 8007488:	4629      	mov	r1, r5
 800748a:	f000 f807 	bl	800749c <finite>
 800748e:	e7c8      	b.n	8007422 <pow+0x56>
 8007490:	2600      	movs	r6, #0
 8007492:	4f01      	ldr	r7, [pc, #4]	; (8007498 <pow+0xcc>)
 8007494:	e7e5      	b.n	8007462 <pow+0x96>
 8007496:	bf00      	nop
 8007498:	3ff00000 	.word	0x3ff00000

0800749c <finite>:
 800749c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80074a0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80074a4:	0fc0      	lsrs	r0, r0, #31
 80074a6:	4770      	bx	lr

080074a8 <__ieee754_pow>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	b093      	sub	sp, #76	; 0x4c
 80074ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074b2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80074b6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80074ba:	4689      	mov	r9, r1
 80074bc:	ea56 0102 	orrs.w	r1, r6, r2
 80074c0:	4680      	mov	r8, r0
 80074c2:	d111      	bne.n	80074e8 <__ieee754_pow+0x40>
 80074c4:	1803      	adds	r3, r0, r0
 80074c6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80074ca:	4152      	adcs	r2, r2
 80074cc:	4299      	cmp	r1, r3
 80074ce:	4b82      	ldr	r3, [pc, #520]	; (80076d8 <__ieee754_pow+0x230>)
 80074d0:	4193      	sbcs	r3, r2
 80074d2:	f080 84ba 	bcs.w	8007e4a <__ieee754_pow+0x9a2>
 80074d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074da:	4640      	mov	r0, r8
 80074dc:	4649      	mov	r1, r9
 80074de:	f7f8 fe45 	bl	800016c <__adddf3>
 80074e2:	4683      	mov	fp, r0
 80074e4:	468c      	mov	ip, r1
 80074e6:	e06f      	b.n	80075c8 <__ieee754_pow+0x120>
 80074e8:	4b7c      	ldr	r3, [pc, #496]	; (80076dc <__ieee754_pow+0x234>)
 80074ea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80074ee:	429c      	cmp	r4, r3
 80074f0:	464d      	mov	r5, r9
 80074f2:	4682      	mov	sl, r0
 80074f4:	dc06      	bgt.n	8007504 <__ieee754_pow+0x5c>
 80074f6:	d101      	bne.n	80074fc <__ieee754_pow+0x54>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1ec      	bne.n	80074d6 <__ieee754_pow+0x2e>
 80074fc:	429e      	cmp	r6, r3
 80074fe:	dc01      	bgt.n	8007504 <__ieee754_pow+0x5c>
 8007500:	d10f      	bne.n	8007522 <__ieee754_pow+0x7a>
 8007502:	b172      	cbz	r2, 8007522 <__ieee754_pow+0x7a>
 8007504:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007508:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800750c:	ea55 050a 	orrs.w	r5, r5, sl
 8007510:	d1e1      	bne.n	80074d6 <__ieee754_pow+0x2e>
 8007512:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007516:	18db      	adds	r3, r3, r3
 8007518:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800751c:	4152      	adcs	r2, r2
 800751e:	429d      	cmp	r5, r3
 8007520:	e7d5      	b.n	80074ce <__ieee754_pow+0x26>
 8007522:	2d00      	cmp	r5, #0
 8007524:	da39      	bge.n	800759a <__ieee754_pow+0xf2>
 8007526:	4b6e      	ldr	r3, [pc, #440]	; (80076e0 <__ieee754_pow+0x238>)
 8007528:	429e      	cmp	r6, r3
 800752a:	dc52      	bgt.n	80075d2 <__ieee754_pow+0x12a>
 800752c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007530:	429e      	cmp	r6, r3
 8007532:	f340 849d 	ble.w	8007e70 <__ieee754_pow+0x9c8>
 8007536:	1533      	asrs	r3, r6, #20
 8007538:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800753c:	2b14      	cmp	r3, #20
 800753e:	dd0f      	ble.n	8007560 <__ieee754_pow+0xb8>
 8007540:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007544:	fa22 f103 	lsr.w	r1, r2, r3
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	4293      	cmp	r3, r2
 800754e:	f040 848f 	bne.w	8007e70 <__ieee754_pow+0x9c8>
 8007552:	f001 0101 	and.w	r1, r1, #1
 8007556:	f1c1 0302 	rsb	r3, r1, #2
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	b182      	cbz	r2, 8007580 <__ieee754_pow+0xd8>
 800755e:	e05d      	b.n	800761c <__ieee754_pow+0x174>
 8007560:	2a00      	cmp	r2, #0
 8007562:	d159      	bne.n	8007618 <__ieee754_pow+0x170>
 8007564:	f1c3 0314 	rsb	r3, r3, #20
 8007568:	fa46 f103 	asr.w	r1, r6, r3
 800756c:	fa01 f303 	lsl.w	r3, r1, r3
 8007570:	42b3      	cmp	r3, r6
 8007572:	f040 847a 	bne.w	8007e6a <__ieee754_pow+0x9c2>
 8007576:	f001 0101 	and.w	r1, r1, #1
 800757a:	f1c1 0302 	rsb	r3, r1, #2
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4b58      	ldr	r3, [pc, #352]	; (80076e4 <__ieee754_pow+0x23c>)
 8007582:	429e      	cmp	r6, r3
 8007584:	d132      	bne.n	80075ec <__ieee754_pow+0x144>
 8007586:	2f00      	cmp	r7, #0
 8007588:	f280 846b 	bge.w	8007e62 <__ieee754_pow+0x9ba>
 800758c:	4642      	mov	r2, r8
 800758e:	464b      	mov	r3, r9
 8007590:	2000      	movs	r0, #0
 8007592:	4954      	ldr	r1, [pc, #336]	; (80076e4 <__ieee754_pow+0x23c>)
 8007594:	f7f9 f8ca 	bl	800072c <__aeabi_ddiv>
 8007598:	e7a3      	b.n	80074e2 <__ieee754_pow+0x3a>
 800759a:	2300      	movs	r3, #0
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	2a00      	cmp	r2, #0
 80075a0:	d13c      	bne.n	800761c <__ieee754_pow+0x174>
 80075a2:	4b4e      	ldr	r3, [pc, #312]	; (80076dc <__ieee754_pow+0x234>)
 80075a4:	429e      	cmp	r6, r3
 80075a6:	d1eb      	bne.n	8007580 <__ieee754_pow+0xd8>
 80075a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80075ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80075b0:	ea53 030a 	orrs.w	r3, r3, sl
 80075b4:	f000 8449 	beq.w	8007e4a <__ieee754_pow+0x9a2>
 80075b8:	4b4b      	ldr	r3, [pc, #300]	; (80076e8 <__ieee754_pow+0x240>)
 80075ba:	429c      	cmp	r4, r3
 80075bc:	dd0b      	ble.n	80075d6 <__ieee754_pow+0x12e>
 80075be:	2f00      	cmp	r7, #0
 80075c0:	f2c0 8449 	blt.w	8007e56 <__ieee754_pow+0x9ae>
 80075c4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80075c8:	4658      	mov	r0, fp
 80075ca:	4661      	mov	r1, ip
 80075cc:	b013      	add	sp, #76	; 0x4c
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	2302      	movs	r3, #2
 80075d4:	e7e2      	b.n	800759c <__ieee754_pow+0xf4>
 80075d6:	2f00      	cmp	r7, #0
 80075d8:	f04f 0b00 	mov.w	fp, #0
 80075dc:	f04f 0c00 	mov.w	ip, #0
 80075e0:	daf2      	bge.n	80075c8 <__ieee754_pow+0x120>
 80075e2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80075e6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80075ea:	e7ed      	b.n	80075c8 <__ieee754_pow+0x120>
 80075ec:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80075f0:	d106      	bne.n	8007600 <__ieee754_pow+0x158>
 80075f2:	4642      	mov	r2, r8
 80075f4:	464b      	mov	r3, r9
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f8 ff6d 	bl	80004d8 <__aeabi_dmul>
 80075fe:	e770      	b.n	80074e2 <__ieee754_pow+0x3a>
 8007600:	4b3a      	ldr	r3, [pc, #232]	; (80076ec <__ieee754_pow+0x244>)
 8007602:	429f      	cmp	r7, r3
 8007604:	d10a      	bne.n	800761c <__ieee754_pow+0x174>
 8007606:	2d00      	cmp	r5, #0
 8007608:	db08      	blt.n	800761c <__ieee754_pow+0x174>
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	b013      	add	sp, #76	; 0x4c
 8007610:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	f000 bd0a 	b.w	800802c <__ieee754_sqrt>
 8007618:	2300      	movs	r3, #0
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	4640      	mov	r0, r8
 800761e:	4649      	mov	r1, r9
 8007620:	f000 fc58 	bl	8007ed4 <fabs>
 8007624:	4683      	mov	fp, r0
 8007626:	468c      	mov	ip, r1
 8007628:	f1ba 0f00 	cmp.w	sl, #0
 800762c:	d128      	bne.n	8007680 <__ieee754_pow+0x1d8>
 800762e:	b124      	cbz	r4, 800763a <__ieee754_pow+0x192>
 8007630:	4b2c      	ldr	r3, [pc, #176]	; (80076e4 <__ieee754_pow+0x23c>)
 8007632:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007636:	429a      	cmp	r2, r3
 8007638:	d122      	bne.n	8007680 <__ieee754_pow+0x1d8>
 800763a:	2f00      	cmp	r7, #0
 800763c:	da07      	bge.n	800764e <__ieee754_pow+0x1a6>
 800763e:	465a      	mov	r2, fp
 8007640:	4663      	mov	r3, ip
 8007642:	2000      	movs	r0, #0
 8007644:	4927      	ldr	r1, [pc, #156]	; (80076e4 <__ieee754_pow+0x23c>)
 8007646:	f7f9 f871 	bl	800072c <__aeabi_ddiv>
 800764a:	4683      	mov	fp, r0
 800764c:	468c      	mov	ip, r1
 800764e:	2d00      	cmp	r5, #0
 8007650:	daba      	bge.n	80075c8 <__ieee754_pow+0x120>
 8007652:	9b00      	ldr	r3, [sp, #0]
 8007654:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007658:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800765c:	431c      	orrs	r4, r3
 800765e:	d108      	bne.n	8007672 <__ieee754_pow+0x1ca>
 8007660:	465a      	mov	r2, fp
 8007662:	4663      	mov	r3, ip
 8007664:	4658      	mov	r0, fp
 8007666:	4661      	mov	r1, ip
 8007668:	f7f8 fd7e 	bl	8000168 <__aeabi_dsub>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	e790      	b.n	8007594 <__ieee754_pow+0xec>
 8007672:	9b00      	ldr	r3, [sp, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d1a7      	bne.n	80075c8 <__ieee754_pow+0x120>
 8007678:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800767c:	469c      	mov	ip, r3
 800767e:	e7a3      	b.n	80075c8 <__ieee754_pow+0x120>
 8007680:	0feb      	lsrs	r3, r5, #31
 8007682:	3b01      	subs	r3, #1
 8007684:	930c      	str	r3, [sp, #48]	; 0x30
 8007686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007688:	9b00      	ldr	r3, [sp, #0]
 800768a:	4313      	orrs	r3, r2
 800768c:	d104      	bne.n	8007698 <__ieee754_pow+0x1f0>
 800768e:	4642      	mov	r2, r8
 8007690:	464b      	mov	r3, r9
 8007692:	4640      	mov	r0, r8
 8007694:	4649      	mov	r1, r9
 8007696:	e7e7      	b.n	8007668 <__ieee754_pow+0x1c0>
 8007698:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <__ieee754_pow+0x248>)
 800769a:	429e      	cmp	r6, r3
 800769c:	f340 80f6 	ble.w	800788c <__ieee754_pow+0x3e4>
 80076a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80076a4:	429e      	cmp	r6, r3
 80076a6:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <__ieee754_pow+0x240>)
 80076a8:	dd09      	ble.n	80076be <__ieee754_pow+0x216>
 80076aa:	429c      	cmp	r4, r3
 80076ac:	dc0c      	bgt.n	80076c8 <__ieee754_pow+0x220>
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	da0c      	bge.n	80076cc <__ieee754_pow+0x224>
 80076b2:	2000      	movs	r0, #0
 80076b4:	b013      	add	sp, #76	; 0x4c
 80076b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	f000 bcb2 	b.w	8008022 <__math_oflow>
 80076be:	429c      	cmp	r4, r3
 80076c0:	dbf5      	blt.n	80076ae <__ieee754_pow+0x206>
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <__ieee754_pow+0x23c>)
 80076c4:	429c      	cmp	r4, r3
 80076c6:	dd15      	ble.n	80076f4 <__ieee754_pow+0x24c>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	dcf2      	bgt.n	80076b2 <__ieee754_pow+0x20a>
 80076cc:	2000      	movs	r0, #0
 80076ce:	b013      	add	sp, #76	; 0x4c
 80076d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	f000 bca0 	b.w	8008018 <__math_uflow>
 80076d8:	fff00000 	.word	0xfff00000
 80076dc:	7ff00000 	.word	0x7ff00000
 80076e0:	433fffff 	.word	0x433fffff
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	3fefffff 	.word	0x3fefffff
 80076ec:	3fe00000 	.word	0x3fe00000
 80076f0:	41e00000 	.word	0x41e00000
 80076f4:	4661      	mov	r1, ip
 80076f6:	2200      	movs	r2, #0
 80076f8:	4658      	mov	r0, fp
 80076fa:	4b5f      	ldr	r3, [pc, #380]	; (8007878 <__ieee754_pow+0x3d0>)
 80076fc:	f7f8 fd34 	bl	8000168 <__aeabi_dsub>
 8007700:	a355      	add	r3, pc, #340	; (adr r3, 8007858 <__ieee754_pow+0x3b0>)
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	4604      	mov	r4, r0
 8007708:	460d      	mov	r5, r1
 800770a:	f7f8 fee5 	bl	80004d8 <__aeabi_dmul>
 800770e:	a354      	add	r3, pc, #336	; (adr r3, 8007860 <__ieee754_pow+0x3b8>)
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	f7f8 fedc 	bl	80004d8 <__aeabi_dmul>
 8007720:	2200      	movs	r2, #0
 8007722:	4682      	mov	sl, r0
 8007724:	468b      	mov	fp, r1
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	4b54      	ldr	r3, [pc, #336]	; (800787c <__ieee754_pow+0x3d4>)
 800772c:	f7f8 fed4 	bl	80004d8 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	a14c      	add	r1, pc, #304	; (adr r1, 8007868 <__ieee754_pow+0x3c0>)
 8007736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800773a:	f7f8 fd15 	bl	8000168 <__aeabi_dsub>
 800773e:	4622      	mov	r2, r4
 8007740:	462b      	mov	r3, r5
 8007742:	f7f8 fec9 	bl	80004d8 <__aeabi_dmul>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	2000      	movs	r0, #0
 800774c:	494c      	ldr	r1, [pc, #304]	; (8007880 <__ieee754_pow+0x3d8>)
 800774e:	f7f8 fd0b 	bl	8000168 <__aeabi_dsub>
 8007752:	4622      	mov	r2, r4
 8007754:	462b      	mov	r3, r5
 8007756:	4680      	mov	r8, r0
 8007758:	4689      	mov	r9, r1
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f8 febb 	bl	80004d8 <__aeabi_dmul>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4640      	mov	r0, r8
 8007768:	4649      	mov	r1, r9
 800776a:	f7f8 feb5 	bl	80004d8 <__aeabi_dmul>
 800776e:	a340      	add	r3, pc, #256	; (adr r3, 8007870 <__ieee754_pow+0x3c8>)
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	f7f8 feb0 	bl	80004d8 <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4650      	mov	r0, sl
 800777e:	4659      	mov	r1, fp
 8007780:	f7f8 fcf2 	bl	8000168 <__aeabi_dsub>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	4630      	mov	r0, r6
 800778e:	4639      	mov	r1, r7
 8007790:	f7f8 fcec 	bl	800016c <__adddf3>
 8007794:	2000      	movs	r0, #0
 8007796:	4632      	mov	r2, r6
 8007798:	463b      	mov	r3, r7
 800779a:	4682      	mov	sl, r0
 800779c:	468b      	mov	fp, r1
 800779e:	f7f8 fce3 	bl	8000168 <__aeabi_dsub>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 fcdd 	bl	8000168 <__aeabi_dsub>
 80077ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077b2:	9b00      	ldr	r3, [sp, #0]
 80077b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077b6:	3b01      	subs	r3, #1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f04f 0600 	mov.w	r6, #0
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	bf0c      	ite	eq
 80077c4:	4b2f      	ldreq	r3, [pc, #188]	; (8007884 <__ieee754_pow+0x3dc>)
 80077c6:	4b2c      	ldrne	r3, [pc, #176]	; (8007878 <__ieee754_pow+0x3d0>)
 80077c8:	4604      	mov	r4, r0
 80077ca:	460d      	mov	r5, r1
 80077cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d0:	e9cd 2300 	strd	r2, r3, [sp]
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	f7f8 fcc6 	bl	8000168 <__aeabi_dsub>
 80077dc:	4652      	mov	r2, sl
 80077de:	465b      	mov	r3, fp
 80077e0:	f7f8 fe7a 	bl	80004d8 <__aeabi_dmul>
 80077e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077e8:	4680      	mov	r8, r0
 80077ea:	4689      	mov	r9, r1
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fe72 	bl	80004d8 <__aeabi_dmul>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4640      	mov	r0, r8
 80077fa:	4649      	mov	r1, r9
 80077fc:	f7f8 fcb6 	bl	800016c <__adddf3>
 8007800:	4632      	mov	r2, r6
 8007802:	463b      	mov	r3, r7
 8007804:	4680      	mov	r8, r0
 8007806:	4689      	mov	r9, r1
 8007808:	4650      	mov	r0, sl
 800780a:	4659      	mov	r1, fp
 800780c:	f7f8 fe64 	bl	80004d8 <__aeabi_dmul>
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	460b      	mov	r3, r1
 8007816:	4602      	mov	r2, r0
 8007818:	4649      	mov	r1, r9
 800781a:	4640      	mov	r0, r8
 800781c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007820:	f7f8 fca4 	bl	800016c <__adddf3>
 8007824:	4b18      	ldr	r3, [pc, #96]	; (8007888 <__ieee754_pow+0x3e0>)
 8007826:	4682      	mov	sl, r0
 8007828:	4299      	cmp	r1, r3
 800782a:	460f      	mov	r7, r1
 800782c:	460e      	mov	r6, r1
 800782e:	f340 82e7 	ble.w	8007e00 <__ieee754_pow+0x958>
 8007832:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007836:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800783a:	4303      	orrs	r3, r0
 800783c:	f000 81e2 	beq.w	8007c04 <__ieee754_pow+0x75c>
 8007840:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007844:	2200      	movs	r2, #0
 8007846:	2300      	movs	r3, #0
 8007848:	f7f9 f8b8 	bl	80009bc <__aeabi_dcmplt>
 800784c:	3800      	subs	r0, #0
 800784e:	bf18      	it	ne
 8007850:	2001      	movne	r0, #1
 8007852:	e72f      	b.n	80076b4 <__ieee754_pow+0x20c>
 8007854:	f3af 8000 	nop.w
 8007858:	60000000 	.word	0x60000000
 800785c:	3ff71547 	.word	0x3ff71547
 8007860:	f85ddf44 	.word	0xf85ddf44
 8007864:	3e54ae0b 	.word	0x3e54ae0b
 8007868:	55555555 	.word	0x55555555
 800786c:	3fd55555 	.word	0x3fd55555
 8007870:	652b82fe 	.word	0x652b82fe
 8007874:	3ff71547 	.word	0x3ff71547
 8007878:	3ff00000 	.word	0x3ff00000
 800787c:	3fd00000 	.word	0x3fd00000
 8007880:	3fe00000 	.word	0x3fe00000
 8007884:	bff00000 	.word	0xbff00000
 8007888:	408fffff 	.word	0x408fffff
 800788c:	4bd4      	ldr	r3, [pc, #848]	; (8007be0 <__ieee754_pow+0x738>)
 800788e:	2200      	movs	r2, #0
 8007890:	402b      	ands	r3, r5
 8007892:	b943      	cbnz	r3, 80078a6 <__ieee754_pow+0x3fe>
 8007894:	4658      	mov	r0, fp
 8007896:	4661      	mov	r1, ip
 8007898:	4bd2      	ldr	r3, [pc, #840]	; (8007be4 <__ieee754_pow+0x73c>)
 800789a:	f7f8 fe1d 	bl	80004d8 <__aeabi_dmul>
 800789e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80078a2:	4683      	mov	fp, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	1523      	asrs	r3, r4, #20
 80078a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80078ac:	4413      	add	r3, r2
 80078ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b0:	4bcd      	ldr	r3, [pc, #820]	; (8007be8 <__ieee754_pow+0x740>)
 80078b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80078b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80078ba:	429c      	cmp	r4, r3
 80078bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80078c0:	dd08      	ble.n	80078d4 <__ieee754_pow+0x42c>
 80078c2:	4bca      	ldr	r3, [pc, #808]	; (8007bec <__ieee754_pow+0x744>)
 80078c4:	429c      	cmp	r4, r3
 80078c6:	f340 8164 	ble.w	8007b92 <__ieee754_pow+0x6ea>
 80078ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078cc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80078d0:	3301      	adds	r3, #1
 80078d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078d4:	2600      	movs	r6, #0
 80078d6:	00f3      	lsls	r3, r6, #3
 80078d8:	930d      	str	r3, [sp, #52]	; 0x34
 80078da:	4bc5      	ldr	r3, [pc, #788]	; (8007bf0 <__ieee754_pow+0x748>)
 80078dc:	4658      	mov	r0, fp
 80078de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078e6:	4629      	mov	r1, r5
 80078e8:	461a      	mov	r2, r3
 80078ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80078ee:	4623      	mov	r3, r4
 80078f0:	f7f8 fc3a 	bl	8000168 <__aeabi_dsub>
 80078f4:	46da      	mov	sl, fp
 80078f6:	462b      	mov	r3, r5
 80078f8:	4652      	mov	r2, sl
 80078fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80078fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007902:	f7f8 fc33 	bl	800016c <__adddf3>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	2000      	movs	r0, #0
 800790c:	49b9      	ldr	r1, [pc, #740]	; (8007bf4 <__ieee754_pow+0x74c>)
 800790e:	f7f8 ff0d 	bl	800072c <__aeabi_ddiv>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800791a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800791e:	f7f8 fddb 	bl	80004d8 <__aeabi_dmul>
 8007922:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007926:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800792a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800792e:	2300      	movs	r3, #0
 8007930:	2200      	movs	r2, #0
 8007932:	46ab      	mov	fp, r5
 8007934:	106d      	asrs	r5, r5, #1
 8007936:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800793a:	9304      	str	r3, [sp, #16]
 800793c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007940:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007944:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007948:	4640      	mov	r0, r8
 800794a:	4649      	mov	r1, r9
 800794c:	4614      	mov	r4, r2
 800794e:	461d      	mov	r5, r3
 8007950:	f7f8 fdc2 	bl	80004d8 <__aeabi_dmul>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800795c:	f7f8 fc04 	bl	8000168 <__aeabi_dsub>
 8007960:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fbfc 	bl	8000168 <__aeabi_dsub>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4650      	mov	r0, sl
 8007976:	4659      	mov	r1, fp
 8007978:	f7f8 fbf6 	bl	8000168 <__aeabi_dsub>
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	f7f8 fdaa 	bl	80004d8 <__aeabi_dmul>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f8 fbec 	bl	8000168 <__aeabi_dsub>
 8007990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007994:	f7f8 fda0 	bl	80004d8 <__aeabi_dmul>
 8007998:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800799c:	4682      	mov	sl, r0
 800799e:	468b      	mov	fp, r1
 80079a0:	4610      	mov	r0, r2
 80079a2:	4619      	mov	r1, r3
 80079a4:	f7f8 fd98 	bl	80004d8 <__aeabi_dmul>
 80079a8:	a37b      	add	r3, pc, #492	; (adr r3, 8007b98 <__ieee754_pow+0x6f0>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	4604      	mov	r4, r0
 80079b0:	460d      	mov	r5, r1
 80079b2:	f7f8 fd91 	bl	80004d8 <__aeabi_dmul>
 80079b6:	a37a      	add	r3, pc, #488	; (adr r3, 8007ba0 <__ieee754_pow+0x6f8>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	f7f8 fbd6 	bl	800016c <__adddf3>
 80079c0:	4622      	mov	r2, r4
 80079c2:	462b      	mov	r3, r5
 80079c4:	f7f8 fd88 	bl	80004d8 <__aeabi_dmul>
 80079c8:	a377      	add	r3, pc, #476	; (adr r3, 8007ba8 <__ieee754_pow+0x700>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fbcd 	bl	800016c <__adddf3>
 80079d2:	4622      	mov	r2, r4
 80079d4:	462b      	mov	r3, r5
 80079d6:	f7f8 fd7f 	bl	80004d8 <__aeabi_dmul>
 80079da:	a375      	add	r3, pc, #468	; (adr r3, 8007bb0 <__ieee754_pow+0x708>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fbc4 	bl	800016c <__adddf3>
 80079e4:	4622      	mov	r2, r4
 80079e6:	462b      	mov	r3, r5
 80079e8:	f7f8 fd76 	bl	80004d8 <__aeabi_dmul>
 80079ec:	a372      	add	r3, pc, #456	; (adr r3, 8007bb8 <__ieee754_pow+0x710>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fbbb 	bl	800016c <__adddf3>
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	f7f8 fd6d 	bl	80004d8 <__aeabi_dmul>
 80079fe:	a370      	add	r3, pc, #448	; (adr r3, 8007bc0 <__ieee754_pow+0x718>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fbb2 	bl	800016c <__adddf3>
 8007a08:	4622      	mov	r2, r4
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	462b      	mov	r3, r5
 8007a10:	4620      	mov	r0, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7f8 fd60 	bl	80004d8 <__aeabi_dmul>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f7f8 fd5a 	bl	80004d8 <__aeabi_dmul>
 8007a24:	4604      	mov	r4, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	f7f8 fb9c 	bl	800016c <__adddf3>
 8007a34:	4652      	mov	r2, sl
 8007a36:	465b      	mov	r3, fp
 8007a38:	f7f8 fd4e 	bl	80004d8 <__aeabi_dmul>
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	462b      	mov	r3, r5
 8007a40:	f7f8 fb94 	bl	800016c <__adddf3>
 8007a44:	4642      	mov	r2, r8
 8007a46:	4606      	mov	r6, r0
 8007a48:	460f      	mov	r7, r1
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	4649      	mov	r1, r9
 8007a50:	f7f8 fd42 	bl	80004d8 <__aeabi_dmul>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4b66      	ldr	r3, [pc, #408]	; (8007bf8 <__ieee754_pow+0x750>)
 8007a60:	f7f8 fb84 	bl	800016c <__adddf3>
 8007a64:	4632      	mov	r2, r6
 8007a66:	463b      	mov	r3, r7
 8007a68:	f7f8 fb80 	bl	800016c <__adddf3>
 8007a6c:	2400      	movs	r4, #0
 8007a6e:	460d      	mov	r5, r1
 8007a70:	4622      	mov	r2, r4
 8007a72:	460b      	mov	r3, r1
 8007a74:	4640      	mov	r0, r8
 8007a76:	4649      	mov	r1, r9
 8007a78:	f7f8 fd2e 	bl	80004d8 <__aeabi_dmul>
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4680      	mov	r8, r0
 8007a80:	4689      	mov	r9, r1
 8007a82:	4620      	mov	r0, r4
 8007a84:	4629      	mov	r1, r5
 8007a86:	4b5c      	ldr	r3, [pc, #368]	; (8007bf8 <__ieee754_pow+0x750>)
 8007a88:	f7f8 fb6e 	bl	8000168 <__aeabi_dsub>
 8007a8c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a90:	f7f8 fb6a 	bl	8000168 <__aeabi_dsub>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f8 fb64 	bl	8000168 <__aeabi_dsub>
 8007aa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007aa4:	f7f8 fd18 	bl	80004d8 <__aeabi_dmul>
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	462b      	mov	r3, r5
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	f7f8 fd10 	bl	80004d8 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4630      	mov	r0, r6
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f7f8 fb54 	bl	800016c <__adddf3>
 8007ac4:	2400      	movs	r4, #0
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f8 fb4b 	bl	800016c <__adddf3>
 8007ad6:	a33c      	add	r3, pc, #240	; (adr r3, 8007bc8 <__ieee754_pow+0x720>)
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	4620      	mov	r0, r4
 8007ade:	460d      	mov	r5, r1
 8007ae0:	f7f8 fcfa 	bl	80004d8 <__aeabi_dmul>
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aec:	4620      	mov	r0, r4
 8007aee:	4629      	mov	r1, r5
 8007af0:	f7f8 fb3a 	bl	8000168 <__aeabi_dsub>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4630      	mov	r0, r6
 8007afa:	4639      	mov	r1, r7
 8007afc:	f7f8 fb34 	bl	8000168 <__aeabi_dsub>
 8007b00:	a333      	add	r3, pc, #204	; (adr r3, 8007bd0 <__ieee754_pow+0x728>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fce7 	bl	80004d8 <__aeabi_dmul>
 8007b0a:	a333      	add	r3, pc, #204	; (adr r3, 8007bd8 <__ieee754_pow+0x730>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	4606      	mov	r6, r0
 8007b12:	460f      	mov	r7, r1
 8007b14:	4620      	mov	r0, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7f8 fcde 	bl	80004d8 <__aeabi_dmul>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	f7f8 fb22 	bl	800016c <__adddf3>
 8007b28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b2a:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <__ieee754_pow+0x754>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f7f8 fb1b 	bl	800016c <__adddf3>
 8007b36:	4680      	mov	r8, r0
 8007b38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007b3a:	4689      	mov	r9, r1
 8007b3c:	f7f8 fc62 	bl	8000404 <__aeabi_i2d>
 8007b40:	4604      	mov	r4, r0
 8007b42:	460d      	mov	r5, r1
 8007b44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b4a:	4b2d      	ldr	r3, [pc, #180]	; (8007c00 <__ieee754_pow+0x758>)
 8007b4c:	4413      	add	r3, r2
 8007b4e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b52:	4642      	mov	r2, r8
 8007b54:	464b      	mov	r3, r9
 8007b56:	f7f8 fb09 	bl	800016c <__adddf3>
 8007b5a:	4632      	mov	r2, r6
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	f7f8 fb05 	bl	800016c <__adddf3>
 8007b62:	4622      	mov	r2, r4
 8007b64:	462b      	mov	r3, r5
 8007b66:	f7f8 fb01 	bl	800016c <__adddf3>
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	462b      	mov	r3, r5
 8007b70:	4682      	mov	sl, r0
 8007b72:	468b      	mov	fp, r1
 8007b74:	f7f8 faf8 	bl	8000168 <__aeabi_dsub>
 8007b78:	4632      	mov	r2, r6
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	f7f8 faf4 	bl	8000168 <__aeabi_dsub>
 8007b80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b84:	f7f8 faf0 	bl	8000168 <__aeabi_dsub>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	4649      	mov	r1, r9
 8007b90:	e60b      	b.n	80077aa <__ieee754_pow+0x302>
 8007b92:	2601      	movs	r6, #1
 8007b94:	e69f      	b.n	80078d6 <__ieee754_pow+0x42e>
 8007b96:	bf00      	nop
 8007b98:	4a454eef 	.word	0x4a454eef
 8007b9c:	3fca7e28 	.word	0x3fca7e28
 8007ba0:	93c9db65 	.word	0x93c9db65
 8007ba4:	3fcd864a 	.word	0x3fcd864a
 8007ba8:	a91d4101 	.word	0xa91d4101
 8007bac:	3fd17460 	.word	0x3fd17460
 8007bb0:	518f264d 	.word	0x518f264d
 8007bb4:	3fd55555 	.word	0x3fd55555
 8007bb8:	db6fabff 	.word	0xdb6fabff
 8007bbc:	3fdb6db6 	.word	0x3fdb6db6
 8007bc0:	33333303 	.word	0x33333303
 8007bc4:	3fe33333 	.word	0x3fe33333
 8007bc8:	e0000000 	.word	0xe0000000
 8007bcc:	3feec709 	.word	0x3feec709
 8007bd0:	dc3a03fd 	.word	0xdc3a03fd
 8007bd4:	3feec709 	.word	0x3feec709
 8007bd8:	145b01f5 	.word	0x145b01f5
 8007bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8007be0:	7ff00000 	.word	0x7ff00000
 8007be4:	43400000 	.word	0x43400000
 8007be8:	0003988e 	.word	0x0003988e
 8007bec:	000bb679 	.word	0x000bb679
 8007bf0:	08008600 	.word	0x08008600
 8007bf4:	3ff00000 	.word	0x3ff00000
 8007bf8:	40080000 	.word	0x40080000
 8007bfc:	08008620 	.word	0x08008620
 8007c00:	08008610 	.word	0x08008610
 8007c04:	a39c      	add	r3, pc, #624	; (adr r3, 8007e78 <__ieee754_pow+0x9d0>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	f7f8 faad 	bl	800016c <__adddf3>
 8007c12:	4622      	mov	r2, r4
 8007c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c18:	462b      	mov	r3, r5
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	f7f8 faa3 	bl	8000168 <__aeabi_dsub>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2a:	f7f8 fee5 	bl	80009f8 <__aeabi_dcmpgt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f47f ae06 	bne.w	8007840 <__ieee754_pow+0x398>
 8007c34:	4aa2      	ldr	r2, [pc, #648]	; (8007ec0 <__ieee754_pow+0xa18>)
 8007c36:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	f340 8100 	ble.w	8007e40 <__ieee754_pow+0x998>
 8007c40:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007c44:	151b      	asrs	r3, r3, #20
 8007c46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007c4a:	fa4a fa03 	asr.w	sl, sl, r3
 8007c4e:	44b2      	add	sl, r6
 8007c50:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007c54:	489b      	ldr	r0, [pc, #620]	; (8007ec4 <__ieee754_pow+0xa1c>)
 8007c56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007c5a:	4108      	asrs	r0, r1
 8007c5c:	ea00 030a 	and.w	r3, r0, sl
 8007c60:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007c64:	f1c1 0114 	rsb	r1, r1, #20
 8007c68:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007c6c:	fa4a fa01 	asr.w	sl, sl, r1
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	4620      	mov	r0, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	bfb8      	it	lt
 8007c7c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007c80:	f7f8 fa72 	bl	8000168 <__aeabi_dsub>
 8007c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c8c:	2400      	movs	r4, #0
 8007c8e:	4642      	mov	r2, r8
 8007c90:	464b      	mov	r3, r9
 8007c92:	f7f8 fa6b 	bl	800016c <__adddf3>
 8007c96:	a37a      	add	r3, pc, #488	; (adr r3, 8007e80 <__ieee754_pow+0x9d8>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	f7f8 fc1a 	bl	80004d8 <__aeabi_dmul>
 8007ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca8:	4606      	mov	r6, r0
 8007caa:	460f      	mov	r7, r1
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 fa5a 	bl	8000168 <__aeabi_dsub>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4649      	mov	r1, r9
 8007cbc:	f7f8 fa54 	bl	8000168 <__aeabi_dsub>
 8007cc0:	a371      	add	r3, pc, #452	; (adr r3, 8007e88 <__ieee754_pow+0x9e0>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fc07 	bl	80004d8 <__aeabi_dmul>
 8007cca:	a371      	add	r3, pc, #452	; (adr r3, 8007e90 <__ieee754_pow+0x9e8>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	4689      	mov	r9, r1
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fbfe 	bl	80004d8 <__aeabi_dmul>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4640      	mov	r0, r8
 8007ce2:	4649      	mov	r1, r9
 8007ce4:	f7f8 fa42 	bl	800016c <__adddf3>
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 fa3a 	bl	800016c <__adddf3>
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	f7f8 fa32 	bl	8000168 <__aeabi_dsub>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4620      	mov	r0, r4
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	f7f8 fa2c 	bl	8000168 <__aeabi_dsub>
 8007d10:	4642      	mov	r2, r8
 8007d12:	4606      	mov	r6, r0
 8007d14:	460f      	mov	r7, r1
 8007d16:	464b      	mov	r3, r9
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fbdc 	bl	80004d8 <__aeabi_dmul>
 8007d20:	a35d      	add	r3, pc, #372	; (adr r3, 8007e98 <__ieee754_pow+0x9f0>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	4604      	mov	r4, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	f7f8 fbd5 	bl	80004d8 <__aeabi_dmul>
 8007d2e:	a35c      	add	r3, pc, #368	; (adr r3, 8007ea0 <__ieee754_pow+0x9f8>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f7f8 fa18 	bl	8000168 <__aeabi_dsub>
 8007d38:	4622      	mov	r2, r4
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	f7f8 fbcc 	bl	80004d8 <__aeabi_dmul>
 8007d40:	a359      	add	r3, pc, #356	; (adr r3, 8007ea8 <__ieee754_pow+0xa00>)
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f7f8 fa11 	bl	800016c <__adddf3>
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	462b      	mov	r3, r5
 8007d4e:	f7f8 fbc3 	bl	80004d8 <__aeabi_dmul>
 8007d52:	a357      	add	r3, pc, #348	; (adr r3, 8007eb0 <__ieee754_pow+0xa08>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fa06 	bl	8000168 <__aeabi_dsub>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	f7f8 fbba 	bl	80004d8 <__aeabi_dmul>
 8007d64:	a354      	add	r3, pc, #336	; (adr r3, 8007eb8 <__ieee754_pow+0xa10>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 f9ff 	bl	800016c <__adddf3>
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	f7f8 fbb1 	bl	80004d8 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	f7f8 f9f3 	bl	8000168 <__aeabi_dsub>
 8007d82:	4604      	mov	r4, r0
 8007d84:	460d      	mov	r5, r1
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fba3 	bl	80004d8 <__aeabi_dmul>
 8007d92:	2200      	movs	r2, #0
 8007d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f7f8 f9e2 	bl	8000168 <__aeabi_dsub>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dac:	f7f8 fcbe 	bl	800072c <__aeabi_ddiv>
 8007db0:	4632      	mov	r2, r6
 8007db2:	4604      	mov	r4, r0
 8007db4:	460d      	mov	r5, r1
 8007db6:	463b      	mov	r3, r7
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fb8c 	bl	80004d8 <__aeabi_dmul>
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	f7f8 f9d2 	bl	800016c <__adddf3>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f7f8 f9ca 	bl	8000168 <__aeabi_dsub>
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	f7f8 f9c6 	bl	8000168 <__aeabi_dsub>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	2000      	movs	r0, #0
 8007de2:	4939      	ldr	r1, [pc, #228]	; (8007ec8 <__ieee754_pow+0xa20>)
 8007de4:	f7f8 f9c0 	bl	8000168 <__aeabi_dsub>
 8007de8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007dec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007df0:	da29      	bge.n	8007e46 <__ieee754_pow+0x99e>
 8007df2:	4652      	mov	r2, sl
 8007df4:	f000 f874 	bl	8007ee0 <scalbn>
 8007df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfc:	f7ff bbfd 	b.w	80075fa <__ieee754_pow+0x152>
 8007e00:	4b32      	ldr	r3, [pc, #200]	; (8007ecc <__ieee754_pow+0xa24>)
 8007e02:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007e06:	429f      	cmp	r7, r3
 8007e08:	f77f af14 	ble.w	8007c34 <__ieee754_pow+0x78c>
 8007e0c:	4b30      	ldr	r3, [pc, #192]	; (8007ed0 <__ieee754_pow+0xa28>)
 8007e0e:	440b      	add	r3, r1
 8007e10:	4303      	orrs	r3, r0
 8007e12:	d009      	beq.n	8007e28 <__ieee754_pow+0x980>
 8007e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f7f8 fdce 	bl	80009bc <__aeabi_dcmplt>
 8007e20:	3800      	subs	r0, #0
 8007e22:	bf18      	it	ne
 8007e24:	2001      	movne	r0, #1
 8007e26:	e452      	b.n	80076ce <__ieee754_pow+0x226>
 8007e28:	4622      	mov	r2, r4
 8007e2a:	462b      	mov	r3, r5
 8007e2c:	f7f8 f99c 	bl	8000168 <__aeabi_dsub>
 8007e30:	4642      	mov	r2, r8
 8007e32:	464b      	mov	r3, r9
 8007e34:	f7f8 fdd6 	bl	80009e4 <__aeabi_dcmpge>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	f43f aefb 	beq.w	8007c34 <__ieee754_pow+0x78c>
 8007e3e:	e7e9      	b.n	8007e14 <__ieee754_pow+0x96c>
 8007e40:	f04f 0a00 	mov.w	sl, #0
 8007e44:	e720      	b.n	8007c88 <__ieee754_pow+0x7e0>
 8007e46:	4621      	mov	r1, r4
 8007e48:	e7d6      	b.n	8007df8 <__ieee754_pow+0x950>
 8007e4a:	f04f 0b00 	mov.w	fp, #0
 8007e4e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007ec8 <__ieee754_pow+0xa20>
 8007e52:	f7ff bbb9 	b.w	80075c8 <__ieee754_pow+0x120>
 8007e56:	f04f 0b00 	mov.w	fp, #0
 8007e5a:	f04f 0c00 	mov.w	ip, #0
 8007e5e:	f7ff bbb3 	b.w	80075c8 <__ieee754_pow+0x120>
 8007e62:	4640      	mov	r0, r8
 8007e64:	4649      	mov	r1, r9
 8007e66:	f7ff bb3c 	b.w	80074e2 <__ieee754_pow+0x3a>
 8007e6a:	9200      	str	r2, [sp, #0]
 8007e6c:	f7ff bb88 	b.w	8007580 <__ieee754_pow+0xd8>
 8007e70:	2300      	movs	r3, #0
 8007e72:	f7ff bb72 	b.w	800755a <__ieee754_pow+0xb2>
 8007e76:	bf00      	nop
 8007e78:	652b82fe 	.word	0x652b82fe
 8007e7c:	3c971547 	.word	0x3c971547
 8007e80:	00000000 	.word	0x00000000
 8007e84:	3fe62e43 	.word	0x3fe62e43
 8007e88:	fefa39ef 	.word	0xfefa39ef
 8007e8c:	3fe62e42 	.word	0x3fe62e42
 8007e90:	0ca86c39 	.word	0x0ca86c39
 8007e94:	be205c61 	.word	0xbe205c61
 8007e98:	72bea4d0 	.word	0x72bea4d0
 8007e9c:	3e663769 	.word	0x3e663769
 8007ea0:	c5d26bf1 	.word	0xc5d26bf1
 8007ea4:	3ebbbd41 	.word	0x3ebbbd41
 8007ea8:	af25de2c 	.word	0xaf25de2c
 8007eac:	3f11566a 	.word	0x3f11566a
 8007eb0:	16bebd93 	.word	0x16bebd93
 8007eb4:	3f66c16c 	.word	0x3f66c16c
 8007eb8:	5555553e 	.word	0x5555553e
 8007ebc:	3fc55555 	.word	0x3fc55555
 8007ec0:	3fe00000 	.word	0x3fe00000
 8007ec4:	fff00000 	.word	0xfff00000
 8007ec8:	3ff00000 	.word	0x3ff00000
 8007ecc:	4090cbff 	.word	0x4090cbff
 8007ed0:	3f6f3400 	.word	0x3f6f3400

08007ed4 <fabs>:
 8007ed4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4770      	bx	lr
 8007edc:	0000      	movs	r0, r0
	...

08007ee0 <scalbn>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	4616      	mov	r6, r2
 8007ee4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	460b      	mov	r3, r1
 8007eee:	b992      	cbnz	r2, 8007f16 <scalbn+0x36>
 8007ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ef4:	4303      	orrs	r3, r0
 8007ef6:	d03c      	beq.n	8007f72 <scalbn+0x92>
 8007ef8:	4b31      	ldr	r3, [pc, #196]	; (8007fc0 <scalbn+0xe0>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	4b30      	ldr	r3, [pc, #192]	; (8007fc4 <scalbn+0xe4>)
 8007f02:	4604      	mov	r4, r0
 8007f04:	429e      	cmp	r6, r3
 8007f06:	460d      	mov	r5, r1
 8007f08:	da0f      	bge.n	8007f2a <scalbn+0x4a>
 8007f0a:	a329      	add	r3, pc, #164	; (adr r3, 8007fb0 <scalbn+0xd0>)
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f7f8 fae2 	bl	80004d8 <__aeabi_dmul>
 8007f14:	e006      	b.n	8007f24 <scalbn+0x44>
 8007f16:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007f1a:	42ba      	cmp	r2, r7
 8007f1c:	d109      	bne.n	8007f32 <scalbn+0x52>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	f7f8 f924 	bl	800016c <__adddf3>
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	e023      	b.n	8007f72 <scalbn+0x92>
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f30:	3a36      	subs	r2, #54	; 0x36
 8007f32:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007f36:	428e      	cmp	r6, r1
 8007f38:	dd0e      	ble.n	8007f58 <scalbn+0x78>
 8007f3a:	a31f      	add	r3, pc, #124	; (adr r3, 8007fb8 <scalbn+0xd8>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007f44:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007f48:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007f4c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007f50:	481d      	ldr	r0, [pc, #116]	; (8007fc8 <scalbn+0xe8>)
 8007f52:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007f56:	e7db      	b.n	8007f10 <scalbn+0x30>
 8007f58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007f5c:	4432      	add	r2, r6
 8007f5e:	428a      	cmp	r2, r1
 8007f60:	dceb      	bgt.n	8007f3a <scalbn+0x5a>
 8007f62:	2a00      	cmp	r2, #0
 8007f64:	dd08      	ble.n	8007f78 <scalbn+0x98>
 8007f66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f6e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f78:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007f7c:	da0c      	bge.n	8007f98 <scalbn+0xb8>
 8007f7e:	a30c      	add	r3, pc, #48	; (adr r3, 8007fb0 <scalbn+0xd0>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007f88:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007f8c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007f90:	480e      	ldr	r0, [pc, #56]	; (8007fcc <scalbn+0xec>)
 8007f92:	f041 011f 	orr.w	r1, r1, #31
 8007f96:	e7bb      	b.n	8007f10 <scalbn+0x30>
 8007f98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f9c:	3236      	adds	r2, #54	; 0x36
 8007f9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	2200      	movs	r2, #0
 8007fac:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <scalbn+0xf0>)
 8007fae:	e7af      	b.n	8007f10 <scalbn+0x30>
 8007fb0:	c2f8f359 	.word	0xc2f8f359
 8007fb4:	01a56e1f 	.word	0x01a56e1f
 8007fb8:	8800759c 	.word	0x8800759c
 8007fbc:	7e37e43c 	.word	0x7e37e43c
 8007fc0:	43500000 	.word	0x43500000
 8007fc4:	ffff3cb0 	.word	0xffff3cb0
 8007fc8:	8800759c 	.word	0x8800759c
 8007fcc:	c2f8f359 	.word	0xc2f8f359
 8007fd0:	3c900000 	.word	0x3c900000

08007fd4 <with_errno>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	460d      	mov	r5, r1
 8007fda:	4616      	mov	r6, r2
 8007fdc:	f7fd f95e 	bl	800529c <__errno>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	6006      	str	r6, [r0, #0]
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}

08007fe8 <xflow>:
 8007fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fea:	4615      	mov	r5, r2
 8007fec:	461c      	mov	r4, r3
 8007fee:	b180      	cbz	r0, 8008012 <xflow+0x2a>
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ff6:	e9cd 0100 	strd	r0, r1, [sp]
 8007ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ffe:	4628      	mov	r0, r5
 8008000:	4621      	mov	r1, r4
 8008002:	f7f8 fa69 	bl	80004d8 <__aeabi_dmul>
 8008006:	2222      	movs	r2, #34	; 0x22
 8008008:	b003      	add	sp, #12
 800800a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800800e:	f7ff bfe1 	b.w	8007fd4 <with_errno>
 8008012:	4610      	mov	r0, r2
 8008014:	4619      	mov	r1, r3
 8008016:	e7ee      	b.n	8007ff6 <xflow+0xe>

08008018 <__math_uflow>:
 8008018:	2200      	movs	r2, #0
 800801a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800801e:	f7ff bfe3 	b.w	8007fe8 <xflow>

08008022 <__math_oflow>:
 8008022:	2200      	movs	r2, #0
 8008024:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008028:	f7ff bfde 	b.w	8007fe8 <xflow>

0800802c <__ieee754_sqrt>:
 800802c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80081d0 <__ieee754_sqrt+0x1a4>
 8008030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ea3c 0c01 	bics.w	ip, ip, r1
 8008038:	460b      	mov	r3, r1
 800803a:	4606      	mov	r6, r0
 800803c:	460d      	mov	r5, r1
 800803e:	460a      	mov	r2, r1
 8008040:	4604      	mov	r4, r0
 8008042:	d10e      	bne.n	8008062 <__ieee754_sqrt+0x36>
 8008044:	4602      	mov	r2, r0
 8008046:	f7f8 fa47 	bl	80004d8 <__aeabi_dmul>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4630      	mov	r0, r6
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 f88b 	bl	800016c <__adddf3>
 8008056:	4606      	mov	r6, r0
 8008058:	460d      	mov	r5, r1
 800805a:	4630      	mov	r0, r6
 800805c:	4629      	mov	r1, r5
 800805e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008062:	2900      	cmp	r1, #0
 8008064:	dc0d      	bgt.n	8008082 <__ieee754_sqrt+0x56>
 8008066:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800806a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800806e:	d0f4      	beq.n	800805a <__ieee754_sqrt+0x2e>
 8008070:	b139      	cbz	r1, 8008082 <__ieee754_sqrt+0x56>
 8008072:	4602      	mov	r2, r0
 8008074:	f7f8 f878 	bl	8000168 <__aeabi_dsub>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	f7f8 fb56 	bl	800072c <__aeabi_ddiv>
 8008080:	e7e9      	b.n	8008056 <__ieee754_sqrt+0x2a>
 8008082:	1512      	asrs	r2, r2, #20
 8008084:	f000 8089 	beq.w	800819a <__ieee754_sqrt+0x16e>
 8008088:	2500      	movs	r5, #0
 800808a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800808e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008096:	07d2      	lsls	r2, r2, #31
 8008098:	bf5c      	itt	pl
 800809a:	005b      	lslpl	r3, r3, #1
 800809c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80080a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080a4:	bf58      	it	pl
 80080a6:	0064      	lslpl	r4, r4, #1
 80080a8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80080ac:	0062      	lsls	r2, r4, #1
 80080ae:	2016      	movs	r0, #22
 80080b0:	4629      	mov	r1, r5
 80080b2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80080b6:	1076      	asrs	r6, r6, #1
 80080b8:	190f      	adds	r7, r1, r4
 80080ba:	429f      	cmp	r7, r3
 80080bc:	bfde      	ittt	le
 80080be:	1bdb      	suble	r3, r3, r7
 80080c0:	1939      	addle	r1, r7, r4
 80080c2:	192d      	addle	r5, r5, r4
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	3801      	subs	r0, #1
 80080c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80080cc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80080d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80080d4:	d1f0      	bne.n	80080b8 <__ieee754_sqrt+0x8c>
 80080d6:	4604      	mov	r4, r0
 80080d8:	2720      	movs	r7, #32
 80080da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80080de:	428b      	cmp	r3, r1
 80080e0:	eb0c 0e00 	add.w	lr, ip, r0
 80080e4:	dc02      	bgt.n	80080ec <__ieee754_sqrt+0xc0>
 80080e6:	d113      	bne.n	8008110 <__ieee754_sqrt+0xe4>
 80080e8:	4596      	cmp	lr, r2
 80080ea:	d811      	bhi.n	8008110 <__ieee754_sqrt+0xe4>
 80080ec:	f1be 0f00 	cmp.w	lr, #0
 80080f0:	eb0e 000c 	add.w	r0, lr, ip
 80080f4:	da56      	bge.n	80081a4 <__ieee754_sqrt+0x178>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	db54      	blt.n	80081a4 <__ieee754_sqrt+0x178>
 80080fa:	f101 0801 	add.w	r8, r1, #1
 80080fe:	1a5b      	subs	r3, r3, r1
 8008100:	4641      	mov	r1, r8
 8008102:	4596      	cmp	lr, r2
 8008104:	bf88      	it	hi
 8008106:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800810a:	eba2 020e 	sub.w	r2, r2, lr
 800810e:	4464      	add	r4, ip
 8008110:	005b      	lsls	r3, r3, #1
 8008112:	3f01      	subs	r7, #1
 8008114:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008118:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800811c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008120:	d1dd      	bne.n	80080de <__ieee754_sqrt+0xb2>
 8008122:	4313      	orrs	r3, r2
 8008124:	d01b      	beq.n	800815e <__ieee754_sqrt+0x132>
 8008126:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80081d4 <__ieee754_sqrt+0x1a8>
 800812a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80081d8 <__ieee754_sqrt+0x1ac>
 800812e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008132:	e9db 2300 	ldrd	r2, r3, [fp]
 8008136:	f7f8 f817 	bl	8000168 <__aeabi_dsub>
 800813a:	e9da 8900 	ldrd	r8, r9, [sl]
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fc43 	bl	80009d0 <__aeabi_dcmple>
 800814a:	b140      	cbz	r0, 800815e <__ieee754_sqrt+0x132>
 800814c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008150:	e9db 2300 	ldrd	r2, r3, [fp]
 8008154:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008158:	d126      	bne.n	80081a8 <__ieee754_sqrt+0x17c>
 800815a:	463c      	mov	r4, r7
 800815c:	3501      	adds	r5, #1
 800815e:	106b      	asrs	r3, r5, #1
 8008160:	0864      	lsrs	r4, r4, #1
 8008162:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008166:	07ea      	lsls	r2, r5, #31
 8008168:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800816c:	bf48      	it	mi
 800816e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8008172:	4620      	mov	r0, r4
 8008174:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008178:	e76d      	b.n	8008056 <__ieee754_sqrt+0x2a>
 800817a:	0ae3      	lsrs	r3, r4, #11
 800817c:	3915      	subs	r1, #21
 800817e:	0564      	lsls	r4, r4, #21
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0fa      	beq.n	800817a <__ieee754_sqrt+0x14e>
 8008184:	02d8      	lsls	r0, r3, #11
 8008186:	d50a      	bpl.n	800819e <__ieee754_sqrt+0x172>
 8008188:	f1c2 0020 	rsb	r0, r2, #32
 800818c:	fa24 f000 	lsr.w	r0, r4, r0
 8008190:	1e55      	subs	r5, r2, #1
 8008192:	4094      	lsls	r4, r2
 8008194:	4303      	orrs	r3, r0
 8008196:	1b4a      	subs	r2, r1, r5
 8008198:	e776      	b.n	8008088 <__ieee754_sqrt+0x5c>
 800819a:	4611      	mov	r1, r2
 800819c:	e7f0      	b.n	8008180 <__ieee754_sqrt+0x154>
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	3201      	adds	r2, #1
 80081a2:	e7ef      	b.n	8008184 <__ieee754_sqrt+0x158>
 80081a4:	4688      	mov	r8, r1
 80081a6:	e7aa      	b.n	80080fe <__ieee754_sqrt+0xd2>
 80081a8:	f7f7 ffe0 	bl	800016c <__adddf3>
 80081ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4640      	mov	r0, r8
 80081b6:	4649      	mov	r1, r9
 80081b8:	f7f8 fc00 	bl	80009bc <__aeabi_dcmplt>
 80081bc:	b120      	cbz	r0, 80081c8 <__ieee754_sqrt+0x19c>
 80081be:	1ca1      	adds	r1, r4, #2
 80081c0:	bf08      	it	eq
 80081c2:	3501      	addeq	r5, #1
 80081c4:	3402      	adds	r4, #2
 80081c6:	e7ca      	b.n	800815e <__ieee754_sqrt+0x132>
 80081c8:	3401      	adds	r4, #1
 80081ca:	f024 0401 	bic.w	r4, r4, #1
 80081ce:	e7c6      	b.n	800815e <__ieee754_sqrt+0x132>
 80081d0:	7ff00000 	.word	0x7ff00000
 80081d4:	200001e0 	.word	0x200001e0
 80081d8:	200001e8 	.word	0x200001e8

080081dc <_init>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr

080081e8 <_fini>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr
